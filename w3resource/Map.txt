#Date-8/3/22
#1-triple all numbers of a given list of integers. Use Python map
l=[1,2,3,4,5,6]
result=list(map(lambda x:x*3,l))
print(result)
[3, 6, 9, 12, 15, 18]
#2-add three given lists using Python map and lambda
l1=[1,2,3,4,5,6]
l2=[1,2,3,4,5,6]
l3=[1,2,3,4,5,6]
result=list(map(lambda x:sum(x),(zip(l1,l2,l3))))
print(result)
[3, 6, 9, 12, 15, 18]
l1=[1,2,3,4,5,6]
l2=[1,2,3,4,5,6]
l3=[1,2,3,4,5,6]
result=list(map(lambda x,y,z:x+y+z,l1,l2,l3))
print(result)
[3, 6, 9, 12, 15, 18]
#Date 8/4/22
#3-listify the list of given strings individually using Python map
l=['Red', 'Blue', 'Black', 'White', 'Pink']
result=list(map(list,l))
print(result)
[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]
#4-create a list containing the power of said number in bases raised 
#to the corresponding number in the index using Python map
l=[1,2,3,4,5]
idx=[2,4,6,8,10]
result=list(map(pow,l,idx))
print(result)
[1, 16, 729, 65536, 9765625]
#5-square the elements of a list using map() function
l=[1,2,3,4,5]
n=2
result=list(map(lambda x:x**n,l))
print(result)
[1, 4, 9, 16, 25]
def square_num(n):
  return n * n
nums = [4, 5, 2, 9]
print("Original List: ",nums)
result = map(square_num, nums)
print("Square the elements of the said list using map():")
print(list(result))
Original List:  [4, 5, 2, 9]
Square the elements of the said list using map():
[16, 25, 4, 81]
#6-convert all the characters in uppercase and lowercase and eliminate duplicate letters from a given sequence.
def remove_dup(s):    
    return str(s).upper(), str(s).lower()
result=set(map(remove_dup,'klmnsdlrn'))
print(result)
{('D', 'd'), ('S', 's'), ('L', 'l'), ('N', 'n'), ('K', 'k'), ('M', 'm'), ('R', 'r')}
#7-add two given lists and find the difference between lists. Use map() function
l1=[4, 5, 2, 9]
l2=[16, 25, 4, 81]
result_add=list(map(lambda x:sum(x),(zip(l1,l2))))
#result_sub=list(map(lambda x:sub(x),(zip(l1,l2))))
print(result_add)
[20, 30, 6, 90]
def addition_subtrction(x, y):
    return x + y, x - y
 
nums1 = [6, 5, 3, 9]
nums2 = [0, 1, 7, 7]
print("Original lists:")
print(nums1)
print(nums2)
result = map(addition_subtrction, nums1, nums2)
print("\nResult:")
print(list(result))
Original lists:
[6, 5, 3, 9]
[0, 1, 7, 7]

Result:
[(6, 6), (6, 4), (10, -4), (16, 2)]
#8-convert a given list of integers and a tuple of integers in a list of strings
lst=[6, 5, 3, 9]
tup=(0,2,1,3)
lst_res=list(map(str,lst))
tup_res=tuple(map(str,tup))
print(lst_res)
print(tup_res)
['6', '5', '3', '9']
('0', '2', '1', '3')
#9-create a new list taking specific elements from a tuple and convert a string value to integer.
tup=('0', '2', '1', 'e','3')
res_int=list(map(lambda x:int(x) if x.isdigit() else ' ',tup))
print(res_int)
[0, 2, 1, ' ', 3]
student_data  = [('Alberto Franco','15/05/2002','35kg'), ('Gino Mcneill','17/05/2002','37kg'), ('Ryan Parkes','16/02/1999', '39kg'), ('Eesha Hinton','25/09/1998', '35kg')]
print("Original data:")
print(student_data)
students_data_name = list(map(lambda x:x[0], student_data))
students_data_dob = list(map(lambda x:x[1], student_data))
students_data_weight = list(map(lambda x:int(x[2][:-2]), student_data))
print("\nStudent name:")
print(students_data_name)
print("Student name:")
print(students_data_dob)
print("Student weight:")
print(students_data_weight)
Original data:
[('Alberto Franco', '15/05/2002', '35kg'), ('Gino Mcneill', '17/05/2002', '37kg'), ('Ryan Parkes', '16/02/1999', '39kg'), ('Eesha Hinton', '25/09/1998', '35kg')]

Student name:
['Alberto Franco', 'Gino Mcneill', 'Ryan Parkes', 'Eesha Hinton']
Student name:
['15/05/2002', '17/05/2002', '16/02/1999', '25/09/1998']
Student weight:
[35, 37, 39, 35]
#10-compute the square of first N Fibonacci numbers, using map function and generate a list of the numbers.
def fib_cnt(n):
    fib_lst=[0,1]
    fib_res=any(map(lambda _:fib_lst.append(sum(fib_lst[-2:])),range(2,n))) ##gives sum of last 2 nums in list
    
    return fib_lst[:n] #lst[:n] gives back elements from index 0-n

print(fib_cnt(10))
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
#11- compute the sum of elements of a given array of integers, use map() function.
from array import array 
def array_sum(num_arr):
    sum_n=0
    for n in num_arr:
        sum_n+=n
    return sum_n

a=array('i',[1,2,3])
result=list(map(int,a))
result = array_sum(a)
print(result)
6
#12-find the ratio of positive numbers, negative numbers and zeroes in an array of integers
from array import array

def plusMinus(nums):
    n = len(nums)
    n1 = n2 = n3 = 0
    
    for x in nums:
        if x > 0:
            n1 += 1
        elif x < 0:
            n2 += 1
        else:
            n3 += 1
            
    return round(n1/n,2), round(n2/n,2), round(n3/n,2)

nums = array('i', [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])
print("Original array:",nums)
nums_arr = list(map(int, nums))
result = plusMinus(nums_arr)
print("Ratio of positive numbers, negative numbers and zeroes:")
print(result)
nums = array('i', [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])
print("\nOriginal array:",nums)
nums_arr = list(map(int, nums))
result = plusMinus(nums_arr)
print("Ratio of positive numbers, negative numbers and zeroes:")
print(result)
Original array: array('i', [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])
Ratio of positive numbers, negative numbers and zeroes:
(0.54, 0.31, 0.15)

Original array: array('i', [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])
Ratio of positive numbers, negative numbers and zeroes:
(0.69, 0.31, 0.0)
#13-count the same pair in two given lists. use map() function
#14-interleave two given list into another list randomly using map() function
#15-split a given dictionary of lists into list of dictionaries using map function
#16-convert a given list of strings into list of lists using map function
l=['abc','ert','wer','kte']
result=list(map(list,l))
print(result)
[['a', 'b', 'c'], ['e', 'r', 't'], ['w', 'e', 'r'], ['k', 't', 'e']]
#17-convert a given list of tuples to a list of strings using map function.