#1-Find out if sequence of numbers is different
#convert to set and see if length is same
#subtract a number>0 from all members and see if the result is same---Analyze this more

def distNumCheck(num):
    x=1
    temp1=0
    temp=num[0]-x
    for i+1 in range num:
        temp1= i-x
        if temp1==temp:
            return 0
            break
        else:
            return 1
        
print(distNumCheck([3,4,5,2]))
            
        
  File "C:\Users\przir\AppData\Local\Temp/ipykernel_4864/4218212042.py", line 10
    for i+1 in range num:
        ^
SyntaxError: cannot assign to operator
#1-Use of Set
def distict_test(data):
    if len(data)==len(set(data)):
        return True
    else:
        return False
    
#2 all possible strings by using 'a', 'e', 'i', 'o', 'u'. ---need more analysiss
#--use of random keyword
import random
char_list=['a','e','i','o','u']
random.shuffle(char_list)
print(''.join(char_list))
#print(char_list)
oiuea
#3 remove and print every third number from a list of numbers until the list becomes empty
#We cannot use for loop as we have to re-point the index to 0 every time
def list_print():
    num=[5,6,7,3,2,1,0,55,43,21]
    for i in range(len(num)):
        print (i)
        if i%2==0:
            num.pop(i)
            i=i-1
            print(num)

print(list_print())
0
[6, 7, 3, 2, 1, 0, 55, 43, 21]
1
2
[6, 7, 2, 1, 0, 55, 43, 21]
3
4
[6, 7, 2, 1, 55, 43, 21]
5
6
[6, 7, 2, 1, 55, 43]
7
8
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_4864/852643597.py in <module>
      9             print(num)
     10 
---> 11 print(list_print())

~\AppData\Local\Temp/ipykernel_4864/852643597.py in list_print()
      5         print (i)
      6         if i%2==0:
----> 7             num.pop(i)
      8             i=i-1
      9             print(num)

IndexError: pop index out of range
##3 remove and print every third number from a list of numbers until the list becomes empty
#while loop
def remove_list():
    num=[5,6,7,3,2,1,0,55,43,21]
    idx=0
    position=2
    list_len=len(num)
    
    while(list_len>0):
        idx=(idx+position)%list_len
        num.pop(idx)
        list_len=list_len-1
        print(num,list_len)

print(remove_list())
[5, 6, 3, 2, 1, 0, 55, 43, 21] 9
[5, 6, 3, 2, 0, 55, 43, 21] 8
[5, 6, 3, 2, 0, 55, 21] 7
[5, 3, 2, 0, 55, 21] 6
[5, 3, 2, 55, 21] 5
[3, 2, 55, 21] 4
[3, 2, 21] 3
[3, 21] 2
[3] 1
[] 0
None
#4 find unique triplets whose three elements gives the sum of zero from an array of n integers.
#solution-1:convert list to set and add three numbers 

def three_sum(nums):
  result = []
  nums.sort()
  for i in range(len(nums)-2):
    if i> 0 and nums[i] == nums[i-1]:
      continue
    l, r = i+1, len(nums)-1
    while l < r:
      s = nums[i] + nums[l] + nums[r]
      if s > 0:
        r -= 1
      elif s < 0:
          l += 1
      else:
        # found three sum
        result.append((nums[i], nums[l], nums[r]))
        # remove duplicates
        while l < r and nums[l] == nums[l+1]:
          l+=1
          while l < r and nums[r] == nums[r-1]:
            r -= 1
            l += 1
            r -= 1
          return result

x = [1, -6,-7, 2, -1,8, 2, 0, -2 ]
print(three_sum(x))
#5-create the combinations of 3 digit combo.
#solution-1:append the numbers/concat them
#solution-2:multiply by 100,10 and 1 and add them
#solution-3:
#olution-1:append the numbers/concat them
x,y,z=1,2,3
new_number=x*100+y*10+z
print(new_number)
123
#solution-1:append the numbers/concat them
x,y,z=1,2,3
new_num=int(str(x) + str(y)+str(z))
print(new_num)

new_num_2=int(f"{x}{y}")
print(new_num_2)

new_num_3=eval(f"{x}{y}")
print(new_num_3)
123
12
12
#6 print a long text, convert the string to a list and print all the words and their frequencies
#solution-1: convert string to list then add char and frequencies to dictionary:::analyze more 
#solution-2: convert string to list then use frequenncy method to count characters

#solution-2:convert string to list then use frequenncy method to count characters
def word_freq(text):
    list1=[]
    list1[:]=text
    
    word_freq=[list1.count(n) for n in list1]
    
    print(list1)
    print(word_freq)
    print("Pairs (Words and Frequencies:\n {}".format(str(list(zip(list1, word_freq)))))
    
word_freq('sakjjijdeinjnc')
['s', 'a', 'k', 'j', 'j', 'i', 'j', 'd', 'e', 'i', 'n', 'j', 'n', 'c']
[1, 1, 1, 4, 4, 2, 4, 1, 1, 2, 2, 4, 2, 1]
Pairs (Words and Frequencies:
 [('s', 1), ('a', 1), ('k', 1), ('j', 4), ('j', 4), ('i', 2), ('j', 4), ('d', 1), ('e', 1), ('i', 2), ('n', 2), ('j', 4), ('n', 2), ('c', 1)]
#7-count the number of each character of a given text of a text file
#8 program to get the top stories from Google news
#-------------Later after learning 
#9 installed packages
import pkg_resources
installed_packages = pkg_resources.working_set
installed_packages_list = sorted(["%s==%s" % (i.key, i.version)
     for i in installed_packages])
for m in installed_packages_list:
    print(m)
alabaster==0.7.12
anaconda-client==1.9.0
anaconda-navigator==2.1.1
anaconda-project==0.10.1
anyio==2.2.0
appdirs==1.4.4
argh==0.26.2
argon2-cffi==20.1.0
arrow==0.13.1
asn1crypto==1.4.0
astroid==2.6.6
astropy==4.3.1
async-generator==1.10
atomicwrites==1.4.0
attrs==21.2.0
autopep8==1.5.7
babel==2.9.1
backcall==0.2.0
backports.functools-lru-cache==1.6.4
backports.shutil-get-terminal-size==1.0.0
backports.tempfile==1.0
backports.weakref==1.0.post1
bcrypt==3.2.0
beautifulsoup4==4.10.0
binaryornot==0.4.4
bitarray==2.3.0
bkcharts==0.2
black==19.10b0
bleach==4.0.0
bokeh==2.4.1
boto==2.49.0
bottleneck==1.3.2
brotlipy==0.7.0
cached-property==1.5.2
certifi==2021.10.8
cffi==1.14.6
chardet==4.0.0
charset-normalizer==2.0.4
click==8.0.3
cloudpickle==2.0.0
clyent==1.2.2
colorama==0.4.4
comtypes==1.1.10
conda-build==3.21.6
conda-content-trust==0+unknown
conda-pack==0.6.0
conda-package-handling==1.7.3
conda-repo-cli==1.0.4
conda-token==0.3.0
conda-verify==3.4.2
conda==4.10.3
contextlib2==0.6.0.post1
cookiecutter==1.7.2
cryptography==3.4.8
cycler==0.10.0
cython==0.29.24
cytoolz==0.11.0
daal4py==2021.3.0
dask==2021.10.0
debugpy==1.4.1
decorator==5.1.0
defusedxml==0.7.1
diff-match-patch==20200713
distributed==2021.10.0
docutils==0.17.1
entrypoints==0.3
et-xmlfile==1.1.0
fastcache==1.1.0
filelock==3.3.1
flake8==3.9.2
flask==1.1.2
fonttools==4.25.0
fsspec==2021.10.1
future==0.18.2
gevent==21.8.0
glob2==0.7
greenlet==1.1.1
h5py==3.2.1
heapdict==1.0.1
html5lib==1.1
idna==3.2
imagecodecs==2021.8.26
imageio==2.9.0
imagesize==1.2.0
importlib-metadata==4.8.1
inflection==0.5.1
iniconfig==1.1.1
intervaltree==3.1.0
ipykernel==6.4.1
ipython-genutils==0.2.0
ipython==7.29.0
ipywidgets==7.6.5
isort==5.9.3
itsdangerous==2.0.1
jdcal==1.4.1
jedi==0.18.0
jinja2-time==0.2.0
jinja2==2.11.3
joblib==1.1.0
json5==0.9.6
jsonschema==3.2.0
jupyter-client==6.1.12
jupyter-console==6.4.0
jupyter-core==4.8.1
jupyter-server==1.4.1
jupyter==1.0.0
jupyterlab-pygments==0.1.2
jupyterlab-server==2.8.2
jupyterlab-widgets==1.0.0
jupyterlab==3.2.1
keyring==23.1.0
kiwisolver==1.3.1
lazy-object-proxy==1.6.0
libarchive-c==2.9
llvmlite==0.37.0
locket==0.2.1
lxml==4.6.3
markupsafe==1.1.1
matplotlib-inline==0.1.2
matplotlib==3.4.3
mccabe==0.6.1
menuinst==1.4.18
mistune==0.8.4
mkl-fft==1.3.1
mkl-random==1.2.2
mkl-service==2.4.0
mock==4.0.3
more-itertools==8.10.0
mpmath==1.2.1
msgpack==1.0.2
multipledispatch==0.6.0
munkres==1.1.4
mypy-extensions==0.4.3
navigator-updater==0.2.1
nbclassic==0.2.6
nbclient==0.5.3
nbconvert==6.1.0
nbformat==5.1.3
nest-asyncio==1.5.1
networkx==2.6.3
nltk==3.6.5
nose==1.3.7
notebook==6.4.5
numba==0.54.1
numexpr==2.7.3
numpy==1.20.3
numpydoc==1.1.0
olefile==0.46
openpyxl==3.0.9
packaging==21.0
pandas==1.3.4
pandocfilters==1.4.3
paramiko==2.7.2
parso==0.8.2
partd==1.2.0
path==16.0.0
pathlib2==2.3.6
pathspec==0.7.0
patsy==0.5.2
pep8==1.7.1
pexpect==4.8.0
pickleshare==0.7.5
pillow==8.4.0
pip==21.2.4
pkginfo==1.7.1
pluggy==0.13.1
ply==3.11
poyo==0.5.0
prometheus-client==0.11.0
prompt-toolkit==3.0.20
psutil==5.8.0
ptyprocess==0.7.0
py==1.10.0
pycodestyle==2.7.0
pycosat==0.6.3
pycparser==2.20
pycurl==7.44.1
pydocstyle==6.1.1
pyerfa==2.0.0
pyflakes==2.3.1
pygments==2.10.0
pyjwt==2.1.0
pylint==2.9.6
pyls-spyder==0.4.0
pynacl==1.4.0
pyodbc==4.0.0-unsupported
pyopenssl==21.0.0
pyparsing==3.0.4
pyreadline==2.1
pyrsistent==0.18.0
pysocks==1.7.1
pytest==6.2.4
python-dateutil==2.8.2
python-lsp-black==1.0.0
python-lsp-jsonrpc==1.0.0
python-lsp-server==1.2.4
python-slugify==5.0.2
pytz==2021.3
pywavelets==1.1.1
pywin32-ctypes==0.2.0
pywin32==228
pywinpty==0.5.7
pyyaml==6.0
pyzmq==22.2.1
qdarkstyle==3.0.2
qstylizer==0.1.10
qtawesome==1.0.2
qtconsole==5.1.1
qtpy==1.10.0
regex==2021.8.3
requests==2.26.0
rope==0.19.0
rtree==0.9.7
ruamel-yaml-conda==0.15.100
scikit-image==0.18.3
scikit-learn-intelex==2021.20210714.120553
scikit-learn==0.24.2
scipy==1.7.1
seaborn==0.11.2
send2trash==1.8.0
setuptools==58.0.4
simplegeneric==0.8.1
singledispatch==3.7.0
sip==4.19.13
six==1.16.0
sniffio==1.2.0
snowballstemmer==2.1.0
sortedcollections==2.1.0
sortedcontainers==2.4.0
soupsieve==2.2.1
sphinx==4.2.0
sphinxcontrib-applehelp==1.0.2
sphinxcontrib-devhelp==1.0.2
sphinxcontrib-htmlhelp==2.0.0
sphinxcontrib-jsmath==1.0.1
sphinxcontrib-qthelp==1.0.3
sphinxcontrib-serializinghtml==1.1.5
sphinxcontrib-websupport==1.2.4
spyder-kernels==2.1.3
spyder==5.1.5
sqlalchemy==1.4.22
statsmodels==0.12.2
sympy==1.9
tables==3.6.1
tbb==0.2
tblib==1.7.0
terminado==0.9.4
testpath==0.5.0
text-unidecode==1.3
textdistance==4.2.1
threadpoolctl==2.2.0
three-merge==0.1.1
tifffile==2021.7.2
tinycss==0.4
toml==0.10.2
toolz==0.11.1
tornado==6.1
tqdm==4.62.3
traitlets==5.1.0
typed-ast==1.4.3
typing-extensions==3.10.0.2
ujson==4.0.2
unicodecsv==0.14.1
unidecode==1.2.0
urllib3==1.26.7
watchdog==2.1.3
wcwidth==0.2.5
webencodings==0.5.1
werkzeug==2.0.2
wheel==0.37.0
whichcraft==0.6.1
widgetsnbextension==3.5.1
win-inet-pton==1.1.0
win-unicode-console==0.5
wincertstore==0.2
wrapt==1.12.1
xlrd==2.0.1
xlsxwriter==3.0.1
xlwings==0.24.9
xlwt==1.3.0
xmltodict==0.12.0
yapf==0.31.0
zict==2.0.0
zipp==3.6.0
zope.event==4.5.0
zope.interface==5.4.0
#10 display some information about the OS where the script is running
import platform as pl

os_profile = [
        'architecture',
        'linux_distribution',
        'mac_ver',
        'machine',
        'node',
        'platform',
        'processor',
        'python_build',
        'python_compiler',
        'python_version',
        'release',
        'system',
        'uname',
        'version',
    ]
for key in os_profile:
  if hasattr(pl, key):
    print(key +  ": " + str(getattr(pl, key)()))
architecture: ('64bit', 'WindowsPE')
mac_ver: ('', ('', '', ''), '')
machine: AMD64
node: LAPTOP-SOUD7UOF
platform: Windows-10-10.0.19044-SP0
processor: Intel64 Family 6 Model 122 Stepping 1, GenuineIntel
python_build: ('default', 'Sep 16 2021 16:59:28')
python_compiler: MSC v.1916 64 bit (AMD64)
python_version: 3.9.7
release: 10
system: Windows
uname: uname_result(system='Windows', node='LAPTOP-SOUD7UOF', release='10', version='10.0.19044', machine='AMD64')
version: 10.0.19044
#11-to check the sum of three elements (each from an array) from three arrays 
#is equal to a target value. Print all those three-element combinations
###########Need to be go through over and over again##################

import itertools
from functools import partial
X = [10, 20, 20, 20]
Y = [10, 20, 30, 40]
Z = [10, 30, 40, 20]
T = 70

def check_sum_array(N, *nums):
    if sum(x for x in nums) == N:
        return (True, nums)
    else:
        return (False, nums)

pro = itertools.product(X,Y,Z)
func = partial(check_sum_array, T)
sums = list(itertools.starmap(func, pro))
print("sums=",sums)

result = set()
for s in sums:
    if s[0] == True and s[1] not in result:
        result.add(s[1])
        print(result)
sums= [(False, (10, 10, 10)), (False, (10, 10, 30)), (False, (10, 10, 40)), (False, (10, 10, 20)), (False, (10, 20, 10)), (False, (10, 20, 30)), (True, (10, 20, 40)), (False, (10, 20, 20)), (False, (10, 30, 10)), (True, (10, 30, 30)), (False, (10, 30, 40)), (False, (10, 30, 20)), (False, (10, 40, 10)), (False, (10, 40, 30)), (False, (10, 40, 40)), (True, (10, 40, 20)), (False, (20, 10, 10)), (False, (20, 10, 30)), (True, (20, 10, 40)), (False, (20, 10, 20)), (False, (20, 20, 10)), (True, (20, 20, 30)), (False, (20, 20, 40)), (False, (20, 20, 20)), (False, (20, 30, 10)), (False, (20, 30, 30)), (False, (20, 30, 40)), (True, (20, 30, 20)), (True, (20, 40, 10)), (False, (20, 40, 30)), (False, (20, 40, 40)), (False, (20, 40, 20)), (False, (20, 10, 10)), (False, (20, 10, 30)), (True, (20, 10, 40)), (False, (20, 10, 20)), (False, (20, 20, 10)), (True, (20, 20, 30)), (False, (20, 20, 40)), (False, (20, 20, 20)), (False, (20, 30, 10)), (False, (20, 30, 30)), (False, (20, 30, 40)), (True, (20, 30, 20)), (True, (20, 40, 10)), (False, (20, 40, 30)), (False, (20, 40, 40)), (False, (20, 40, 20)), (False, (20, 10, 10)), (False, (20, 10, 30)), (True, (20, 10, 40)), (False, (20, 10, 20)), (False, (20, 20, 10)), (True, (20, 20, 30)), (False, (20, 20, 40)), (False, (20, 20, 20)), (False, (20, 30, 10)), (False, (20, 30, 30)), (False, (20, 30, 40)), (True, (20, 30, 20)), (True, (20, 40, 10)), (False, (20, 40, 30)), (False, (20, 40, 40)), (False, (20, 40, 20))]
{(10, 20, 40)}
{(10, 30, 30), (10, 20, 40)}
{(10, 30, 30), (10, 20, 40), (10, 40, 20)}
{(10, 30, 30), (20, 10, 40), (10, 20, 40), (10, 40, 20)}
{(10, 20, 40), (20, 20, 30), (20, 10, 40), (10, 40, 20), (10, 30, 30)}
{(10, 20, 40), (20, 20, 30), (20, 10, 40), (10, 40, 20), (20, 30, 20), (10, 30, 30)}
{(10, 20, 40), (20, 40, 10), (20, 20, 30), (20, 10, 40), (10, 40, 20), (20, 30, 20), (10, 30, 30)}
#12 create all possible permutations from a given collection of distinct numbers
#solution-1:2 for loops and create new list if lst[i]<>lst[begin_index]==>might not give all permutations
#itertools.permutations

import itertools
def distCombo(lst):    
    result_perm=[[]]
    for n in lst:
        new_perm=[]
        for perm in result_perm:
            for i in range(len(lst)+1):
                new_perm.append(perm[:i]+[n]+perm[i:])
                result_perm=new_perm
    return result_perm

list1=[2,3,4]
print("Original Cofllection: ",list1)
print("Collection of distinct numbers:\n",distCombo(list1))     
Original Cofllection:  [2, 3, 4]
Collection of distinct numbers:
 [[4, 3, 2], [3, 4, 2], [3, 2, 4], [3, 2, 4], [4, 2, 3], [2, 4, 3], [2, 3, 4], [2, 3, 4], [4, 2, 3], [2, 4, 3], [2, 3, 4], [2, 3, 4], [4, 2, 3], [2, 4, 3], [2, 3, 4], [2, 3, 4], [4, 3, 2], [3, 4, 2], [3, 2, 4], [3, 2, 4], [4, 2, 3], [2, 4, 3], [2, 3, 4], [2, 3, 4], [4, 2, 3], [2, 4, 3], [2, 3, 4], [2, 3, 4], [4, 2, 3], [2, 4, 3], [2, 3, 4], [2, 3, 4], [4, 3, 2], [3, 4, 2], [3, 2, 4], [3, 2, 4], [4, 2, 3], [2, 4, 3], [2, 3, 4], [2, 3, 4], [4, 2, 3], [2, 4, 3], [2, 3, 4], [2, 3, 4], [4, 2, 3], [2, 4, 3], [2, 3, 4], [2, 3, 4], [4, 3, 2], [3, 4, 2], [3, 2, 4], [3, 2, 4], [4, 2, 3], [2, 4, 3], [2, 3, 4], [2, 3, 4], [4, 2, 3], [2, 4, 3], [2, 3, 4], [2, 3, 4], [4, 2, 3], [2, 4, 3], [2, 3, 4], [2, 3, 4]]
#13--for loop through dictionary
#get all possible two digit letter combinations from a digit
def letter_combo(digits):
    if digits=="":
        return []
    string_maps={    #disctionary{key:values}
        "1": "abc",
        "2": "def",
        "3": "ghi",
        "4": "jkl",
        "5": "mno",
        "6": "pqrs",
        "7": "tuv",
        "8": "wxy",
        "9": "z"
    }
    result=['']#cause we want to return chars
    for num in digits:
        temp=[]
        for an in result:
            for char in string_maps[num]:#Print all values in the dictionary
                temp.append(an+char)
                result=temp
    return temp
digit_str="47"
print(letter_combo(digit_str))       
['jt', 'ju', 'jv', 'kt', 'ku', 'kv', 'lt', 'lu', 'lv']
#14-add two positive integers without using the '+' operator
def add_without_plus_operator(a,b):
    while b!=0:
        data=a&b
        a=a^b
        b=data<<1
    return a
print(add_without_plus_operator(2, 10))
print(add_without_plus_operator(-20, 10))
print(add_without_plus_operator(-10, -20))
    
12
-10
-30
#15-check the priority of the four operators
#need to dig more did not understand meaning of _____xyz____

__operators__ = "+-/*"
__parenthesis__ = "()"
__priority__ = {
    '+': 0,
    '-': 0,
    '*': 1,
    '/': 1,
}

def test_higher_priority(operator1, operator2):
    return __priority__[operator1] >= __priority__[operator2]
print(test_higher_priority('*','-'))
print(test_higher_priority('+','/'))
True
False
#16
import math
def pythagor(a,b):
    sqr_c=a*a+b*b
    c=math.sqrt(sqr_c)
    return c

print(pythagor(3,4))
5.0
#17 get all strobogrammatic numbers that are of length n
#strobogrammatic numbers are : 0,1,6,8,9-180 degree filp mirrors themselve

def gen_strobogrammatic(n):
    result=helper(n,n)
    return result

def helper(n,length):
    if n==0:
        return [""]###these are middle numbers
    if n==1:
        return ["1","0","8"]###these are middle numbers we cannot have 6 and 9 cause they change the number after flipping
    middles=helper(n-2,length)
    result=[]
    for middle in middles:
        if n!=length:
            result.append("0"+middle+"0")
        result.append("8"+middle+"8")
        result.append("1"+middle+"1")
        result.append("9"+middle+"6")
        result.append("6"+middle+"9")
    return result

print("n = 2: \n",gen_strobogrammatic(2))
print("n = 3: \n",gen_strobogrammatic(3))
print("n = 4: \n",gen_strobogrammatic(4))
n = 2: 
 ['88', '11', '96', '69']
n = 3: 
 ['818', '111', '916', '619', '808', '101', '906', '609', '888', '181', '986', '689']
n = 4: 
 ['8008', '1001', '9006', '6009', '8888', '1881', '9886', '6889', '8118', '1111', '9116', '6119', '8968', '1961', '9966', '6969', '8698', '1691', '9696', '6699']
#18 
def cal_med(a,b,c):
    if a<b and b<c:
        return b
    elif b<a and a<c:
        return a
    else:
        return c
    
print(cal_med(2,4,2))
2
#19 
#20
def factorial(n):
    num = 1
    while n >= 1:
        num = num * n
        n = n - 1
    return num

f= factorial(5)
print(f)
 
 
#20 find the number of zeros at the end of a factorial of a given positive number.
#solution-1: divide by 10 and get reminder and count 0s 
#solution-2: convert to string and count ascii values of 0s from rear end

def factorial(n):
    result = 1
    while n >= 1:
        result = result * n
        n = n - 1
    return result

#print(factorial(5))

def countZeros(num):
    result_rem=0
    count=0    
    while result_rem==0:           
        result_rem=num%10  
       # print("result_rem=",result_rem)
        if result_rem==0:
            count+=1
       # print("count=",count)
        num=num/10
    return count

num=factorial(10)
print(countZeros(num))
2
#21-find the number of currency notes (Sample of notes: 1, 10, 20, 50, 100, 200 and 500 ) against a given amount

def numOfNotes(amt):
    note_lst=[10, 20, 50, 100, 200, 500]
    result_note_lst=[]
    num_notes=0
    for i in reversed(note_lst):
        #q=note_list[i]        
        num_notes+=int(amt/i)
        amt_rem=int(amt/i)
        amt=int(amt%i)
        
        print("amount=",amt)
        print("rem-amount=",amt_rem)
        if amt_rem>0:
            result_note_lst.append(i)
            
           # print("i=",i)
           # if amt>i:
            #    amt=amt-i
            #    print("amount=",amt)
             #   result_note_lst.append(i)
              #  print("result_note_lst=",result_note_lst)
    return result_note_lst,num_notes

print(numOfNotes(1610))
amount= 110
rem-amount= 3
amount= 110
rem-amount= 0
amount= 10
rem-amount= 1
amount= 10
rem-amount= 0
amount= 10
rem-amount= 0
amount= 0
rem-amount= 1
([500, 100, 10], 5)
#22-irst four members of the sequence are equal to one, and each successive 
#term of the sequence is equal to the sum of the four previous ones. Find the 
#Nth member of the sequenceirst four members of the sequence are equal to one, 
#and each successive term of the sequence is equal to the sum of the four 
#previous ones. Find the Nth member of the sequence

def seqGen(n):
    lst_seq=[]
    #for i in range(n):
    #   while i<4:
    #      i=1
    #     i=4*i-6
    #return lst_seq
    
    if n==1 or n==2 or n==3 or n==4:
        return 1
    return seqGen(n-1)+seqGen(n-2)+seqGen(n-3)+seqGen(n-4)

print(seqGen(5))
4
#23- accept a positive number and subtract from this number the sum of its digits 
#and so on. Continues this operation until the number is positive.

def sum_dig(n):
    sums=0
        
    while n!=0:        
        sums+=n%10
        n=n//10   #int division
    return sums
#print(sum_dig(1236))

def sub_sum(n):
    lst_num=[]
    result=sum_dig(n)
    #return n-result
    
    #if n<0:
    #    return lst_num
    
    while n>0:
        n-=result
        lst_num.append(n)
        #print(lst_num)
    return lst_num
    
print(sub_sum(1234))
[1224, 1214, 1204, 1194, 1184, 1174, 1164, 1154, 1144, 1134, 1124, 1114, 1104, 1094, 1084, 1074, 1064, 1054, 1044, 1034, 1024, 1014, 1004, 994, 984, 974, 964, 954, 944, 934, 924, 914, 904, 894, 884, 874, 864, 854, 844, 834, 824, 814, 804, 794, 784, 774, 764, 754, 744, 734, 724, 714, 704, 694, 684, 674, 664, 654, 644, 634, 624, 614, 604, 594, 584, 574, 564, 554, 544, 534, 524, 514, 504, 494, 484, 474, 464, 454, 444, 434, 424, 414, 404, 394, 384, 374, 364, 354, 344, 334, 324, 314, 304, 294, 284, 274, 264, 254, 244, 234, 224, 214, 204, 194, 184, 174, 164, 154, 144, 134, 124, 114, 104, 94, 84, 74, 64, 54, 44, 34, 24, 14, 4, -6]
#24-number of divisors of a given integer is even or odd
#solution-1:find divisors-linear way(divided by2), count them, see if counnt is even or odd
#solution-2:find divisors-sqrt way, count them, see if counnt is even or odd

#questions could be-1. should I consider distinct divisors or all of them
#questions could be-2. does 1 and number itself should beincluded or not
#questions could be-3. is it about prime divisors or all the divisors

import math 

def find_divisor(n):
    lst_div=[]
    i=1
    while i<=n/2:
        if n%i==0:
            lst_div.append(i) 
            #print(i)
        i=i+1
       # print(i)
    count_div=len(lst_div)
    
    if count_div%2==0:
        print("number of divisore are even")
    else:
        print("number of divisore are odd")
   # return lst_div,len(lst_div)



find_divisor(121)
number of divisore are even
#solution-2:find divisors-sqrt way, count them, see if counnt is even or odd
import math
def find_divisors(n):
        lst_div=[]
        i=1
        
        while i<=math.sqrt(n):
            if n%i==0:
                lst_div.append(i)
                lst_div.append(int(n/i))
            i=i+1
            
        return lst_div
    
print(find_divisors(100))            
        
[1, 100, 2, 50, 4, 25, 5, 20, 10, 10]
#25-program to find the digits which are absent in a given mobile number

#q1-is it sequence of numbers or contain special chars *, (+1) and -
#q2-is it of fixed lenght or varies eg. emergency numbers 100 0r 999 or regulars like 9708899522

#solutions1- isdigit method
#solutions2- trace number digit by digit. Store these digits in set. 
#            compare this set with standard 10 digit set and see whats missing

def miss_num(ph_num):
    std_set={'0','1','2','3','4','5','6','7','8','9'}
    ph_num_digit_set=set()
    
    for i in str(ph_num):
       # print(i)
        ph_num_digit_set.add(i)
    
    print(ph_num_digit_set)
    
    for i in std_set:
        if i not in ph_num_digit_set:
            print(i," ")
    
    #return ph_num_digit_set    

miss_num(9708899522)
{'7', '2', '5', '9', '0', '8'}
4  
3  
1  
6  
#26-Python program to compute the summation of the absolute difference 
#  of all distinct pairs in a given array (non-decreasing order).

#q1-does array include duplicates?

#s1-get list of cartetian product and convert to set
#s2-trace array convert to set. get all the pair by using 2 for loops

#s1-get list of cartetian product and convert to set

#issue-could not figure out how to add these numbers in tuple

import itertools
def dist_pair_sum(lst_num):
    lst_result=[]
    set_result=set()
    for members in itertools.product(lst_num,repeat=2):
        lst_result.append(members)
      #  print(type(members))
    print(lst_result)
   # set_result=lst_result
   # print(set_result)
    
dist_pair_sum(['1','2','3'])
[('1', '1'), ('1', '2'), ('1', '3'), ('2', '1'), ('2', '2'), ('2', '3'), ('3', '1'), ('3', '2'), ('3', '3')]
#26-Python program to compute the summation of the absolute difference 
#  of all distinct pairs in a given array (non-decreasing order).

#observation-https://www.geeksforgeeks.org/sum-absolute-differences-pairs-given-array/

def sum_dist_pair(arr,n):
    result=0
    #sum = 0
    for i in range(n - 1, -1, -1):
        result += i*arr[i] - (n-1-i) * arr[i]
        print("i=",i)
        print("arr[i]=",arr[i])
        print("n=",n)
        print("result=",result)
    return result

arr=[1,2,3]
n=len(arr)
print(sum_dist_pair(arr,n))
i= 2
arr[i]= 8
n= 3
result= 16
i= 1
arr[i]= 4
n= 3
result= 16
i= 0
arr[i]= 4
n= 3
result= 8
8
#27-Write a Python program to find the type of the progression 
#(arithmetic progression/geometric progression) and the next successive member of a 
#given three successive members of a sequence.

#Q1-is oth position certain number or can I have my own?
#Q2-are these series always positive numbers?
#Q3-How many numbers we have in series

#s1-check for difference in first 3 numbers and common divisors for the same. Whichever condition is true go for it
def apgpDetection(num_lst):
    diff=0
    div=0
    ap_lst=[]
    gp_lst=[]
    for i in range (len(num_lst)-1):
        diff=num_lst[i+1]-num_lst[i]
        ap_lst.append(diff)
        
        div=num_lst[i+1]/num_lst[i]
        gp_lst.append(div)
        
    if len(set(ap_lst))==1:
        print("it is a Aritmetic Progression")
    elif len(set(gp_lst))==1:
        print("it is a Geometric Progression")
    else:
        print("It is neither AP nor GP")
    
    
apgpDetection([2,4,6,8,9])
It is neither AP nor GP
#27 s2-calculate ratio and difference and check in for loop if that matches with every member of list
def is_geometric(li):
    if len(li) <= 1:
        return True
         
    # Calculate ratio
    ratio = li[1]/float(li[0])
     
    # Check the ratio of the remaining
    for i in range(1, len(li)):
        if li[i]/float(li[i-1]) != ratio:
            return False
    return True
 
print(is_geometric([2, 6, 18, 54]))
True
#28-Write a Python program to print the length of the series and the series from the
#given 3rd term, 3rd last term and the sum of a series

#q1: is it AP/GP or HP or any other kind of series
#q2:are the numbers always positive?
#q3:is it incremental or decremental series

#assumption:its incremental AP series
#s1-AP=a+(n-1)*d

def nthNumSearch(third_num,third_last_num,sum_ser,len_ser):
    
   # nth term of an AP=a+(n-1)*d
   #sum_of_AP=0.5 n (first term + last term) = 0.5 n [ 2a + (n-1) d ]
    
   ### Calculate these numbers in terms of d and a####

    third_num=a+2*d                 #third_num=a+(3-1)*d
    third_last_num=a+(len_ser-3)*d  #third_last_num=a+(n-3)*d
    
   # third_num+third_last_num=a+2*d+a+(len_ser-3)*d
   # third_num+third_last_num=2*a+2*d+len_ser*d-3*d
    
    third_num+third_last_num=2*a-d+len_ser*d
    
   # sum_of_AP=0.5*len_ser*(2*a+(len_ser-1)*d)
   # sum_of_AP=0.5*len_ser*(2*a+len_ser*d-d)
    sum_of_AP=1*len_ser*a+0.5*d*(len_ser**2)-0.5*len_ser*d
    
    #AP series
    AP=0
    for n in range(len_ser):
        AP=a+(n-1)*d
        print(AP+" ")  
    
  File "C:\Users\przir\AppData\Local\Temp/ipykernel_3160/625379201.py", line 22
    third_num+third_last_num=2*a-d+len_ser*d
    ^
SyntaxError: cannot assign to operator
#29-find common divisors between two numbers in a given pair
#q1-are these positives?

#s1-sqrt method to find divisors. add them to set. compare sets
#s2-half the number method to find divisors. add them to set. compare sets
#s3-plain for loop method to find divisors. add them to set. compare sets
#s4-for loop with comparing common divisors 

import math
def find_div(n1,n2):
    set_n1=set()
    set_n2=set()
    i=1
    while i<=math.sqrt(n1):
        if n1%i==0:
            set_n1.add(i)
            set_n1.add(n1/i)             
            print(i,n1/i,math.sqrt(n1))          
       
        i=i+1
        
    i=1        
    while i< math.sqrt(n2):
        if n2%i==0:
            set_n2.add(i)
            set_n2.add(n2/i)       
        
        i=i+1
            
    print(set_n1)
    print(set_n2)
    print(set_n1 and set_n2)
        
find_div(20,5)   
1 20.0 4.47213595499958
2 10.0 4.47213595499958
4 5.0 4.47213595499958
{1, 2, 4, 5.0, 10.0, 20.0}
{1, 5.0}
{1, 5.0}
#s4-for loop with comparing common divisors 
def find_div(n1,n2):
    for i in range(1,min(n1,n2)+1):
        if n1%i==n2%i==0:
            print(i)

find_div(4,8)
1
2
4
#30-to reverse the digits of a given number and add it to the original, If the sum is not a palindrome repeat this procedure

#q1-is there upper limit to this procedure? otherwise it would be infinite 
#q2-what are the odds to get palindrome each time?

#Logic-reverse proceduere-divide by 10 and get remainder. then multiply by length times 10 store it. 
#add to the new_num_reversed. repeat procedure until remainder 0
#palindrom check-check new_num_reversed=old number

#s1-use numbers as number
#s2-use numbers as string. reverse it with array and compare

def rev_num(n):
    num_len=len(str(n))
    new_rev=0
    num=n
    for i in range(num_len):
        new_rev+=(n%10)*10**(num_len-i-1)
        n=int(n/10)
        #print(n,num_len)
    
    if new_rev==num:
        print("it is palindrome",num, " ", new_rev)
    else:
        print("Nope its not a palindrome",num," ", new_rev)
    #return new_rev
        

rev_num(105)
Nope its not a palindrome 105   501
#31-count the number of carry operations for each of a set of addition problems

#Logic-addition from right to left. if leftmost digits in 2 numbers have sum>10 then carry_count+=1
#to go from right to left we have to divide numbers by 10*distance from rightmost digit and consider their respective reminders

#q1-how many numbers are we adding?
#q2-are they all positive numbers?

#s1: usual while/for loop

def carry_count(n1,n2):
    car_fwd=0
    car_cnt=0
    max_n=max(len(str(n1)),len(str(n2)))
    #print(max_n)
    
    while max_n>=0:
        dig1=n1%10
        dig2=n2%10
        
        n1=int(n1/10)
        n2=int(n2/10)
        
        sum_dig=dig1+dig2+car_fwd
        if sum_dig>9:
            car_cnt+=1
            car_fwd+=1
            
        max_n-=1
        
    return car_cnt

print(carry_count(999,9))
3
#32-python program to find heights of the top three building in descending order from eight given building

#s1-create list of heights of buildings. sort descending order. print top three
#s2-create 3 var-max1,max2, max3. trace single for loop for finding them. if tallest-max1 taller-max2 and tall max3 keep pushing to up 
#down as per size while tracing for loop

#q1-are those 8 heights comes in list or any other datatype?

def tall_build(buil_lst):
    height_order_lst=[]
    tallest=buil_lst[0]
    taller=0
    tall=0
    
    for i in range(len(buil_lst)):
        if buil_lst[i]>tallest:
            taller=tallest
            tallest=buil_lst[i]
            
        elif buil_lst[i]<tallest and buil_lst[i]>taller:
            tall=taller
            taller=buil_lst[i]
            
        elif buil_lst[i]<taller and buil_lst[i]>tall:
            tall=buil_lst[i]
            
    print(tallest," ",taller," ",tall)
            
    
tall_build([25,35,55,16,30,45,37,39])
55   45   39
#33-Python program to compute the digit number of sum of two given integers

#input 5,7 sum=12, number of digits of sum=2

#q1-how many numbers would be the input
#q2-is there upper and lower limits to the input

#logic-add given integers. use len function to measure length

def sum_dig(n1,n2):
    sum_num=n1+n2
    
    print(len(str(sum_num)))
    
sum_dig(5,117)
3
#34-Python program to check whether three given lengths (integers) of three sides form a right triangle

#logic-use pythogorus theorem

def right_angle_check(a,b,c):
    max_side=max(a,b,c)
    min_side=min(a,b,c)
    mid_side=a+b+c-(max_side+min_side)
    
    if max_side**2==min_side**2+mid_side**2:
        return True
    else:
        return False
    
right_angle_check(3,4,6)
False
#35 Write a Python program which solve the equation: Print the values of x, y where a, b, c, d, e and f are given.
#ax+by=c and dx+ey=f

#s1-rewrite the equation in terms of x and y. i.e. x= and y=
#s2-lambda or map functions?
#s3-(ae-bd)=n rule  x = (c*e - b*f) / n and y = (a*f - c*d) / n

def eqn_solver(a,b,c,d,e,f):
    
    y=(c-f)/(b/a-e/d)
    
    x=c-b*y/a
    #x=f-e*y/d
    
    #c-b*y/a=f-e*y/d
    #c-f=b*y/a-e*y/d
    #(c-f)=(b/a-e/d)*y
    #(c-f)/(b/a-e/d)=y
    #y=(c-f)/(b/a-e/d)
    return x,y

print(eqn_solver(5,8,6,7,9,4))
(-4.181818181818183, 6.363636363636364)
#36-compute the amount of the debt in n months.
#s1-use prncipal debt formula

def round_n(n):
    if n%1000:
        return (1+n//1000)*1000
    else:
        return n
     
def compute_debt(n):
    if n==0: return 100000
    return int(round_n(compute_debt(n-1)*1.05))  ###1.05 ==>interest rate =5%

print("Input number of months:")
result = compute_debt(int(input()))
print("Amount of debt: ","$"+str(result).strip())
    
    
Input number of months:
5
Amount of debt:  $130000
#37-eads an integer n and find the number of combinations of a,b,c and d
#(0 <= a,b,c,d <= 9) where (a + b + c + d) = n.

#q1-can we repeat number
#q2-can we take any number of combinations? including 1 or 2 or 3 numbers
#q3-can we repepat same set of numbers with different orders
#bruteforce method-

#s1-bruteforce method-for loop with combinations
#s2-itertools.combinations with if condition

#s1-bruteforce method-for loop with combinations
import itertools
print("print numbers :")
n=int(input())
result=0
for (i,j,k) in itertools.product(range(10),range(10),range(10)):
    result+=(0<=n-(i+j+k)<=9)
print("number of combinations: ",result)
print numbers :
15
number of combinations:  592
#s2-itertools.combinations with if condition
class Solution:
    def fourSum(self,nums,target):
        from itertools import combinations
        res=set()
        
        for i in combinations(nums,4):
            if sum(i)==target:
                res.add(" ".join(sorted(list([str(x) for x in i]))))
                #res.add(sorted(list([str(x) for x in i])))
        #return list([[int(z) for z in x.split()]for x in res])
        return list([[int(z) for z in x.split()]for x in res])
    
res = Solution().fourSum([-5,5,4,-3,0,0,4,-2],4)
print(res)
#print(time.time() - start)
    
[[-2, -3, 4, 5], [-5, 0, 4, 5]]
#38-print the number of prime numbers which are less than or equal to a given integer. 

#q1-just number of prime numbers or actual prime numbers
#s1-brute force-for loop until given number to find prime numbers and count them
#s2-find the factors for each numbers and if those are only 1 and itself add to prime numbers list

import math

def findPrime(num):
    prime_lst=[]
    cnt=0
    for i in range(2,num):
        if findDiv(i)==False:
            #print(findDiv(i))
            prime_lst.append(i)
            cnt+=1
    print(prime_lst,cnt)
            
def findDiv(n):
    i=2
    while i<=int(math.sqrt(n)):
        if n%i==0:                          
            return True
        i+=1
    return False        
        
findPrime(35)
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31] 11
#39-Write a program to compute the radius and the central coordinate (x, y) of a circle which is 
#constructed by three given points on the plane surface.

#input given-3 coordinates of the circle
#output-radius of the circle, center of the circle

from math import sqrt
def findCircle(x1,y1,x2,y2,x3,y3):
    x12=x1-x2
    x13=x1-x3
    
    y12=y1-y2
    y13=y1-y3
    
    y31=y3-y1
    y21=y2-y1
    
    x31=x3-x1
    x21=x2-x1
    
    #x1^2-x3^2
    sx13=pow(x1,2)-pow(x3,2)
    
    #y1^2-y3^2
    sy13=pow(y1,2)-pow(y3,2)
    
    sx21=pow(x2,2)-pow(x1,2)
    sy21=pow(y2,2)-pow(y1,2)
    
    f=(((sx13) * (x12) + (sy13) *(x12) + (sx21) * (x13) +(sy21) * (x13)) // (2 *((y31) * (x12) - (y21) * (x13))))
       
    g=(((sx13) * (y12) + (sy13) * (y12) +(sx21) * (y13) + (sy21) * (y13)) //(2 * ((x31) * (y12) - (x21) * (y13))))
    
    c = (-pow(x1, 2) - pow(y1, 2) -2 * g * x1 - 2 * f * y1)
    
    h=-g
    k=-f
    sqr_of_r=h*h+k*k-c
    
    r=round(sqrt(sqr_of_r),5)
    
    print("Centre = (", h, ", ", k, ")")
    print("Radius = ", r)
    
if __name__=="__main__":
    x1=1
    y1=1
    x2=2
    y2=4
    x3=5
    y3=3
    
    findCircle(x1,y1,x2,y2,x3,y3)
    
Centre = ( 3 ,  2 )
Radius =  2.23607
#40- program to check whether a point (x,y) is in a triangle or not

#logic-1-Half plane formula-works for 2D planes
print("input x1,y1,x2,y2,x3,y3,xp,yp")
x1,y1,x2,y2,x3,y3,xp,yp=map(float,input().split())

c1=(x2-x1)*(yp-y1)-(y2-y1)*(xp-x1)
c2=(x3-x2)*(yp-y2)-(y3-y2)*(xp-x2)
c3=(x1-x3)*(yp-y3)-(y1-y3)*(xp-x3)

if(c1<0 and c2<0 and c3<0) or (c1>0 and c2>0 and c3>0):
    print("Point is inside the triangle")
else:
    print("point is outside triangle")
input x1,y1,x2,y2,x3,y3,xp,yp
2 3 4 5 6 8 7 1
point is outside triangle
#40- program to check whether a point (x,y) is in a triangle or not
#logic-2 -Calculate areas of triangle and subtriangles that includes point(x,y) and compare them

def areaOfTriangle(x1,y1,x2,y2,x3,y3):
    return abs((x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))/2)

def isInside(x1,y1,x2,y2,x3,y3,x,y):
    A=areaOfTriangle(x1,y1,x2,y2,x3,y3)
    
    A1=areaOfTriangle(x,y,x2,y2,x3,y3)
    
    A2=areaOfTriangle(x1,y1,x,y,x3,y3)
    
    A3=areaOfTriangle(x1,y1,x2,y2,x,y)
    
    if(A==A1+A2+A3):
        print("Point is inside the triangle")
    else:
        print("Point is not inside the triangle")
        
isInside(0, 0, 20, 0, 10, 30, 10, 15)
Point is inside the triangle
#41-Python program to compute and print sum of two given integers (more than or equal to zero). 
#If given integers or the sum have more than 80 digits, print "overflow".

#logic-calculate sum. convert sum to string and measure length to see if it is >80 or <80
def sumDigitCheck(n1,n2):
    sum_of_int=n1+n2
    
    if len(str(sum_of_int))>=80:
        print("Overflow")
    else:
        print("sum of numbers=",sum_of_int)
        
sumDigitCheck(40,100)
sum of numbers= 140
print("Input first integer:")
x = int(input())
print("Input second integer:")
y = int(input())
if x >= 10 ** 80 or y >= 10 ** 80 or x + y >= 10 ** 80:
    print("Overflow!")
else:
    print("Sum of the two integers: ",x + y)
Input first integer:
10
Input second integer:
30
Sum of the two integers:  40
#42-accepts six numbers as input and sorts them in descending order
#logic1-Accept six numbers add them to list or set and sort them
#logic2-use sorting algorithm
#logic3-use if else

#logic2-use sorting algorithm
#q1-what are different types of sorting algos
#q2-which is most efficient sorting algo(Bubble, insertion,selection,merge and shell)
#q3-what are other methods to sort numbers

#s1-Bubble Sort
def bubble_sort(num_list):
    for idx_i in range(len(num_list)-1,0,-1):
        for idx_j in range(idx_i):
            if num_list[idx_j]>num_list[idx_j+1]:
                temp=num_list[idx_j]
                num_list[idx_j]=num_list[idx_j+1]
                num_list[idx_j+1]=temp
                #print(num_list_inp)
                
num_list_inp=[19,2,31,45,6,11,121,27]
bubble_sort(num_list_inp)
print(num_list_inp)
        
[2, 6, 11, 19, 27, 31, 45, 121]
#43-Python program to test whether two lines PQ and RS are parallel
#input-he four points are P(x1, y1), Q(x2, y2), R(x3, y3), S(x4, y4)

#logic-see if distance(PR)==distance(QS) if true then parallel otherwise not
#distance formula -->√[(x₂ - x₁)² + (y₂ - y₁)²]

import math
def prl_lin(x1,y1,x2,y2,x3,y3,x4,y4):
    
    dist_PR=math.sqrt((x3-x1)**2+(y3-y1)**2)
    dist_QS=math.sqrt((x4-x2)**2+(y4-y2)**2)
    
    if dist_PR==dist_QS:
        print("Lines are parallel")
    else:
        print("Lines are not parallel")
        
prl_lin(2,5,6,4,8,3,9,7)
Lines are not parallel
print("Input x1,y1,x2,y2,x3,y3,xp,yp:")
x1, y1,x2, y2, x3, y3, x4, y4 = map(float, input().split())
print('PQ and RS are parallel.' if abs((x2 - x1)*(y4 - y3) - (x4 - x3)*(y2 - y1)) < 1e-10 else 'PQ and RS are not parallel')
Input x1,y1,x2,y2,x3,y3,xp,yp:
2 5 6 4 8 3 9 7
PQ and RS are not parallel
#44-program to find the maximum sum of a contiguous subsequence from a given sequence of numbers a1, a2, a3, ... an. 
#A subsequence of one element is also a continuous subsequence

#q1-is size of sub array defined or not

#Translation - if we have given 10 random numbers. input n=3 then we have to find 3 contiguous numbers having maximum sum
#logic1-brut force -2 for loops. 1 to trace all numbers and other to trace batch of contiguous numbers

def max_sum_seq(num_list,seq_len):
    cur_sum=0
    max_sum=0
    for i in range(len(num_list)-seq_len+1):
        cur_sum=0
        for j in range(i,len(num_list)):
            cur_sum+=num_list[j]
            if j==seq_len+i-1:
                if cur_sum>=max_sum:
                    max_sum=cur_sum
                    print(i,j,cur_sum,max_sum)
                break
            #print(i,j,cur_sum,max_sum)
        
    print(max_sum)    
    
max_sum_seq([2,5,6,4,35,8,3,9,7,98],3)         
            
0 2 13 13
1 3 15 15
2 4 45 45
3 5 47 47
7 9 114 114
114
#45-two circles C1 with radius r1, central coordinate (x1, y1) and C2 with radius r2 and central coordinate (x2, y2)
#"C2 is in C1" if C2 is in C1
#"C1 is in C2" if C1 is in C2
#"Circumference of C1 and C2 intersect" if circumference of C1 and C2 intersect
#"C1 and C2 do not overlap" if C1 and C2 do not overlap and
#"Circumference of C1 and C2 will touch" if C1 and C2 touch

#logic-aplly distance formula on centers of two circles. Compare it with the radius of bigger circle

import math
def circle(x1,y1,r1,x2,y2,r2):
    dist_cen=math.sqrt((x2-x1)**2+(y2-y1)**2)
    
    if dist_cen+r1==r2:
        print("The smaller circle lies completely"
            " inside the bigger circle with "
            "touching each other "
            "at a point of circumference. ")
    elif dist_cen+r1<r2:
        print("The smaller circle lies completely"
            " inside the bigger circle without"
            " touching each other "
            "at a point of circumference. ")
    else:        
        print("The smaller does not lies inside"
            " the bigger circle completely.")
        
x1,y1=10,8
x2,y2=1,2
r1,r2=30,10
circle(x1,y1,r1,x2,y2,r2)
The smaller does not lies inside the bigger circle completely.
#46-Python program to that reads a date (from 2016/1/1 to 2016/12/31) and prints the day of the date. Jan. 1, 2016, is Friday
from datetime import date
print("input month and day separated by space")
m,d=map(int,input().split())
weeks={1:'Monday',2:'Tuesday',3:'Wednesday',4:'Thursday',5:'Friday',6:'Saturday',7:'Sunday'}
w=date.isoweekday(date(2016,m,d))
print("Name of the date: ",weeks[w])
input month and day separated by space
5 15
Name of the date:  Sunday
#47- Write a Python program which reads a text (only alphabetical characters and spaces.) 
#and prints two words. The first one is the word which is arise most frequently in the text. 
#The second one is the word which has the maximum number of letters

#word which is arise most frequently in the text-count words separated by space. find that occurs maximum times
#word which has the maximum number of letters-count the length of word and find that is longest in length

#q1-what if there are multiple words occurs max time or longest lenth 
#q2-does dash between two words count as single word or 2 different words

#method-1:using 2 for loops
#method-2:using counter iterator
#method-3:using dictionary

def count_Words(texts):
    #treat text as string. separate words by space and store them to list
    lst_text=[]
    count=1
    max_len=0
    max_count=0
    
    lst_text=texts.split()
    
    #len_words
    for i in lst_text:
        for j in i:
            len_word=len(i)
        if max_len<len_word:
            max_len=len_word
            max_len_word=i
        #print(len_word,max_len)  
        
    print(lst_text,max_len,i)  
    
    #max_occur_word
    for i in lst_text:
        count=0
        for j in lst_text:
            if i==j:
                count+=1
                #print(i,count)
        if count>max_count:
            max_count=count
            max_count_word=i
    
    #print("Longest word in the text is {max_len} and the length of the word is {i}".format(str(max_len),i))
    print(max_count_word,max_count)

texts="Thank you for your comment and your participation"
count_Words(texts)
['Thank', 'you', 'for', 'your', 'comment', 'and', 'your', 'participation'] 13 participation
your 2
#method-3 using dictionary
from collections import defaultdict

test_list=["gfg is best for geeks", "geeks love gfg", "gfg is best"]
print("original list is ",test_list)

temp=defaultdict(int) #dictionary declaration with key integer

for sub in test_list:
    for wrd in sub.split():
        temp[wrd]+=1
        
res=max(temp,key=temp.get)

print("Word with maximum frequency : " + str(res))
original list is  ['gfg is best for geeks', 'geeks love gfg', 'gfg is best']
Word with maximum frequency : gfg
#48-Write a Python program that reads n digits (given) chosen from 0 to 9 
#and prints the number of combinations where the sum of the digits equals to another given number (s). 
#Do not use the same digits in a combination.

import itertools
print("Input number of combinations and sum, input 0 0 to exit:")
while True:
  x, y = map(int, input(). split())
  if x == 0 and y == 0:
    break
  s = list(itertools.combinations(range(10), x))
  ctr = 0
  for i in s:
    if sum(i) == y:
            ctr += 1
 
print(ctr)
Input number of combinations and sum, input 0 0 to exit:
5 6 
0 0
0
#49-Write a Python program which reads the two adjoined sides and the diagonal of a parallelogram and
#check whether the parallelogram is a rectangle or a rhombus.
#logic-rectangle==>diagonals and sides follow pythagorus theorem
#Logic-rhombus-It has sides of eaqual length
print("input two adjoined sides and diagonals of parallelogram: ")
a,b,c=map(int,input().split(","))
if c**2==a**2+b**2:
    print("This is rectangle")
if a==b:
    print("This is rhombus")    
input two adjoined sides and diagonals of parallelogram: 
3,4,5
This is rectangle
#50-Write a Python program to replace a string "Python" with "Java" and "Java" with "Python" in a given string
#solution-1:treat string as array and use split() method. find words python and java and replace them
#solution-2:use replace() method
def replaceSTR():
    a="Python"
    b="Java"
    c="Python is popular than Java"
    lst=c.split(" ")
    k=[]
    op_c=" "
    #print(i)
    for i in lst:
        print(i)
        if i==a:
            #print(0)
            k.append(i.replace(a,b))
            #print(k)
        else:
            k.append(i)
        op_c=' '.join([str(item) for item in k])

    print(op_c)
replaceSTR()
Python
is
popular
than
Java
Java is popular than Java
#solution-2:use replace() method
text="Python is popular than Java"
new_text=text.replace("Python","Java")
print(new_text)
Java is popular than Java
#51-Write a Python program to find the difference between the largest integer and the 
#smallest integer which are created by 8 numbers from 0 to 9
#q1-how many digits would be input
#q2-can we repeat them and how many times
#q3-would there be signed integers or whole numbers

#Logic-
#max num-look at the digits. largest digit goes to leftmost side and other will be rearranged as per their value
#mim num-max number will be reversed
#subtract min from max

#solution-
def max_min_diff():
    #print("please input 4 digits ")
    nums=[5,3,2,4]
    max_digit=0
    max_num=0
    min_num=0
    nums.sort()
    for i in range(len(nums)):
        max_num+=nums[i]*(10**i)
    nums.sort(reverse=True)
    for i in range(len(nums)):
        min_num+=nums[i]*(10**i)
    print(max_num) 
    print(min_num)
    difference=max_num-min_num
    print("difference=",difference)
max_min_diff()        
5432
2345
difference= 3087
print("Input an integer created by 8 numbers from 0 to 9.:")
num = list(input())
print("Difference between the largest and the smallest integer from the given integer:")
print(int("".join(sorted(num,reverse=True))) - int("".join(sorted(num))))
Input an integer created by 8 numbers from 0 to 9.:
4 5 3 2
Difference between the largest and the smallest integer from the given integer:
3087
#52-Write a Python program to compute the sum of first n given prime numbers
#solution-find prime numbers add them up
#logic-to find n prime numbers length of list should be ni
import math
def prime_num_sum():
    primeNum_lst=[]
    prime_sum=0
    num=97
    lst=[]
    count=0
    i=2
    x=10000
    print(i)
    print(math.sqrt(num))
    
    while i<math.sqrt(num):
        if num%i==0 :
            print("number is not prime",num,i)
            break
        elif num==i :
            print("number is prime",num)
        i+=1

prime_num_sum()            
2
9.848857801796104
#Date-8/22/22
#53- accept an even number (>=4, Goldbach number) from the user and create a combinations that express the given
#number as a sum of two prime numbers. Print the number of combinations
import math 
MAX=10000
primes=[]

def sieveSundaram():
    marked=[False]*(int(MAX/2)+100)
    
    for i in range(1,int((math.sqrt(MAX)-1)/2)+1):    #These are non primes
        for j in range((i*(i+1))<<1, int(MAX/2)+1, 2*i+1):
            marked[j]=True
           # print(i,j,marked[j])
            
    primes.append(2)  #as 2 is a prime number
    
    for i in range(1,int(MAX/2)+1):
        if marked[i]==False:
            primes.append(2*i+1)
    
def findPrimes(n):
    if n<=2 or n%2!=0:
        print("Invalid Output")
        return
    i=0
    while (primes[i]<=n//2):
        diff=n-primes[i]
            
        if diff in primes:
            print(primes[i],"+",diff,"=",n)
            return
        i+=1

sieveSundaram();
findPrimes(4);
findPrimes(38);
findPrimes(100);
2 + 2 = 4
7 + 31 = 38
3 + 97 = 100
#54-Python program to create maximum number of regions obtained by drawing n given straight lines
def maxRegions(n):
    num = n * (n + 1) // 2 + 1 
    print(num)
 
# Driver code
n = 10 
maxRegions(n)
56
#55- There are four different points on a plane, P(xp,yp), Q(xq, yq), R(xr, yr) and S(xs, ys). 
#Write a Python program to test AB and CD are orthogonal or not
def checkOrtho(x1, y1, x2, y2, x3, y3, x4, y4):
    # Both lines have infinite slope
    if (x2 - x1 == 0 and x4 - x3 == 0):
        return False
    
    # Only line 1 has infinite slope
    elif (x2 - x1 == 0):
        m2 = (y4 - y3) / (x4 - x3)
 
        if (m2 == 0):
            return True
        else:
            return False
        
    # Only line 2 has infinite slope
    elif (x4 - x3 == 0):
        m1 = (y2 - y1) / (x2 - x1);
 
        if (m1 == 0):
            return True
        else:
            return False
        
    else:        
        # Find slopes of the lines
        m1 = (y2 - y1) / (x2 - x1)
        m2 = (y4 - y3) / (x4 - x3)
 
        # Check if their product is -1
        if (m1 * m2 == -1):
            return True
        else:
            return False
        
if __name__ == '__main__':
    x1 = 0
    y1 = 4
    x2 = 0
    y2 = -9
    x3 = 2
    y3 = 0
    x4 = -1
    y4 = 0
     
    if(checkOrtho(x1, y1, x2, y2,
                  x3, y3, x4, y4)):
        print("Yes")
    else:
        print("No")
Yes
while True:
    try:
        print("Input xp, yp, xq, yq, xr, yr, xs, ys:")
        x_p, y_p, x_q, y_q, x_r, y_r, x_s, y_s = map(float, input().split())
        pq_x, pq_y = x_q - x_p, y_q - y_p
        rs_x, rs_y = x_s - x_r, y_s - y_r
        rs = pq_x*rs_x + pq_y*rs_y
        if abs(rs) > 1e-10:
            print("AB and CD are not orthogonal!")
        else:
            print("AB and CD are orthogonal!")
    except:
        break
Input xp, yp, xq, yq, xr, yr, xs, ys:
0
#56-sum of all numerical values (positive integers) embedded in a sentence
import sys, re
def test(stri):
    print("Sum of the numeric values: ",sum([sum(map(int,re.findall(r"[0-9]{1,5}",stri)))]))
    
(test("sd1fdsfs23 dssd56"))
(test("15apple2banana"))
(test("flowers5fruit5"))
Sum of the numeric values:  80
Sum of the numeric values:  17
Sum of the numeric values:  10
#57
#https://www.google.com/search?q=Write+a+Python+program+to+read+the+mass+data+and+find+the+number+of+islands.&rlz=1C1RXQR_enUS983US984&oq=Write+a+Python+program+to+read+the+mass+data+and+find+the+number+of+islands.&aqs=chrome..69i57.391j0j7&sourceid=chrome&ie=UTF-8

#Graph or DFS algorithm
#58-restore the original string by entering the compressed string with this rule.
#However, the # character does not appear in the restored character string
#input-XY#6Z1#4023
#output-XYZZZZZZ1000023

s="XY#6Z1#4023"
res=""
rep_str=""

for i in range(len(s)):
    if s[i]=="#":
        cnt=0
        cnt=int(s[i+1])
        #print(cnt)
        for j in range(cnt):
            rep_str+=s[i+2]
            #print(rep_str)
        res=res+rep_str
        #print(res)
        i=i+2
    else:
        res=res+s[i]
        #print(res)
print(res)
XYZZZZZZ6Z1ZZZZZZ00004023
def restore_original_str(a1):
    result=""
    ind=0
    end=len(a1)
    while ind<end:
        if a1[ind]=="#":
            result+=a1[ind+2]*int(a1[ind+1])
            ind+=3
        else:
            result+=a1[ind]
            ind+=1
    return result
print(restore_original_str("XY#6Z1#4023"))
XYZZZZZZ1000023
#59-compute the area of the polygon . 
#The vertices have the names vertex 1, vertex 2, vertex 3, ... vertex n according to the order of edge connections

#shoelace formula
def polygonArea(X,Y,n):
    area=0.0
    
    j=n-1
    for i in range(0,n):
        area+=(X[j]+X[i])*(Y[j]-Y[i])
        j=i        
    return int(abs(area/2.0))

X = [0, 2, 4]
Y = [1, 3, 7]
n = len(X)
print(polygonArea(X, Y, n))  
2
#60-cut out words of 3 to 6 characters length from a given sentence not more than 1024 characters
print("Input a sentence (1024 characters. max.)")
yy = input()
yy = yy.replace(",", " ")
yy = yy.replace(".", " ")
print("3 to 6 characters length of words:")
print(*[y for y in yy.split() if 3 <= len(y) <= 6])
Input a sentence (1024 characters. max.)
The quick brown fox
3 to 6 characters length of words:
The quick brown fox
#61-The maximum value of the sum of integers passing according to the rule on one line.
#Dynamic Programming
#https://www.geeksforgeeks.org/maximum-path-sum-starting-cell-0-th-row-ending-cell-n-1-th-row/
#62-find the number of combinations that satisfy p + q + r + s = n
#where n is a given number <= 4000 and p, q, r, s in the range of 0 to 1000
from collections import Counter

print("Input positive integer: ")
pair_dict=Counter()
for i in range(2000):  #2000=2n
    pair_dict[i]=min(i,2001-i)+1  #2001=2n+1
    #print(i," ",pair_dict[i])
while True:
    try:
        n=int(input())
        ans=0
        for i in range(n+1):
            print(pair_dict[i],pair_dict[n-i])
            ans+=pair_dict[i]*pair_dict[n-i]
        print("Number of combinations of a,b,c,d: ",ans)
    except EOFError:
        break
Input positive integer: 
0   1
1   2
2   3
3   4
4   3
2
1 3
2 2
3 1
Number of combinations of a,b,c,d:  10
---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_12348/4219759435.py in <module>
     10 while True:
     11     try:
---> 12         n=int(input())
     13         ans=0
     14         for i in range(n+1):

~\anaconda3\lib\site-packages\ipykernel\kernelbase.py in raw_input(self, prompt)
   1004                 "raw_input was called, but this frontend does not support input requests."
   1005             )
-> 1006         return self._input_request(
   1007             str(prompt),
   1008             self._parent_ident["shell"],

~\anaconda3\lib\site-packages\ipykernel\kernelbase.py in _input_request(self, prompt, ident, parent, password)
   1049             except KeyboardInterrupt:
   1050                 # re-raise KeyboardInterrupt, to truncate traceback
-> 1051                 raise KeyboardInterrupt("Interrupted by user") from None
   1052             except Exception:
   1053                 self.log.warning("Invalid Message:", exc_info=True)

KeyboardInterrupt: Interrupted by user
#63-program which adds up columns and rows of given table as shown in the specified figure
while True:
    print("Input number of rows/columns:")
    n=int(input())
    if n==0:
        break
    print("Input Cell Value:")
    x=[]
    for i in range(n):
        x.append([int(num) for num in input().split()])
    
    for i in range(n):
        sum=0
        for j in range(n):
            sum+=x[i][j]
        x[i].append(sum)
    
    x.append([])
    for i in range(n+1):
        sum=0
        for j in range(n):
            sum+=x[j][i]
        x[n].append(sum)
    print("result:")
    
    for i in range(n+1):
        for j in range(n+1):
            print('{0:>5}'.format(x[i][j]),end="")
            
Input number of rows/columns:
2
Input Cell Value:
1 2
2 3
result:
    1    2    3    2    3    5    3    5    8Input number of rows/columns:
1
Input Cell Value:
1
result:
    1    1    1    1Input number of rows/columns:
0
#64-Given a list of numbers and a number k, 
#write a Python program to check whether the sum of any two numbers from the list is equal to k or not

#test case-[1, 5, 11, 5] and k = 16, return true since 11 + 5 is 16

arr=[1, 5, 11, 5]
k=16

for i in arr:
    if (k-i) in arr:
        print("True")
        break
    else:
        continue
True
def check_sum(nums, k):   
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if nums[i] + nums[j] == k:
                return True
    return False
print(check_sum([12, 5, 0, 5], 10))
True
#65-find the longest word in set of words which is a subsequence of a given string
#solution: find the indexes of subsequence in an array. sort array. see if the original array and sorted rray are same

s="Green" 
sub={"Gn", "Gren", "ree", "en"}
#sub="ree"

def longest_word_seq(s,d):
    long_wrd=""
    
    for word in d:
        temp_wrd=''
        j=0
        for letter in word:
            for i in range(j,len(s)):
                if letter==s[i]:
                    temp_wrd+=letter
                    j=i  #when reach end of len of s
                    break
                else:
                    continue
                    
        if (temp_wrd)==word and len(long_wrd)<len(temp_wrd):
            long_wrd=temp_wrd
        else:
            continue
    return long_wrd
print(longest_word_seq(s,sub))
Gren
#66-check whether a number is "happy" or not
#solution-recursion
n=2

def happy_num(n):
    arr_visited=[]
    new_n=0  
    #base case
    if n==1:
        #print("hola")
        return True
    #elif new_n in arr_visited:
        #return False
    else:
        length=len(str(n))
        for i in range(length):
            dig=str(n)[i]
            new_n+=int(dig)**2
        n=new_n
        if new_n in arr_visited:
            return False
        else:
            arr_visited.append(new_n)
            return happy_num(n)
            
        print(n)
        
happy_num(n)
 
 
#Date -8/25/22
#66-check whether a number is "happy" or not
#solution-recursion
n=2

class Solution(object):
    
    def isHappy(self,n):
        """
        :type n: int
        :rtype: bool
        """
        return self.solve(n,{})
    
    def solve(self,n,visited): #visited could be dictionary or array
        if n==1:
            return True
        if n in visited:
            return False
        visited[n]=1  #initialize visited as dictionary
        #print(visited)
        n=str(n)
        l=list(n)
        l=list(map(int,l))
        temp=0
        for i in l:
            temp+=(i**2)
        return self.solve(temp,visited)
ob1=Solution()
op=ob1.isHappy(2)
print("Is Happy:",op) 
    
Is Happy: False
def is_Happy_num(n):
    past=set()
    while n!=1:
        n=sum(int(i)**2 for i in str(n))
        if n in past:
            return False
        past.add(n)
    return True
print(is_Happy_num(7))
print(is_Happy_num(6))
True
False
#67-find and print the first 10 happy numbers.
def is_num_happy(n):
    past=set()
    while n!=1:
        n=sum(int(i)**2 for i in str(n))
        if n in past:
            return False
        past.add(n)
    return True
def happy_num(num):
    n=1
    cnt=0
    happy_num_arr=[]
    while cnt!=num:
        if is_num_happy(n)==True:
            happy_num_arr.append(n)
            cnt+=1
        n+=1
    print(happy_num_arr)
happy_num(12)
[1, 7, 10, 13, 19, 23, 28, 31, 32, 44, 49, 68]
def happy_numbers(n):
    past = set()
    while n != 1:
        n = sum(int(i)**2 for i in str(n))
        if n in past:
            return False
        past.add(n)
    return True
print([x for x in range(500) if happy_numbers(x)][:10])
[1, 7, 10, 13, 19, 23, 28, 31, 32, 44]
#68-count the number of prime numbers less than a given non-negative number
n=100
import math
def prime_num_cnt(n):
    cnt=0
    num=2    
    prime_num=set()
    while num!=n:
        flag=0
        for i in range(2,int(math.sqrt(num))+1):
            if num%i==0:
                #print(num)
                flag=1
                break
        if flag==0:
            prime_num.add(num)
            cnt+=1
        num+=1
    print(prime_num,"\n count of prime number=",cnt)
prime_num_cnt(n)
{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97} 
 count of prime number= 25
def count_Primes_nums(n):
    ctr = 0
    
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr

print(count_Primes_nums(10))
print(count_Primes_nums(100))
4
25
#69-check if two given strings are isomorphic to each other or not
MAX_CHARS=256

def isomorphic(str1,str2):
    m=len(str1)
    n=len(str2)
    
    if m!=n:
        return False
    
    map=[-1]*MAX_CHARS  #Initialize all entries of map as -1
    
    marked=[False]*MAX_CHARS #To mark visited characters in str2
    
    for i in range(n):
        if map[ord(str1[i])]==-1:  #if current character of str1 is seen first time in it.
            
            if marked[ord(str2[i])]==True:   #if current character of st2 is already seen, one to one mapping not possible
                return False
            
            marked[ord(str2[i])]=True  ## Mark current character of str2 as visited
            
            map[ord(str1[i])]=str2[i]  #mapping ith characters of both strings
            
        elif map[ord(str1[i])] !=str2[i]: #if mapping mismatch found
            return False
        
    return True

print (isomorphic("aab", "xxy"))
print (isomorphic("aab", "xyz"))    
True
False
#solution-2 : count the number of occurences of every characters and its sequence
CHAR=26

def areisomorphic(st1,st2):
    m=len(st1)
    n=len(st2)
    
    if m!=n:
        return False
    
    #for counting the previous appearances of character
    # in both the strings
    countChars1=[0]*CHAR
    countChars2=[0]*CHAR
    #print(countChars1)
    
    # Process all characters one by one
    for i in range(n):
        countChars1[ord(st1[i])-ord('a')]+=1
        countChars2[ord(st2[i])-ord('a')]+=1
       # print(countChars1)
       # print(countChars2)
       # print(countChars1[ord(st1[i])-ord('a')])
       # print(countChars2[ord(st1[i])-ord('a')])
        
        
    for i in range(n):
        if countChars1[ord(st1[i])-ord('a')]!= countChars2[ord(st2[i])-ord('a')]:
            return False
    return True

#print((areisomorphic("aab", "xxy")))
print((areisomorphic("aab", "xyz")))    
False
#70-find the longest common prefix string amongst a given array of strings. Return false If there is no common prefix
arr=["abcdefgh","abcefgh"]
def longest_Common_Prefix(str1):
    if not str1:
        return ""
    short_str=min(str1,key=len)
    #print(short_str)
    
    for i,char in enumerate(short_str):
        for other in str1:
            print(other,short_str,i,char)
            if other[i]!=char:
                return short_str[:i]
    return short_str

print(longest_Common_Prefix(["abcdefgh","abcefgh","abdfgh","qjandjn"]))
abcdefgh abdfgh 0 a
abcefgh abdfgh 0 a
abdfgh abdfgh 0 a
qjandjn abdfgh 0 a

#71-Python program to reverse only the vowels of a given string
def isVowel(c):
        if (c == 'a' or c == 'A' or c == 'e' or
        c == 'E' or c == 'i' or c == 'I' or
        c == 'o' or c == 'O' or c == 'u' or c == 'U'):
            return True
        return False
def reverseVowel(strng):
    j=0
    vowel=[0]*len(strng)
    strng=list(strng)  #as strings are immutabel we need to conver them to list
    
    for i in range(len(strng)):  # Storing the vowels separately
        if isVowel(strng[i]):
            vowel[j]=strng[i]
            j+=1
            
    for i in range(len(strng)):  #reversing vowel
        if isVowel(strng[i]):
            j-=1
            strng[i]=vowel[j]
            
    return ''.join(strng)

reverseVowel("resourc")
'rusoerc'
def isVowel(c):
    return (c=='a' or c=='A' or c=='e' or
            c=='E' or c=='i' or c=='I' or
            c=='o' or c=='O' or c=='u' or
            c=='U')

def reverseVowel(str):
    i=0
    j=len(str)-1
    
    while(i<j):
        if not isVowel(str[i]):
            i+=1
            continue
        if not isVowel(str[j]):
            j-=1
            continue
        
        str[i],str[j]=str[j],str[i]  #swapping
        i+=1
        j-=1
        
    return str

str="resourc"
reverseVowel(list(str))
        
        
['r', 'u', 's', 'o', 'e', 'r', 'c']
#72-check whether a given integer is a palindrome or not
num = input("Enter a number")
if num == num[::-1]:
    print("Yes its a palindrome")
else:
    print("No, its not a palindrome")
Enter a number323
Yes its a palindrome
test_number = 9669669
  
# printing the original number 
print ("The original number is : " + str(test_number))
  
# using str() + string slicing
# for checking a number is palindrome
res = str(test_number) == str(test_number)[::-1]
  
# printing result
print ("Is the number palindrome ? : " + str(res))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_16912/4188703257.py in <module>
      2 
      3 # printing the original number
----> 4 print ("The original number is : " + str(test_number))
      5 
      6 # using str() + string slicing

TypeError: 'str' object is not callable
import math
   
# the recursive function to reverse
def rev(num):
    return int(num != 0) and ((num % 10) * \
             (10**int(math.log(num, 10))) + \
                          rev(num // 10))
  
# initializing number 
test_number = 9669669
  
# printing the original number 
print ("The original number is : " + str(test_number))
  
# using math.log() + recursion + list comprehension
# for checking a number is palindrome
res = test_number == rev(test_number)
  
# printing result
print ("Is the number palindrome ? : " + str(res))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_16912/2515002729.py in <module>
     11 
     12 # printing the original number
---> 13 print ("The original number is : " + str(test_number))
     14 
     15 # using math.log() + recursion + list comprehension

TypeError: 'str' object is not callable
#73-remove the duplicate elements of a given array of numbers such that
#each element appear only once and return the new length of the given array
input_arr=[0,0,1,1,2,2,3,3,4,4,4]

print(len(set(input_arr)))
5
def remove_duplicates(nums):
    for i in range (len(nums)-1, 0, -1):
        if nums[i] == nums[i-1]:
            del nums[i-1]
    return len(nums)

print(remove_duplicates([0,0,1,1,2,2,3,3,4,4,4]))
print(remove_duplicates([1, 2, 2, 3, 4, 4]))
5
6
#74-calculate the maximum profit from selling and buying values of stock. 
#An array of numbers represent the stock prices in chronological order
stock_prices=([8, 10, 7, 5, 7, 15])
max_price=max(stock_prices)
min_price=min(stock_prices)

max_profit=max_price-min_price
print(max_profit)        
10
def buy_and_sell(stock_price):
    max_profit_val, current_max_val = 0, 0 
    for price in reversed(stock_price):                       
        current_max_val = max(current_max_val, price)          
        potential_profit = current_max_val - price          
        max_profit_val = max(potential_profit, max_profit_val)

    return max_profit_val

print(buy_and_sell([8, 10, 7, 5, 7, 15]))
print(buy_and_sell([1, 2, 8, 1]))
print(buy_and_sell([]))
10
7
0
#Date-8/26/22
#75-remove all instances of a given value from a given array of integers and find the length of the new array
arr=[1, 2, 3, 4, 5, 6, 7, 5]
n=5

for i in arr:
    if i==n:
        arr.remove(i)
print(arr, len(arr))
[1, 2, 3, 4, 6, 7] 6
#76-find the starting and ending position of a given value in a given array of integers, sorted in ascending order
arr=[5, 7, 7, 8, 8, 8] 
n=8
max_index=0
#print(arr.index(n))
def search_Range(array_nums, target_val):
    res_arr=[]
    start_pos=0
    end_pos=0
    for i in range(len(array_nums)):
        if target_val==array_nums[i] and start_pos==-1:
            start_pos=i
            end_pos=i
            #print(start_pos,end_pos)
        elif target_val==array_nums[i] and start_pos!=-1:
            end_pos=i
           # print(end_pos)
    res_arr.append(start_pos)
    res_arr.append(end_pos)
    return res_arr
print(search_Range([5, 7, 7, 8, 8, 8], 8))
#print(search_Range([1, 3, 6, 9, 13, 14], 4))
print(search_Range([8, 7, 7,10], 8))
[0, 5]
[0, 0]
#77-find the maximum profit in one transaction i.e., buy one and sell one share of the stock 
#from the given price value of the said array. You cannot sell a stock before you buy one
stock_price=[224, 236, 247, 258, 259, 225]

max_price=max(stock_price)
max_index=stock_price.index(max_price)
#print(max_price,max_index)
max_profit=0

for i in range(0,max_index+1):
    if max_price-stock_price[i]>max_profit:
        max_profit=max_price-stock_price[i]
print(max_profit)   
35
#use j=i+1(sell=buy+1 index)
def max_profit(stock_price):
	max_profit_amt = 0

	for i in range(len(stock_price)):
		profit_amt = 0
		for j in range(i+1, len(stock_price)):
			profit_amt = stock_price[j] - stock_price[i]
			if  profit_amt > max_profit_amt:
				max_profit_amt = profit_amt
	return max_profit_amt
print(max_profit([224, 236, 247, 258, 259, 225]))
35
#78- Python program to print a given N by M matrix of numbers line by line in forward > backwards > forward >... order
mtr=[[1, 2, 3,4],
    [5, 6, 7, 8],
    [0, 6, 2, 8],
    [2, 3, 0, 2]]

for i in range(len(mtr)):
    #print("i=",i)
    if i%2==0:
        for j in range(len(mtr)):
            print(mtr[i][j],end=" ")
    else:
        for j in range(len(mtr)-1,-1,-1):
            print(mtr[i][j],end=" ")
1 2 3 4 8 7 6 5 0 6 2 8 2 0 3 2 
#try to use while loop when there are multiple for loops
def print_matrix(nums):
    flag = True 
    
    for line in nums:

        if flag == True: 
            i = 0
            while i < len(line):
                print(line[i], sep=" ")
                i += 1
            flag = False

        else: 
            i = -1
            while i > -1 * len(line) - 1:
                print(line[i], sep=" ")
                i = i - 1
            flag = True
print_matrix([[1, 2, 3, 4],
              [5, 6, 7, 8],
              [0, 6, 2, 8],
              [2, 3, 0, 2]])
1
2
3
4
8
7
6
5
0
6
2
8
2
0
3
2
#79-compute the largest product of three integers from a given list of integers
#lst=[-10, -20, 20, 1]
def largest_product_of_three(nums):
    max_val = nums[1]

    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            for k in range(j+1, len(nums)):
                max_val = max(nums[i] * nums[j] * nums[k], max_val)
                
    return max_val
    
print(largest_product_of_three([-10, -20, 20, 1]))
print(largest_product_of_three([-1, -1, 4, 2, 1]))
print(largest_product_of_three([1, 2, 3, 4, 5, 6]))
4000
8
120
#80-find the first missing positive integer that does not exist in a given list
lst=[2, 3, 4, 6, 8, 1, -10, 15, 16]
sorted_lst=sorted(lst)
print(sorted_lst)
num=1
for i in range(len(sorted_lst)):
    if sorted_lst[i]>0 and sorted_lst[i]==sorted_lst[i+1]-1:
        continue
    elif sorted_lst[i]>0 and sorted_lst[i]!=sorted_lst[i+1]-1:
        print("missing number is: ",sorted_lst[i]+1)
        break
    num+=1
    print(num)
[-10, 1, 2, 3, 4, 6, 8, 15, 16]
2
missing number is:  5
#81-randomly generate a list with 10 even numbers between 1 and 100 inclusive.
import random
print(random.sample([i for i in range(1,100) if i%2==0],10))
[54, 20, 82, 64, 94, 80, 12, 42, 10, 16]
#82-calculate the median from a list of numbers
import statistics
lst=[2.0,12.11,22.3,24.12,55.22]
res=statistics.median(lst)
print(res)
22.3
lst=[4, 5, 8, 9, 10, 17]
lst.sort()
print(lst)
mid=len(lst)//2
res=(lst[mid]+lst[~mid])/2
#print(lst[mid],lst[~mid],mid,~mid)
print(res)
[4, 5, 8, 9, 10, 17]
8.5
#83-test whether a given number is symmetrical or not.(palindrome)
n=122
m=""
lst=list(str(n))
for i in range(len(lst)-1,-1,-1):
    m+=lst[i]

if int(m)==n:
    print("True")
else:
    print("False")
False
def is_symmetrical_num(n):
    return str(n) == str(n)[::-1]
print(is_symmetrical_num(121))
print(is_symmetrical_num(0))
print(is_symmetrical_num(122))
print(is_symmetrical_num(990099))
True
True
False
True
#84- Count the negative numbers and compute the sum of the positive numbers of the said list. 
#Return these values through a list.
lst=[1, 2, 3, -4, -5]
cnt=0
res=[]
sums=0
for i in lst:
    if i<0:
        cnt+=1
    elif i>0:
        sums+=i
res.append([cnt,sums])
print(res)
[[2, 6]]
def count_sum(nums):
   if not nums: return []
   return [len([n for n in nums if n < 0]), sum(n for n in nums if n > 0)]
nums = [1, 2, 3, 4, 5]
print("Original list:",nums)
print("Number of negative of numbers and sum of the positive numbers of the said list:",count_sum(nums))
Original list: [1, 2, 3, 4, 5]
Number of negative of numbers and sum of the positive numbers of the said list: [0, 15]
#85-check whether a given string is an "isogram" or not.
def check_isogram(str1):
    return len(str1) == len(set(str1.lower()))

print(check_isogram("w3resource"))
print(check_isogram("w3r"))
print(check_isogram("Python"))
print(check_isogram("Java"))
False
True
True
False
#86-count the number of equal numbers from three given
l=[1, 2, 2]
dct={}
for i in l:
    dct[i]=l.count(i)
for key, val in dct.items():
    if val>1:
        print(key,"-->",val)
2 --> 2
#87-check whether a given employee code is exactly 8 digits or 12 digits
#solution-1: ascii or unicode
#isdigit method
code='1234567j'
for i in code:
    if i.isdigit():
        flag=0
    else:
        flag=1
        break
if flag==0:
    print("employee code is exactly 8 digits")
else:
    print("employee code does not follow rule")
employee code does not follow rule
def is_valid_emp_code(emp_code):
  return len(emp_code) in [8, 12] and emp_code.isdigit()
print(is_valid_emp_code('12345678'))
print(is_valid_emp_code('1234567j'))
print(is_valid_emp_code('12345678j'))
True
False
False
#88-program that accept two strings and test if the letters in the second string are present in the first string
arr=["python", "ypth"]

for i in arr[1]:
    if i in arr[0]:
        flag=0
    else:
        flag=1
        break
if flag==1:
    print("the second string do not present in the first string")
else:
    print("the second string present in the first string")
the second string present in the first string
#using all
def string_letter_check(str1, str2):
  return all([char in str1.lower() for char in str2.lower()])
print(string_letter_check("python", "ypth"))
print(string_letter_check("python", "ypths"))
True
False
#89-compute the sum of the three lowest positive numbers from a given list of numbers
lst=[10, 20, 30, 40, 50, 60, 7]
lst.sort()
print(sum(lst[:3]))
37
def sum_three_smallest_nums(lst):
	return sum(sorted([x for x in lst if x > 0])[:3])
nums = [10, 20, 30, 40, 50, 60, 7]
print("Original list of numbers: ",nums)
print("Sum of the three lowest positive numbers of the said array: ",sum_three_smallest_nums(nums))
Original list of numbers:  [10, 20, 30, 40, 50, 60, 7]
Sum of the three lowest positive numbers of the said array:  37
#90-replace first five characters of a given string with "*" and returns the new string
strng="kdi39323swe"
cnt=0
res_strng=""
for i in strng:
    if cnt<=5:
        res_strng+="*"
        cnt+=1
    else:
        res_strng+=i
print(res_strng)
******23swe
def new_string(str1):
    return '*'*(len(str1)-5)+str1[-5:]
text = "kdi39323swe"
print("Original String: ",text)
print("new string: ",new_string(text))
Original String:  kdi39323swe
new string:  ******23swe
#91-count the number of arguments in a given function
def num_of_args(*args):
   
    # using len() method in args to count
    return(len(args))

print(num_of_args())
print(num_of_args([1, 2, 3, 4]))
0
1
#92-program to compute cumulative sum of numbers of a given list
lst=[10, 20, 30, 40, 50, 60, 7]
res_lst=[]
cum_sum=0

for i in range(len(lst)):
    cum_sum+=lst[i]
    res_lst.append(cum_sum)
print(res_lst)
[10, 30, 60, 100, 150, 210, 217]
def nums_cumulative_sum(nums_list):
  return [sum(nums_list[:i+1]) for i in range(len(nums_list))]

print(nums_cumulative_sum([10, 20, 30, 40, 50, 60, 7]))
[10, 30, 60, 100, 150, 210, 217]
#93-find the middle character(s) of a given string. If the length of the string is even 
#return the two middle characters. If the length of the string is odd, return the middle character.
s="kkPython"
m=len(s)
print(m,m/2,-m/2)
if m%2==0:
    print(s[int(m/2)]+s[-(int(m/2))-1])
else:    
    print(s[int(m/2)])
8 4.0 -4.0
ty
def middle_char(txt):
  return txt[(len(txt)-1)//2:(len(txt)+2)//2]
text = "Python"
print("Original string: ",text)
print("Middle character(s) of the said string: ",middle_char(text))
Original string:  Python
Middle character(s) of the said string:  th
#94-program to find the largest product of the pair of adjacent elements from a given list of integers
arr=[1, 2, 3, 4, 5, 6]
max_prod=0
for i in range(len(arr)-1):
    prod=0
    prod=arr[i]*arr[i+1]
    if max_prod<prod:
        max_prod=prod
print(max_prod)
30
def adjacent_num_product(list_nums):
   return max(a*b for a, b in zip(list_nums, list_nums[1:]))
nums = [1,2,3,4,5,6]
print("Original list: ",nums)
print("Largest product of the pair of adjacent elements of the said list:", adjacent_num_product(nums))
Original list:  [1, 2, 3, 4, 5, 6]
Largest product of the pair of adjacent elements of the said list: 30
#95-check whether every even index contains an even number and every odd index contains odd number of a given list
lst= [2, 1, 4, 3, 6, 7, 1, 3]
for i in range(len(lst)):
    if i%2==0 and lst[i]%2==0:
        continue
    elif i%2==1 and lst[i]%2==1:
        continue
    else:
        print("They are not following rule")
        break
They are not following rule
def odd_even_position(nums):
           return all(nums[i]%2==i%2 for i in range(len(nums)))
nums = [2, 1, 4, 3, 6, 7, 6, 3]
print("Original list of numbers:", nums)
print("Check whether every even index contains an even number and every \nodd index contains odd number of a given list:")
print(odd_even_position(nums))
Original list of numbers: [2, 1, 4, 3, 6, 7, 6, 3]
Check whether every even index contains an even number and every 
odd index contains odd number of a given list:
True
# Python 3 program for checking of
# Narcissistic number
 
# function to count digits
def countDigit(n) :
    if (n == 0) :
        return 0 
    return (1 + countDigit(n // 10))
     
# Returns true if n is Narcissistic number
def check(n) :     
    # Count the number of digits
    l = countDigit(n)
    dup = n; sm = 0
 
    # Calculates the sum of digits
    # raised to power
    while (dup) :
        sm = sm + pow(dup % 10, l)
        dup = dup // 10     
    return (n == sm)
  
# Driver code
n = 1634
if (check(n)) :
    print( "yes")
else :
    print( "no")
yes
def getResult(st):
    sum = 0
    length = len(st)
 
    # Traversing through the string
    for i in st:
 
        # Converting character to int
        sum = sum + int(i) ** length
 
    # Converting string to integer
    number = int(st)
 
    # Comparing number and sum
    if (number == sum):
        return "true"
    else:
        return "false"
    
# Driver Code taking input as string
st = "153"
print(getResult(st))
true
#Date 8/27/22
#97- find the highest and lowest number from a given string of space separated integers
s="1 4 5 77 9 0"
#arr=[]
num_list = list(map(int, s.split()))
print(max(num_list), min(num_list))
77 0
#98-check whether a sequence of numbers has an increasing trend or not.
lst=[1,5,3,4]
#print(sorted(lst))
if lst==sorted(lst):
    print("True")
else:
    print("False")
False
#99-find the position of the second occurrence of a given string in another given string. If there is no such string return -1
txt="the quick brown fox jumps over the lazy dog"
s="the"

def find_string(txt,str1):
    return txt.find(str1,txt.find(str1)+1)
#print(txt.find(s,9,10))
print(find_string("The quick brown fox jumps over the lazy dog", "the"))
-1
#100-compute the sum of all items of a given array of integers where each integer is multiplied by its index. Return 0 if there is no number
lst=[1,2,3,4]
sums=0

for i in range(len(lst)):
    sums+=(i*lst[i])
print(sums)
20
#using enumerate
def sum_index_multiplier(nums):
    return sum(j*i for i, j in enumerate(nums))
print(sum_index_multiplier([1,2,3,4]))
print(sum_index_multiplier([-1,-2,-3,-4]))
20
-20
#101-find the name of the oldest student from a given dictionary containing the names and ages of a group of students.
dct={"Bernita Ahner": 12, "Kristie Marsico": 11, "Sara Pardee": 14, "Fallon Fabiano": 11, "Nidia Dominique": 15}
max_val=0
max_key=""
for key, val in dct.items():
    if val>max_val:
        max_val=val
        max_key=key
print(max_key)
Nidia Dominique
#using get
def oldest_student(students):
    return max(students,key=students.get)
print(oldest_student({"Nilda Woodside": 12, "Jackelyn Pineda": 12.2, 
                      "Sofia Park": 12.4, "Joannie Archibald": 12.6, 
                      "Becki Saunder": 12.7})) 
Becki Saunder
#102-create a new string with no duplicate consecutive letters from a given string
s=("PPYYYTTHON")
res=""
for i in s:
    if i not in res:
        res+=i
print(res)
PYTHON
def no_consecutive_letters(txt):
    return txt[0]+''.join(txt[i] for i in range(1,len(txt)) if txt[i]!=txt[i-1])
print(no_consecutive_letters("PPYYYTTHON"))
print(no_consecutive_letters("PPyyythonnn"))
PYTHON
Python
#103-check whether two given lines are parallel or not
def parallel_line(a1, b1, c1, a2, b2, c2):
    if a1*b2==a2*b1:
        print("Yes")
    else:
        print("No")
def parallel_lines(line1,line2):
    return line1[0]/line1[1] == line2[0]/line2[1]  #same as above
print(parallel_lines([2,3,4], [2,3,8]))
True
#104-find a number in a given matrix, which is maximum in its column and minimum in its row
import sys
mtr=[[1, 2], [2, 3]]

def minmaxNumbers(matrix,res):
    s=set()
    
    #traverse matrix
    for i in range(0,len(matrix),1):#Tracing row
        minr=sys.maxsize
        for j in range(0,len(matrix[i]),1):#Tracing column
            
            #update minimum element of currwnt row
            minr=min(minr,matrix[i][j])
            
        #insert minimum element of row
        s.add(minr)
    
    for j in range(0, len(matrix[0]),1):  ##Tracing column
        maxc=-sys.maxsize-1
        for i in range(0,len(matrix),1):  #tracing rows
            
            #update maximum element of current column
            maxc=max(maxc,matrix[i][j])
            
        # Checking if it is already present in unordered set
        if maxc in s:
            res.append(maxc)
        
    return res
mat = [ [ 1, 10, 4 ],
            [ 9, 3, 8 ],
            [ 15, 16, 17 ] ]
ans=[]

minmaxNumbers(mat, ans)
            
[15]
def matrix_number(matrix):
    result=set(map(min,matrix)) & set(map(max,zip(*matrix)))
    return result

m1 = [[1,2], [2,3]]
print("Original matrix:",m1)
print("Number in the said matrix which is maximum in its column and minimum in its row:")
print(matrix_number(m1))
Original matrix: [[1, 2], [2, 3]]
Number in the said matrix which is maximum in its column and minimum in its row:
{2}
105-check whether a given sequence is linear, quadratic or cubic
naive approch
def Seq_Linear_Quadratic_Cubic(seq_nums): seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))] print(seq_nums) if len(set(seq_nums)) == 1: return "Linear Sequence"

seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
print(seq_nums)
if len(set(seq_nums)) == 1: return "Quadratic Sequence"

seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
print(seq_nums)
if len(set(seq_nums)) == 1: return "Cubic Sequence"

nums = [1,4,9,16,25] print("Original Sequence:",nums) print("Check the said sequence is Linear, Quadratic or Cubic?") print(Seq_Linear_Quadratic_Cubic(nums))

def Seq_Linear_Quadratic_Cubic(seq_nums):
  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
  print(seq_nums)
  if len(set(seq_nums)) == 1: return "Linear Sequence"

  print(seq_nums)
  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
  if len(set(seq_nums)) == 1: return "Quadratic Sequence"
    
  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]
  print(seq_nums)
  if len(set(seq_nums)) == 1: return "Cubic Sequence"

nums = [0,2,4,6,8,10]
print("Original Sequence:",nums)
print("Check the said sequence is Linear, Quadratic or Cubic?")
print(Seq_Linear_Quadratic_Cubic(nums))
nums = [1,4,9,16,25]
print("\nOriginal Sequence:",nums)
print("Check the said sequence is Linear, Quadratic or Cubic?")
print(Seq_Linear_Quadratic_Cubic(nums))
nums = [0,12,10,0,-12,-20]
print("\nOriginal Sequence:",nums)
print("Check the said sequence is Linear, Quadratic or Cubic?")
print(Seq_Linear_Quadratic_Cubic(nums))
Original Sequence: [0, 2, 4, 6, 8, 10]
Check the said sequence is Linear, Quadratic or Cubic?
[2, 2, 2, 2, 2]
Linear Sequence

Original Sequence: [1, 4, 9, 16, 25]
Check the said sequence is Linear, Quadratic or Cubic?
[3, 5, 7, 9]
[3, 5, 7, 9]
Quadratic Sequence

Original Sequence: [0, 12, 10, 0, -12, -20]
Check the said sequence is Linear, Quadratic or Cubic?
[12, -2, -10, -12, -8]
[12, -2, -10, -12, -8]
[6, 6, 6]
Cubic Sequence
#106-test whether a given integer is Pandigital number or not.
dec_arr=[0,1,2,3,4,5,6,7,8,9]

num=1023456897
i=10
arr=[]

if len(str(num))!=10:
    print("Not a Pandigital")
else:
    while i>0:
        dig=num%10
        num=num//10
        arr.append(dig)
        i-=1
    print(sorted(arr))
    if sorted(arr)==dec_arr:
        print("Its a Pandigital")
    else:
        print("Not a Pandigital")
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
Its a Pandigital
def is_pandigital_num(n):
    return len(set(str(n))) == 10

n = 1023456897
print("Original number:",n)
print("Check the said number is Pandigital number or not?")
print(is_pandigital_num(n))
Original number: 1023456897
Check the said number is Pandigital number or not?
True
#107-check whether a given number is Oddish or Evenish
n=321
n_len=len(str(n))
sums=0

while n_len>0:
    dig=n%10
    n=n//10
    sums+=dig
    n_len-=1

if sums%2==0:
    print("number is evenish")
else:
    print("number is oddish")
number is evenish
def oddish_evenish_num(n):
    return 'Oddish' if sum(map(int,str(n)))%2 else 'Evenish'

n = 120
print("Original Number",n)
print("Check whether the sum of all digits of the said number is odd or even!")
print(oddish_evenish_num(120))
Original Number 120
Check whether the sum of all digits of the said number is odd or even!
Oddish
#108-program that takes three integers and check whether the sum of the last digit of first number
#and the last digit of second number equal to the last digit of third number
tup=(12, 26, 44)
def check_last_digit(x,y,z):
    return str(x+z)[-1]==str(y)[-1]

print(check_last_digit(12, 26, 44))
print(check_last_digit(145, 122, 1010))
print(check_last_digit(0, 20, 40))
print(check_last_digit(1, 22, 40))
print(check_last_digit(145, 129, 104))
True
False
True
False
True
#109-find the indices of all occurrences of a given item in a given list
lst=[1,2,3,4,5,2]
n=2

def indices_in_list(nums_list,n):
    return [idx for idx, i in enumerate(nums_list) if i==n]
print(indices_in_list(lst,2))
[1, 5]
#110-remove the duplicate numbers from a given list of numbers.
arr=[1,2,3,2,3,4,5]
def unique_nums(nums):
    return [i for i in nums if nums.count(i)==1]
nums = [1,2,3,2,3,4,5]
print("Original list of numbers:",nums)
print("After removing the duplicate numbers from the said list:")
print(unique_nums(nums))
Original list of numbers: [1, 2, 3, 2, 3, 4, 5]
After removing the duplicate numbers from the said list:
[1, 4, 5]
#111-check whether two given circles (given center (x,y) and radius) are intersecting
def is_circle_collision(circle1,circle2):
    x1,y1,r1=circle1
    x2,y2,r2=circle2
    distance=((x1-x2)**2 +(y1-y2)**2)**0.5
    return distance<=r1+r2
print(is_circle_collision([1,2, 4], [1,2, 8]))
print(is_circle_collision([0,0, 2], [10,10, 5]))
True
False
#112-compute the digit distance between two integers
n1=123
n2=256

def digit_distance_nums(n1,n2):
    return sum(map(int,str(abs(n1-n2))))

print(digit_distance_nums(123, 256))
print(digit_distance_nums(23, 56))
print(digit_distance_nums(1, 2))
print(digit_distance_nums(24232, 45645))
7
6
1
11
#113-reverse all the words which have even length
s="The quick brown fox jumps over the lazy dog"
def reverse_len(txt):
    return ' '.join(i[::-1] if not len(i)%2 else i for i in txt.split())
print(reverse_len(s))
The quick brown fox jumps revo the yzal dog
#114-print letters from the English alphabet from a-z and A-Z.
import string
print("alphabet from a-z")
for letter in string.ascii_lowercase:
    print(letter,end=" ")
print("\n")
print("alphabet from A-Z")
for letter in string.ascii_uppercase:
    print(letter,end=" ")
alphabet from a-z
a b c d e f g h i j k l m n o p q r s t u v w x y z 

alphabet from A-Z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 
#115-generate and prints a list of numbers from 1 to 10
int_arr=[]
str_arr=[]
for i in range(1,11):
    int_arr.append(i)
    str_arr.append(str(i))
print(int_arr)
print(str_arr)
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']
nums = range(1,10)
print(list(nums))
print(list(map(str, nums)))
[1, 2, 3, 4, 5, 6, 7, 8, 9]
['1', '2', '3', '4', '5', '6', '7', '8', '9']
#116-identify nonprime numbers between 1 to 100 (integers). Print the nonprime numbers
non_prime_arr=[]
j=2
while j<=100:
    for i in range(2,11):
        if j%i==0 and i!=j:
            non_prime_arr.append(j)
            break
    j+=1
print(non_prime_arr)      
[4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 62, 63, 64, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100]
#117-Python program to make a request to a web page, 
#and test the status code, also display the html code of the specified web page
import requests
url = 'http://www.example.com/'
headers = {'User-Agent': 'Mozilla/5.0 (Macintosh) Gecko/20100101 Firefox/38.0'}
request = requests.get(url, headers=headers)
print("Web page status: ", request)
print("\nHTML code of the above web page:")
if request.ok:
    print(request.text)
Web page status:  <Response [200]>

HTML code of the above web page:
<!doctype html>
<html>
<head>
    <title>Example Domain</title>

    <meta charset="utf-8" />
    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style type="text/css">
    body {
        background-color: #f0f0f2;
        margin: 0;
        padding: 0;
        font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;
        
    }
    div {
        width: 600px;
        margin: 5em auto;
        padding: 2em;
        background-color: #fdfdff;
        border-radius: 0.5em;
        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);
    }
    a:link, a:visited {
        color: #38488f;
        text-decoration: none;
    }
    @media (max-width: 700px) {
        div {
            margin: 0 auto;
            width: auto;
        }
    }
    </style>    
</head>

<body>
<div>
    <h1>Example Domain</h1>
    <p>This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.</p>
    <p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>

#118-In multiprocessing, processes are spawned by creating a Process object. 
#Write a Python program to show the individual process IDs (parent process, process id etc.) involved

from multiprocessing import Process
import os
def info(title):
    print(title)
    print('module name:', __name__)
    print('parent process:', os.getppid())
    print('process id:', os.getpid())
def f(name):
    info('function f')
    print('hello', name)
if __name__ == '__main__':
    info('Main line')
    p = Process(target=f, args=('bob',))
    p.start()
    p.join()
Main line
module name: __main__
parent process: 11744
process id: 15020
#Date-8/28/22
#119- check if two given numbers are Co Prime or not
import math
def co_prime(n1,n2):
    n1_factors=set()
    n2_factors=set()
    i=1
    
    for j in range(2,n1+1):
        if n1%j==0:
            #print(i, j)
            n1_factors.add(j)
            
    for j in range(2,n2+1):
        if n2%j==0:
            #print(i, j)
            n2_factors.add(j)
    print(n1_factors, n2_factors)
    
    if len(n1_factors.intersection(n2_factors))>0:
        return False
    else:
        return   True
    
print(co_prime(17,14))
    
{17} {2, 14, 7}
True
def gcd(p,q):
    while q!=0:
        p,q=q,p%q
        #print(p,q)
    return p

def is_coprime(x,y):
    return gcd(x,y)==1

print(is_coprime(17, 13))
print(is_coprime(17, 21))
True
True
#120-program to calculate Euclid's totient function of a given integer.(number of coprime <n)
def phi(n):
    result=n
    
    # Consider all prime factors of n and subtract their multiples from result
    p=2
    while(p*p<n):
        # Check if p is a prime factor.
        if n%p==0:
            while (n%p==0):
                n=int(n/p)
            result-=int(result/p)
            #print(n)
        p+=1
        
    if(n>1):
        result-=int(result/n)
        
    return result

for n in range(1, 11):
    print("phi(",n,") =", phi(n))  
phi( 1 ) = 1
phi( 2 ) = 1
phi( 3 ) = 2
phi( 4 ) = 3
phi( 5 ) = 4
phi( 6 ) = 2
phi( 7 ) = 6
phi( 8 ) = 4
phi( 9 ) = 8
phi( 10 ) = 4
def gcd(p,q):
    while q!=0:
        p,q=q,p%q
    return p

def is_coprime(x,y):
    return gcd(x,y)==1

def phi_func(x):
    if x==1:
        return 1
    else:
        n=[y for y in range(1,x) if is_coprime(x,y)]
        return len(n)

print(phi_func(10))
print(phi_func(15))
print(phi_func(33))
4
8
20
#121-Python program to create a coded string from a given string, using specified formula
def test(str):
    return str.translate(str.maketrans('PTSHA','90168'))
str = "PHP"
print("Original string: ",str)
print("Coded string: ",test(str))
Original string:  PHP
Coded string:  969
#122-check if a given string contains only lowercase or uppercase characters
s='PHP'
print(s.islower())
print(s.isupper())
False
True
#123-remove the first and last elements from a given string
s='PHP'
print(s[1:-1])
H
#124-check if a given string contains two similar consecutive letters
s1='PHHP'
s2='PHP'

for i in range(len(s1)-1):
    if s1[i]==s1[i+1]:
        print("Yay")
Yay
def test(str1):
    return any(c1==c2 for c1, c2 in zip(str1,str1[1:]))
str = "PHP"
print("Original string: ",str)
print("Check for consecutive similar letters! ",test(str))
str = "PHHP"
print("\nOriginal string: ",str)
print("Check for consecutive similar letters! ",test(str))
Original string:  PHP
Check for consecutive similar letters!  False

Original string:  PHHP
Check for consecutive similar letters!  True
#125-program to reverse a given string in lower case
s='JavaScript'
print((s[::-1]).lower())
tpircsavaj
#126-convert the letters of a given string (same case-upper/lower) into alphabetical order.
s='javascript'
print(''.join(sorted(s)))
aacijprstv
#127-whether the average value of the elements of a given array of numbers is a whole number or not
arr=[1, 3, 5, 7, 9,3]
avg_val=sum(arr)%len(arr)
print(avg_val)

if (avg_val)==0:
    print("Whole Value")
else:
    print("Fractional Value")
4
Fractional Value
#128-remove all vowels from a given string
vowels_arr=['a','e','i','o','u']
res=""
s='JavaScript'

for i in s:
    if i in vowels_arr:
        continue
    else:
        res+=i
print(res)
JvScrpt
import re
def test(text):
    return re.sub(r'[aeiou]+', '', text, flags=re.IGNORECASE)
text = "Python";
print("Original string:",text)
print("After removing all the vowels from the said string: " + test(text))
Original string: Python
After removing all the vowels from the said string: Pythn
#129-index number of all lower case letters in a given string
s='JavaScript'
def test(text):
    return [x for x in range(len(text)) if text[x].islower()]
print(test(s))
[1, 2, 3, 5, 6, 7, 8, 9]
#130-check whether a given month and year contains a Monday 13th.
from datetime import date
def test(month, year): 
    return str(date(year,month,13).strftime("%A")=='Monday')

month = 11
year = 2022           
print("Month No.: ", month, " Year: ", year);
print("Check whether the said month and year contains a Monday 13th.: " + test(month, year))

month = 6
year = 2022            
print("\nMonth No.: ", month, " Year: ", year)
print("Check whether the said month and year contains a Monday 13th.: " + test(month, year))
Month No.:  11  Year:  2022
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_14780/3662364575.py in <module>
      6 year = 2022
      7 print("Month No.: ", month, " Year: ", year);
----> 8 print("Check whether the said month and year contains a Monday 13th.: " + test(month, year))
      9 
     10 month = 6

~\AppData\Local\Temp/ipykernel_14780/3662364575.py in test(month, year)
      2 from datetime import date
      3 def test(month, year):
----> 4     return str(date(year,month,13).strftime("%A")=='Monday')
      5 month = 11
      6 year = 2022

TypeError: 'str' object is not callable
#131-count number of zeros and ones in the binary representation of a given integer
def decBin(n):
    if n>=1:
        decBin(n//2)
        print(n%2, end='')
        
decBin(4)
100
def test(num):
    ones=bin(num).replace("0b","").count('1')
    zeros=bin(num).replace("0b","").count('0')
    return "Number of zeros: "+str(zeros)+ ", Number of ones: " + str(ones)    

n = 12
print("Original number: ",n)
print("Number of ones and zeros in the binary representation of the said number:")
print(test(n))
Original number:  12
Number of ones and zeros in the binary representation of the said number:
Number of zeros: 2, Number of ones: 2
#132-find all the factors of a given natural number.
import math
factor_arr=[]

def factor_num(n):
    for i in range(1,n+1):
        if n%i==0:
            factor_arr.append(i)        
    print(factor_arr)   
    
factor_num(100)
[1, 2, 4, 5, 10, 20, 25, 50, 100]
#use reduce
from functools import reduce
def test(n):
    return set(reduce(list.__add__, 
                ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))
n = 100
print("\nOriginal Number:",n)
print("Factors of the said number:",test(n))
Original Number: 100
Factors of the said number: {1, 2, 4, 100, 5, 10, 50, 20, 25}
#133-compute the sum of the negative and positive numbers of an array of integers and display the largest sum
arr=[0, 15, 16, 17, -14, -13, -12, -11, -10, 18, 19, 20]
pos_sum=0
neg_sum=0

for i in arr:
    if i>0:
        pos_sum+=i
    else:
        neg_sum+=i
        
if abs(pos_sum)>abs(neg_sum):
    print(pos_sum)
else:
    print(neg_sum)
105
def test(lst):
  pos_sum = 0
  neg_sum = 0
  for n in lst:
    if n > 0:
      pos_sum += n
    elif n < 0:
      neg_sum += n
  return max(pos_sum, neg_sum, key=abs)
#134-alternate the case of each letter in a given string and the first letter of the said string must be uppercase
s='Python Exercises'
res=""
for i in s:
    if i.islower():
        res+=i.upper()
    elif i.isupper():
        res+=i.lower()
print(res)
pYTHONeXERCISES
def test(txt):
    result_str = ""
    s = True
    #print(s)
    for i in txt:
        result_str += i.upper() if s else i.lower()
       # print(s,"out")
        if i.isalpha():  #boolean value manipulation
            s = not s
            #print(s,"in",i)
    return result_str
str1 = "PYThon Exercises";
print("Original string: ", str1);
print("After alternating the case of each letter of the said string:")
print(test(str1))
Original string:  PYThon Exercises
After alternating the case of each letter of the said string:
PyThOn ExErCiSeS
#135-get the Least Common Multiple (LCM) of more than two numbers. Take the numbers from a given list of positive integers
arr=[4,6,8]
from functools import reduce
def test(nums):
    return reduce(lambda x,y:lcm(x,y),nums)

def gcd(a,b):
    while b:
        a,b=b,a%b
    return a

def lcm(a,b):
    return a*b//gcd(a,b)

nums = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]
print("\nOriginal list elements:")
print(nums)
print("LCM of the numbers of the said array of positive integers: ", test(nums))
Original list elements:
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
LCM of the numbers of the said array of positive integers:  2520
#136-reverse all the words which have odd length
s='The quick brown fox jumps over the lazy dog'
res_s=""
for word in s.split():
    res=""
    if len(word)%2==0:
        res=word[::-1]
        res_s+=res+" "
    else:
        res_s+=word+" "
print(res_s)
#even_len_wrd=[word for word in s.split() if len(word)%2==0]
#print(even_len_wrd)
The quick brown fox jumps revo the yzal dog 
#137-find the longest common ending between two given strings.
s1='thisisatest'
s2='testing123testing'

def LCSubStr(X,Y,m,n):
    LCSuff=[[0 for k in range(n+1)]for l in range(m+1)]
    
    result=0
    
    for i in range(m+1):
        for j in range(n+1):
            if (i==0 or j==0):
                LCSuff[i][j]=0
            elif (X[i-1]==Y[j-1]):
                LCSuff[i][j]=LCSuff[i-1][j-1]+1
                #print(LCSuff)
                result=max(result,LCSuff[i][j])
                #print(result)
            else:
                LCSuff[i][j]=0
    return result
X = 'OldSite:GeeksforGeeks.org'
Y = 'NewSite:GeeksQuiz.com'
 
m = len(X)
n = len(Y)

print('Length of Longest Common Substring is',
      LCSubStr(X, Y, m, n))
Length of Longest Common Substring is 10
#138-reverse the binary representation of an given integer and convert the reversed binary number into an integer
n=13
bin_num=bin(n)[2:]
rev_bin_num=bin_num[::-1]

dec_num=int(rev_bin_num,2)

print(dec_num)
11
#139-closest palindrome number of a given integer
def test(n):
    x=n
    y=n
    while True:
        #print("x",str(x))
        #print("y",str(y))
        if str(x)==str(x)[::-1]:            
            return x
        x-=1
        if str(y)==str(y)[::-1]:           
            return y
        y+=1
    return int(bin(n)[::-1][:-2], 2)
n = 1234;
print("Original number: ", n);
print("Closest Palindrome number of the said number: ",test(n));
Original number:  1234
Closest Palindrome number of the said number:  1221
#140-convert all items in a given list to float values
arr=['0.49', '0.54', '0.54', '0.54', '0.54', '0.54', '0.55', '0.54', '0.54', '0.54', '0.55', '0.55', '0.55', '0.54', '0.55', '0.55', '0.54', '0.55', '0.55', '0.54']
res=[]
for i in arr:
    res.append(float(i))
print(res)
[0.49, 0.54, 0.54, 0.54, 0.54, 0.54, 0.55, 0.54, 0.54, 0.54, 0.55, 0.55, 0.55, 0.54, 0.55, 0.55, 0.54, 0.55, 0.55, 0.54]
#Date-8/29/22
#141- program to get the domain name using PTR DNS records from a given IP address
def get_domain_name(ip_address):
  import socket
  result=socket.gethostbyaddr(ip_address)
  return list(result)[0]
print("Domain name using PTR DNS:")
print(get_domain_name("8.8.8.8"))
Domain name using PTR DNS:
dns.google
#142-check if every consecutive sequence of zeroes is followed by a consecutive 
#sequence of ones of same length in a given string.

#n='000111'  #does not work for this case

n='01010101'
len_n=len(n)//2

print(n[:len_n],n[len_n:])
if (n[:len_n]==n[len_n:]):
    print("Follows rule")
else:
    print("Does not Follows rule")
0101 0101
Follows rule
#143-program to print Emojis using unicode characters or CLDR (Common Locale Data Repository ) short names
print("Smiling face with heart-eyes:")
print("\U0001F60D")
print("Unamused face:")
print("\U0001F612")
print("Beaming face with smiling eyes:")
print("\U0001F601")
print("Grinning face with sweat:")
print("\U0001F605")
print("Face with tears of joy:")
print("\U0001F602")
print("Slightly smiling face:")
print("\U0001F642")
print("Smiling face with halo:")
print("\U0001F607")
Smiling face with heart-eyes:
😍
Unamused face:
😒
Beaming face with smiling eyes:
😁
Grinning face with sweat:
😅
Face with tears of joy:
😂
Slightly smiling face:
🙂
Smiling face with halo:
😇
#144- convert integer to string
language = "Python"
version = 3.6
print('Language: ' + language + ',' + ' Version: ' + str(version))
Language: Python, Version: 3.6
#145-largest and smallest digit of a given number
def Largest_Smallest_digit(n):
   largest_digit = 0
   smallest_digit = 9
   while (n):
       digit = n % 10
       # largest digit
       largest_digit = max(digit, largest_digit)
       # smallest digit
       smallest_digit = min(digit, smallest_digit)
       n = n // 10
   return largest_digit, smallest_digit
n = 9387422
print("Original Number:", n)
result = Largest_Smallest_digit(n)
print("Largest Digit of the said number:", result[0])
print("Smallest Digit of the said number:", result[1])
Original Number: 9387422
Largest Digit of the said number: 9
Smallest Digit of the said number: 2
#146-Write a Python program to check whether the cube root of the first number is equal to the square root of the second number
import math
num=[27,4]
if (num[0])**(1/3)==math.sqrt(num[1]):
    print("yaa")
else:
    print("nope")
nope
#147-A Python list contains three positive integers. 
#Write a Python program to check whether the sum of the digits in each number is equal or not.
def test(nums):
    return nums[0] % 9 == nums[1] % 9 == nums[2] % 9 

nums = [13, 4, 22]
print("Original list of numbers:", nums)
print("Check sum of the digits in each number of the said list is equal or not!")
print(test(nums))
Original list of numbers: [13, 4, 22]
Check sum of the digits in each number of the said list is equal or not!
True
#148- Python program to count the numbers that are greater than the previous number on the list
arr=[1, 4, 7, 9, 11, 5]
n=4
cnt=0
for i in arr:
    if i>n:
        cnt+=1
print(cnt)
4
#149-program that takes a positive integer and create an N x N square filled with the integer N. Display the N x N square
def test(N):
    result = []
    for i in range(N):
        result.append([N]*N)
    return result

N = int(input("Input an integer : "))
print(test(N))
Input an integer : 5
[[5, 5, 5, 5, 5], [5, 5, 5, 5, 5], [5, 5, 5, 5, 5], [5, 5, 5, 5, 5], [5, 5, 5, 5, 5]]
#150-takes a positive integer and calculate the cube root of the number until the number is less than three. Count the number of steps to complete the said process
def test(n):
	ctr = 0
	while n >= 3:
	  n =  n ** (1./3.)
	  ctr = ctr + 1
	return 'Not a positive number!' if n < 0 else ctr

n= int(input("Input a positive integer:"))
print(test(n))
Input a positive integer:10000
2
#137-find the longest common ending between two given strings.
def test(str1,str2):
    for i in range(len(str2)):
        while str2[i:] in str1: #and str2[-1]==str1[-1]:
            return str2[i:]
    return ""

str1 = "running";
str2 = "ruminating";
print("Original strings: " + str1 + "  " + str2);
print("Common ending between said two strings: " + test(str1, str2));
str1 = "thisisatest";
str2 = "testing123testing";
print("\nOriginal strings: " + str1 + "  " + str2);
print("Common ending between said two strings: " + test(str1, str2));
Original strings: running  ruminating
Common ending between said two strings: ing

Original strings: thisisatest  testing123testing
Common ending between said two strings: 
#139-
def isPalindrome(n):   #function to check palindrome
    for i in range(len(n)//2):
        if(n[i]!=n[-1-i]):
            return False
    return True

def convertNumIntoString(num):
    Snum=str(num)
    return Snum

def closestPalindrome(num):
    # Case1 : largest palindrome number which is smaller than given number
    RPNum=num-1
    while(not isPalindrome(convertNumIntoString(abs(RPNum)))):
        RPNum-=1
    
    # Case2 : smallest palindrome number which is greater than given number
    SPNum=num+1
    while(not isPalindrome(convertNumIntoString(abs(SPNum)))):
        SPNum+=1
    
    # Check absolute difference
    if (abs(num - RPNum) > abs(num - SPNum)):
        return SPNum
    else:
        return RPNum
    
num=1234
print(closestPalindrome(num))
1221
#142-
def test(str1):
    while '01' in str1:
        str1=str1.replace('01','')
    return len(str1)==0
str1 = "000111"
print("Original sequence:",str1)
print("Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:")
print(test(str1))
Original sequence: 000111
Check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones in the said string:
True
 