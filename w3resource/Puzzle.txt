Loading [MathJax]/extensions/Safe.js
#Date-8/29/22
#1-find a list of integers with exactly two occurrences of nineteen and at least three occurrences of five
lst=[19, 19, 15, 5, 3, 5, 5, 2]

def test(lst):
    return lst.count(19)==2 and lst.count(5)>=3
print(test(lst))
True
#2-Return true if the length of the list is 8 and fifth element occurs thrice in the said list
lst=[19, 19, 15, 5, 5, 5,5, 1, 2]
def test(lst):
    return len(lst)==8 and lst.count(lst[4])==3
print(test(lst))
False
#3-an integer test whether an integer greater than 4^4 and which is 4 mod 34
def test(n):
    return n>4**4 and n%34==4

print(test(922))
True
#4-The first pile has n stones. If n is even, then all piles have an even number of stones. 
#If n is odd, all piles have an odd number of stones. Each pile must more stones than the previous 
#pile but as few as possible. Write a Python program to find the number of stones in each pile

n=17
piles=[]
for i in range(1,n+1):
    piles.append(n)
    n+=2
print(piles)
[17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]
def test(n):
    return [n+2*i for i in range(n)]
n = 10
print("Number of piles:",n)
print("Number of stones in each pile:")
print(test(n)) 
Number of piles: 10
Number of stones in each pile:
[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]
#5-check the nth-1 string is a proper substring of nth string in a given list of strings
def test(str1):
    return str1[len(str1)-2] in str1[len(str1)-1] and str1[len(str1)-2] != str1[len(str1)-1]

str11 = ["a","abb","sfs", "oo", "de", "sfde"]
print("Original list:")
print(str11)
print("Check the nth-1 string is a proper substring of nth string of the said list of strings:")
print(test(str11))
Original list:
['a', 'abb', 'sfs', 'oo', 'de', 'sfde']
Check the nth-1 string is a proper substring of nth string of the said list of strings:
True
#6-test a list of one hundred integers between 0 and 999, which all differ by ten from one another
num=[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 
     150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 
     280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 
     410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 
     540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 
     670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 
     800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 
     930, 940, 950, 960, 970, 980, 990]
def test(lst):
    for i in range(len(lst)-1):
        if lst[i+1]==lst[i]+10:
            #print(lst[i+1],lst[i])
            #print("\n")
            continue
        else:
            #print(lst[i+1],lst[i])
            return False
    return True
test(num)
True
def test(li):
    return all(i in range(1000) and abs(i - j) >= 10 for i in li for j in li if i != j) and len(set(li)) == 100
nums = list(range(0, 1000, 10))
print("Original list:")
print(nums)
print("Check whether the said list contains one hundred integers between 0 and 999 which all differ by ten from one another:")
print(test(nums))
Original list:
[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, 900, 910, 920, 930, 940, 950, 960, 970, 980, 990]
Check whether the said list contains one hundred integers between 0 and 999 which all differ by ten from one another:
True
#7-check a given list of integers where the sum of the first i integers is i
lst=[1, 1, 1, 1, 1, 1]

if sum(lst)==len(lst):
    print("yay")
else:
    print("Nope")
yay
def test(num):
    return all([sum(nums[:i])==i for i in range(len(nums))])
nums = [0,1,2,3,4,5]
print("Original list:")
print(nums)
print("Check the said list, where the sum of the first i integers is i:")
print(test(nums))
Original list:
[0, 1, 2, 3, 4, 5]
Check the said list, where the sum of the first i integers is i:
False
#8-split a string of words separated by commas and spaces into two lists, words and separators
s='W3resource Python, Exercises'
print(s.split(','))
['W3resource Python', ' Exercises']
def test(string):
    import re
    merged=re.split(r"([ ,]+)",string)
    return [merged[::2],merged[1::2]]
s = "W3resource Python, Exercises."
print("Original string:",s)
print("Split the said string into 2 lists: words and separators:")
print(test(s))
Original string: W3resource Python, Exercises.
Split the said string into 2 lists: words and separators:
[['W3resource', 'Python', 'Exercises.'], [' ', ', ']]
#9-find list integers containing exactly four distinct values, 
#such that no integer repeats twice consecutively among the first twenty entries
lst=[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3,3, 4, 1, 2, 3, 4]
for i in range(len(lst)-1):
    if lst[i]==lst[i+1]:
        print("nope")
        break
    
nope
def test(nums):
    return all([nums[i] != nums[i + 1] for i in range(len(nums)-1)]) and len(set(nums)) == 4
nums = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
print("Original list:")
print(nums)
print("Check said list of integers containing exactly four distinct values, such that no integer repeats  twice consecutively:")
print(test(nums))
Original list:
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]
Check said list of integers containing exactly four distinct values, such that no integer repeats  twice consecutively:
True
#10-string consisting of whitespace and groups of matched parentheses,
#write a Python program to split it into groups of perfectly matched parentheses without any whitespace
input1='( ()) ((()()())) (()) ()'
lst=[]
s=""
for i in input1:
    #print(i)
    if i==' ':
        continue
    else:
        lst.append(i)
        s+=i
print(input1)
print(lst)
print(s)
( ()) ((()()())) (()) ()
['(', '(', ')', ')', '(', '(', '(', ')', '(', ')', '(', ')', ')', ')', '(', '(', ')', ')', '(', ')']
(())((()()()))(())()
def test(combined):
    ls=[]
    s2=""
    for s in combined.replace(' ',''):
        s2+=s
        if s2.count("(")==s2.count(")"):
            ls.append(s2)
            s2=""
    return ls
combined = '( ()) ((()()())) (()) ('
print("Parentheses string:")
print(combined)
print("Separate parentheses groups of the said string:")
print(test(combined))
Parentheses string:
( ()) ((()()())) (()) (
Separate parentheses groups of the said string:
['(())', '((()()()))', '(())']
#11-find the indexes of numbers of a given list below a given threshold.
n=100
lst=[0, 12, 45, 3, 4923, 322, 105, 29, 15, 39, 55]
res=[]
for i in lst:
    if i<n:
        res.append(lst.index(i))
print(res)
[0, 1, 2, 3, 7, 8, 9, 10]
def test(nums,n):
    return [i for i,n in enumerate(nums) if n<thresh]

nums=[0, 12, 45, 3, 4923, 322, 105, 29, 15, 39, 55]
thresh = 100
print("Original list:")
print(nums)
print("Threshold: ",thresh)
print("Check the indexes of numbers of the said list below the given threshold:")
print(test(nums, thresh))
Original list:
[0, 12, 45, 3, 4923, 322, 105, 29, 15, 39, 55]
Threshold:  100
Check the indexes of numbers of the said list below the given threshold:
[0, 1, 2, 3, 7, 8, 9, 10]
#12-check whether the given strings are palindromes or not.
lst=['palindrome', 'madamimadam', '', 'foo', 'eyes']
pal=[]
for i in lst:
    if i[::-1]==i[0:]:
        pal.append(i)
print(pal)
['madamimadam', '']
#13-program to find the strings in a given list, starting with a given prefix
s='ca'
lst=['cat', 'car', 'fear', 'center']
pref=[]

for i in lst:
    if s==i[:len(s)]:
        pref.append(i)
print(pref)
['cat', 'car']
def test(strs, prefix):
     return [s for s in strs if s.startswith(prefix)]
strs =  ['cat', 'car', 'fear', 'center']
prefix = "ca"
print("Original strings:")
print(strs)
print("Starting prefix:", prefix)
print("Strings in the said list starting with a given prefix:")
print(test(strs, prefix))
Original strings:
['cat', 'car', 'fear', 'center']
Starting prefix: ca
Strings in the said list starting with a given prefix:
['cat', 'car']
#14- find the lengths of a given list of non-empty strings
lst=['cat', 'car', 'fear', 'center']
res=[]
for i in lst:
    res.append(len(i))
print(res)
[3, 3, 4, 6]
#15-find the longest string of a given list of strings
lst=['cat', 'car', 'feasdandosar', 'center']
print(max(lst,key=len))
feasdandosar
#16- find the strings in a given list containing a given substring.
lst=['cat', 'car', 'fecar', 'center']
sub='ca'
res=[]

for i in lst:
    if sub in i:
        res.append(i)
print(res)
['cat', 'car', 'fecar']
#Date-8/30/22
#17-create string consisting of the non-negative integers up to n inclusive
n=10
for i in range(n+1):
    print(str(i),end=" ")
0 1 2 3 4 5 6 7 8 9 10 
#18-Write a Python program to find the indices of all occurrences of target in the uneven
def test(M,T):
    return [[i,j]for i, row in enumerate(M)for j,n in enumerate(row) if n==T]

M = [[1, 3, 2, 32, 19], [19, 2, 48, 19], [], [9, 35, 4], [3, 19]]
T = 19
print("Matrix:")
print(M)
print("Target value:")
print(T)
print("Indices of all occurrences of the target value in the said uneven matrix:")
print(test(M,T))
Matrix:
[[1, 3, 2, 32, 19], [19, 2, 48, 19], [], [9, 35, 4], [3, 19]]
Target value:
19
Indices of all occurrences of the target value in the said uneven matrix:
[[0, 4], [1, 0], [1, 3], [4, 1]]
#19-split a given string (s) into strings if there is a space in the string, 
#otherwise split on commas if there is a comma, otherwise return the list of lowercase 
#letters with odd order (order of a = 0, b = 1, etc.)
s1='a b c d'  #['a', 'b', 'c', 'd']
s2='a,b,c,d'  #['a', 'b', 'c', 'd']
s3='abcd'     #['b', 'd']
res=''
for i in s1:
    i.split(" ")
    if i==' ':
        i=i.replace(' ',",")
    res+=i
print([res])
['a b c d']
#Better solution
def test(s):
    if " " in s:
        return s.split(" ")
    if "," in s:
        return s.split(",")
    return [c for c in s if c.islower()and ord(c)%2==0]
strs = "a b c d"
print("Original string:")
print(strs)
print("Split the said string into strings if there is a space in the string, \notherwise split on commas if there is a comma, \notherwise return the list of lowercase letters with odd order:")
print(test(strs))
strs = "a,b,c,d"
print("\nOriginal string:")
print(strs)
print("Split the said string into strings if there is a space in the string, \notherwise split on commas if there is a comma, \notherwise return the list of lowercase letters with odd order:")
print(test(strs))
strs = "abcd"
print("\nOriginal string:")
print(strs)
print("Split the said string into strings if there is a space in the string, \notherwise split on commas if there is a comma, \notherwise return the list of lowercase letters with odd order:")
print(test(strs))
Original string:
a b c d
Split the said string into strings if there is a space in the string, 
otherwise split on commas if there is a comma, 
otherwise return the list of lowercase letters with odd order:
['a', 'b', 'c', 'd']

Original string:
a,b,c,d
Split the said string into strings if there is a space in the string, 
otherwise split on commas if there is a comma, 
otherwise return the list of lowercase letters with odd order:
['a', 'b', 'c', 'd']

Original string:
abcd
Split the said string into strings if there is a space in the string, 
otherwise split on commas if there is a comma, 
otherwise return the list of lowercase letters with odd order:
['b', 'd']
#20-determine the direction ('increasing' or 'decreasing') of monotonic sequence numbers
l2=[1, 2, 3, 4, 5, 6]
l1=[6, 5, 4, 3, 2, 1]

if sorted(l1)==l1:
    print("Increasing Order")
elif sorted(l1,reverse=True)==l1:
    print("Decreasing Order")
else:
    print("Not in order")
Decreasing Order
def test(nums):
    return "Increasing" if all(nums[i]<nums[i+1]for i in range(len(nums)-1))\
            else "Decreasing" if all(num[i+1]<num[i] for i in range(len(num)-1))\
            else "Not a monotonic sequence!"

nums = [1,2,3,4,5,6]
print("Original list:")
print(nums)
print("Check the direction ('increasing' or 'decreasing') of the said list:")
print(test(nums))
Original list:
[1, 2, 3, 4, 5, 6]
Check the direction ('increasing' or 'decreasing') of the said list:
Increasing
#21-check, for each string in a given list, whether the last character is an isolated letter or not.
lst=['ca t', 'car', 'fea r', 'cente r']
res=[]
for i in lst:
    if i[-2]==' ':
        res.append("True")
    else:
        res.append("False")
print(res)
['True', 'False', 'True', 'True']
def test(strs):
    return [len(s.split(" ")[-1])==1 for s in strs]

strs =  ['cat', 'car', 'fear', 'center']
print("Original strings:")
print(strs)
print("Check, for each string in the said list, whether the last character is an isolated letter:")
print(test(strs))
Original strings:
['cat', 'car', 'fear', 'center']
Check, for each string in the said list, whether the last character is an isolated letter:
[False, False, False, False]
#22-compute the sum of the ASCII values of the upper-case characters in a given string
s='PytHon ExerciSEs'
sums=0
for i in s:
    if i.isupper():
        sums+=ord(i)
print(sums)
373
#using filter and map
def test(strs):
    return sum(map(ord,filter(str.isupper,strs)))

strs =  "PytHon ExerciSEs"
print("Original strings:")
print(strs)
print("Sum of the ASCII values of the upper-case characters in the said string:")
print(test(strs))
Original strings:
PytHon ExerciSEs
Sum of the ASCII values of the upper-case characters in the said string:
373
#23-find the indices for which the numbers in the list drops
lst=[0, -1, 3, 8, 5, 9, 8, 14, 2, 4, 3, -10, 10, 17, 41, 22, -4, -4, -15, 0]
res=[]

for i in range(len(lst)-1):
    if lst[i]>lst[i+1]:
        res.append(i+1)
print(res)
[1, 4, 6, 8, 10, 11, 15, 16, 18]
#24-create a list whose ith element is the maximum of the first i elements from a input list
lst=[0, -1, 3, 8, 5, 9, 8, 14, 2, 4, 3, -10, 10, 17, 41, 22, -4, -4, -15, 0]
for i in range(len(lst)-1):
    if lst[i]>lst[i+1]:
        lst[i+1]=lst[i]
print(lst)
[0, 0, 3, 8, 8, 9, 9, 14, 14, 14, 14, 14, 14, 17, 41, 41, 41, 41, 41, 41]
def test(nums):
    return [max(nums[:i])for i in range(1, len(nums)+1)]
nums = [0, -1, 3, 8, 5, 9, 8, 14, 2, 4, 3, -10, 10, 17, 41, 22, -4, -4, -15, 0]
print("Original list:")
print(nums)
print("List whose ith element is the maximum of the first i elements of the said list:")
print(test(nums))
Original list:
[0, -1, 3, 8, 5, 9, 8, 14, 2, 4, 3, -10, 10, 17, 41, 22, -4, -4, -15, 0]
List whose ith element is the maximum of the first i elements of the said list:
[0, 0, 3, 8, 8, 9, 9, 14, 14, 14, 14, 14, 14, 17, 41, 41, 41, 41, 41, 41]
#25-find the XOR of two given strings interpreted as binary numbers
def test(nums):
    return bin(int(nums[0],2)^int(nums[1],2))
nums =  ["0001", "1011"]
print("Original strings:")
print(nums)
print("XOR of two said strings interpreted as binary numbers:")
print(test(nums))
Original strings:
['0001', '1011']
XOR of two said strings interpreted as binary numbers:
0b1010
#Date-8/31/22
#26-find the largest number where commas or periods are decimal points
lst=['100', '102,1', '101.1']
def test(str_num):
    return max(float(s.replace(",","."))for s in str_num)
print(test(lst))
102.1
#27-find x that minimizes mean squared deviation from a given a list of numbers
lst=[4, -5, 17, -9, 14, 108, -9]
def test(nums):
    return sum(nums) / len(nums) 
nums = [4, -5, 17, -9, 14, 108, -9]
print("Original list:")
print(nums)
print("Minimizes mean squared deviation from the said list of numbers:")
print(test(nums))
Original list:
[4, -5, 17, -9, 14, 108, -9]
Minimizes mean squared deviation from the said list of numbers:
17.142857142857142
#28-select a string from a given list of strings with the most unique characters.
lst=['cat', 'catatatatctsa', 'abcdefhijklmnop', '124259239185125', '', 'foo', 'unique']
#solution1-create set of chars
#solution2-ordereddict
#solution3-groupby
max_len=0
max_uniq_char=""
#solution1-create set of chars
for i in lst:
    if len(set(i))>max_len:
        max_len=len(set(i))
        max_uniq_char=i
print(max_uniq_char)     
    
abcdefhijklmnop
#solution2-ordereddict
from collections import OrderedDict
lst=['cat', 'catatatatctsa', 'abcdefhijklmnop', '124259239185125', '', 'foo', 'unique']
#import OrderedDict
#for i in 
dct=''.join(OrderedDict.fromkeys("catatatatctsa").keys())
print(dct)
cats
from itertools import groupby
''.join(k for k, g in groupby(sorted("aaabcabccd")))
'abcd'
def test(strs):
    return max(strs,key=lambda x:len(set(x)))
strs = ['cat', 'catatatatctsa', 'abcdefhijklmnop', '124259239185125', '', 'foo', 'unique']
print("Original list:")
print(strs)
print("Select a string from the said list of strings with the most unique characters:")
print(test(strs))
Original list:
['cat', 'catatatatctsa', 'abcdefhijklmnop', '124259239185125', '', 'foo', 'unique']
Select a string from the said list of strings with the most unique characters:
abcdefhijklmnop
#29-find the indices of two numbers that sum to 0 in a given list of numbers.
#solution1-using for loop
#solution2-
lst=[1, -4, 6,7, 4,8]
def test(lst):
    for i in lst:
        if -i in lst:
            return (lst.index(i),"and",lst.index(-i))
            #break
test(lst)
(1, 'and', 4)
#30-find the list of strings that has fewer total characters (including repetitions)
#q1-are we also counting spaces?
l=[['this', 'list', 'is', 'narrow'], ['I', 'am', 'shorter but wider']]
#print(len(l[0]),len(l[1]))
#print(min(l,key=len))

def test(strs):
    return min(strs,key=lambda x:sum(len(i) for i in x))

print("Original List:")
print(l) 
print("\nFind the given list of strings that has fewer total characters:")
print(test(l))
Original List:
[['this', 'list', 'is', 'narrow'], ['I', 'am', 'shorter but wider']]

Find the given list of strings that has fewer total characters:
['this', 'list', 'is', 'narrow']
#31-find the coordinates of a triangle with the given side lengths
tri_len=[3, 4, 5]
def test(sides):
    a,b,c=sorted(sides)
    s=sum(sides)/2
    area=(s*(s-a)*(s-b)*(s-c))**0.5 #Heron's formula
    y=2*area/a #height
    x=(c**2-y**2)**0.5
    return [[0.0, 0.0], [a, 0.0], [x, y]]
sides = [3, 4, 5]
print("Sides of the triangle:",sides)
print("Coordinates of a triangle with the said side lengths:")
print(test(sides))
Sides of the triangle: [3, 4, 5]
Coordinates of a triangle with the said side lengths:
[[0.0, 0.0], [3, 0.0], [3.0, 4.0]]
#32-rescale and shift numbers of a given list, so that they cover the range [0, 1]
l=[18.5, 17.0, 18.0, 19.0, 18.0]

#https://stackoverflow.com/questions/929103/convert-a-number-range-to-another-range-maintaining-ratio
def test(nums):
    a=min(nums)
    b=max(nums)
    if b-a==0:
        return [0.0]+[1.0]*(len(nums)-1)
    
    for i in range(len(nums)):
        nums[i]=(nums[i]-a)/(b-a)
    return nums

nums = [18.5, 17.0, 18.0, 19.0, 18.0]
print("Original list:")
print(nums)
print("Rescale and shift the numbers of the said list so that they cover the range [0, 1]:")
print(test(nums))
Original list:
[18.5, 17.0, 18.0, 19.0, 18.0]
Rescale and shift the numbers of the said list so that they cover the range [0, 1]:
[0.75, 0.0, 0.5, 1.0, 0.5]
#33-find the positions of all uppercase vowels (not counting Y) in even indices of a given string
vowels=['a','e','i','o','u']
s='AEIOUYW'
res=[]
for i in s:
    if i.lower() in vowels and s.index(i)%2==0:
        res.append(s.index(i))
print(res)
[0, 2, 4]
def test(strs):
    return [i for i, c in enumerate(strs) if i % 2 == 0 and c in "AEIOU"] 
strs = "w3rEsOUrcE "
print("Original List:",strs)
print("Positions of all uppercase vowels (not counting Y) in even indices:")
print(test(strs))
Original List: w3rEsOUrcE 
Positions of all uppercase vowels (not counting Y) in even indices:
[6]
#Date-09/02/22
#34-find the sum of the numbers of a given list among the first k with more than 2 digits
l=[4, 5, 17, 9, 14, 108, -9, 12, 76]
k=4
res=[l[i] for i in range(len(l)) if (len(str(l[i]))>=3 and i<=k)]
print(res)
[]
def test(nums, k):
    s = 0
    for i in range(len(nums))[:k]:
        if len(str(abs(nums[i])))>2:
            s = s + nums[i]
    return s

nums = [4, 5, 17, 9, 14, 108, -9, 12 ,76]
print("Original list:",nums)
K = 4
print("Value of K:",K)
print("sum of the numbers among the first k with more than 2 digits")
print(test(nums, K))
nums = [4, 5, 17, 9, 14, 108, -9, 12 ,76]
print("\nOriginal list:",nums)
K = 6
print("Value of K:",K)
print("sum of the numbers among the first k with more than 2 digits")
print(test(nums, K))
nums = [114, 215, -117, 119, 14, 108, -9, 12 ,76]
print("\nOriginal list:",nums)
K = 5
print("Value of K:",K)
print("sum of the numbers among the first k with more than 2 digits")
print(test(nums, K)) 
print("\nOriginal list:",nums)
K = 1
print("Value of K:",K)
print("sum of the numbers among the first k with more than 2 digits")
print(test(nums, K)) 
Original list: [4, 5, 17, 9, 14, 108, -9, 12, 76]
Value of K: 4
sum of the numbers among the first k with more than 2 digits
0

Original list: [4, 5, 17, 9, 14, 108, -9, 12, 76]
Value of K: 6
sum of the numbers among the first k with more than 2 digits
108

Original list: [114, 215, -117, 119, 14, 108, -9, 12, 76]
Value of K: 5
sum of the numbers among the first k with more than 2 digits
331

Original list: [114, 215, -117, 119, 14, 108, -9, 12, 76]
Value of K: 1
sum of the numbers among the first k with more than 2 digits
114
#35-compute the product of the odd digits in a given number, or 0 if there aren't any
n=123456789
prod=1
for i in str(n):
    if int(i)%2==1:
        prod*=int(i)
print(prod)
945
#36-find the largest k numbers from a given list of numbers
l=[1, 2, 3, 4, 5, 5, 3, 6, 2]
k=3
print(sorted(l))
lst=sorted(l)
#print((lst[len(l)-k:]))
print((lst[-k:]))
[1, 2, 2, 3, 3, 4, 5, 5, 6]
[5, 5, 6]
def test(nums, k):
    if k == 0:
        return []
    return sorted(nums, reverse=True)[:k]
nums = [1, 2, 3, 4, 5, 5, 3, 6, 2] 
print("Original list of numbers:",nums)
k = 1
print("Largest", k, "numbers from the said list:")
print(test(nums, k))
Original list of numbers: [1, 2, 3, 4, 5, 5, 3, 6, 2]
Largest 1 numbers from the said list:
[6]
#37-find the largest integer divisor of a number n that is less than n
import math
n=100
res=[]
sorted_res=[]
for i in range(1,int(math.sqrt(n))):
    if n%i==0:
        res.append(i)
        res.append(n/i)
sorted_res=sorted(res)
print(sorted_res,sorted_res[-2])
[1, 2, 4, 5, 20.0, 25.0, 50.0, 100.0] 50.0
def test(n):
    return next(d for d in range(n-1,0,-1)if n%d==0)
n = 15
print("Original number:",n)
print("Largest integer divisor of a number n that is less than n:")
print(test(n))
Original number: 15
Largest integer divisor of a number n that is less than n:
5
#38-sort the numbers of a given list by the sum of their digits.
#using dictionary
from operator import itemgetter
l=[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
res={}
sums=0
for i in l:
    for n in str(i):
        sums+=int(n)
    res[i]=sums
    sums=0
print(res)
sorted_res=sorted(res,key=lambda i:res[i])
#sorted_res=sorted(res.items(),key=itemgetter(1))
print((sorted_res))
{10: 1, 11: 2, 12: 3, 13: 4, 14: 5, 15: 6, 16: 7, 17: 8, 18: 9, 19: 10, 20: 2}
[10, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19]
def test(nums):
    return sorted(nums,key=lambda n:sum(int(c)for c in str(n)if c!='-'))
nums = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
print("Original list of numbers:",nums)
print("Sort the numbers of the said list by the sum of their digits:")
print(test(nums))
Original list of numbers: [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
Sort the numbers of the said list by the sum of their digits:
[10, 11, 20, 12, 13, 14, 15, 16, 17, 18, 19]
#39-determine which triples sum to zero from a given list of lists.
l=[[1, 2, -3], [-4, 0, 4], [0, 1, -5], [1, 1, 1], [-2, 4, -1]]
res=[print("True") if sum(i)==0 else print("False") for i in l ]
True
True
False
False
False
def test(nums):
    return [sum(t)==0 for t in nums]
 
nums = [[1343532, -2920635, 332], [-27, 18, 9], [4, 0, -4], [2, 2, 2], [-20, 16, 4]]
print("Original list of lists:",nums)
print("Determine which triples sum to zero:")
print(test(nums))
Original list of lists: [[1343532, -2920635, 332], [-27, 18, 9], [4, 0, -4], [2, 2, 2], [-20, 16, 4]]
Determine which triples sum to zero:
[False, True, True, False, True]
#40- find string s that, when case is flipped gives target where vowels are replaced by chars two later
#quest: is it case sensetive? is y a vowel? 
vowels=['a','e','i','o','u']
chars=['c','g','j','q','w']
dct={'a':'c','e':'g','i':'j','o':'q','u':'w'}
s="Python"
res=""
#res[0]=s[0].lower()
for i in s:
    if i in dct.keys():
        #print(i)
        res+=dct[i]
    else:
        res+=i
print(res.swapcase())
    
pYTHQN
#usoing ord() method and translate
def test(strs):
    return strs.translate({ord(c):ord(c)+2 for c in "aeiouAEIOU"}).swapcase()
strs = "Python" 
print("Original string:",strs)
print("Find string s that, when case is flipped gives target where vowels are replaced by chars two later:")
print(test(strs))
Original string: Python
Find string s that, when case is flipped gives target where vowels are replaced by chars two later:
pYTHQN
#41- sort numbers based on strings
dct={'one':1,'two':2,'three':3,'four':4,'five':5,'six':6,'seven':7,'eight':8,'nine':9,'zero':0}
l="six one four three two nine eight"
lst=l.split()
#print(sorted(lst))
res=sorted(lst,key=lambda i:dct[i])
print(res)    
['one', 'two', 'three', 'four', 'six', 'eight', 'nine']
def test(strs):
    return ' '.join([x for x in 'one two three four five six seven eight nine'.split() if x in strs])
strs = "six one four one two three"
print("Original string:",strs)
print("Sort numbers based on said strings:")
print(test(strs))
Original string: six one four one two three
Sort numbers based on said strings:
one two three four six
#42-find the set of distinct characters in a given string, ignoring case
s='HElLO'
res=[]
for i in s:
    if i.lower() not in res:
        res.append(i)
print(res)
['H', 'E', 'l', 'O']
#creating sets
def test(strs):
    return [*set(strs.lower())]
 
strs = "HELLO"
print("Original string:",strs)
print("Set of distinct characters in the said string, ignoring case:")
print(test(strs))
Original string: HELLO
Set of distinct characters in the said string, ignoring case:
['l', 'h', 'e', 'o']
#43- find all words in a given string with n consonants
#find word
#split method
vowels=['a','e','i','o','u']
s="this is our timer"
k=3
res=[]
cnt=0
lst=s.split()
for i in lst:
    for j in i:
        if j not in vowels:
            cnt+=1
    if cnt==k:
        res.append(i)
    cnt=0
print(res)
['this', 'timer']
def test(strs,n):
    return [w for w in strs.split() if sum([c not in "aeiou" for c in w.lower()])==n]
strs = "this is our time"
print("Original string:",strs)
n = 3
print("Number of consonants:",n)
print("Words in the said string with",n,"consonants:")
print(test(strs, n))
Original string: this is our time
Number of consonants: 3
Words in the said string with 3 consonants:
['this']
#44- find which characters of a hexadecimal number correspond to prime numbers
prime=[2,3,5,7,11,13,17]
n='123ABCD'
res=[]
for i in n:
    if int(i,16) in prime:
        res.append(i)
print(res)
['2', '3', 'B', 'D']
def test(hn):
    return [c in "2357BD" for c in hn] 
hn = "123ABCD"
print("Original hexadecimal number:",hn) 
print("Characters of the said hexadecimal number correspond to prime numbers:")
print(test(hn))
Original hexadecimal number: 123ABCD
Characters of the said hexadecimal number correspond to prime numbers:
[False, True, True, False, True, False, True]
#45-find all even palindromes up to n.
n=100
res=[]
for i in range(n+1):
    if str(i)==str(i)[::-1]:
        res.append(i)
print(res)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99]
#46-array of numbers representing a branch on a binary tree, write a Python program to
#find the minimum even value and its index. In the case of a tie, return the smallest index.
#If there are no even numbers, the answer is [].

def test(nums):
    if any(n % 2 == 0 for n in nums):
        return min([v, i] for i, v in enumerate(nums) if v % 2 == 0)
    else:
        return []
nums =  [1, 9, 4, 6, 10, 11, 14, 8]
print("Original list:")
print(nums)
print("Minimum even value and its index of the said array of numbers:")
print(test(nums))
Original list:
[1, 9, 4, 6, 10, 11, 14, 8]
Minimum even value and its index of the said array of numbers:
[4, 2]
#47-Filter for the numbers in numbers in a given list whose sum of digits is > 0, where the first digit can be negative.
l=[11, -6, -103, -200]
def test(nums):
    return [n for n in nums if int(str(n)[:2])+sum(map(int,str(n)[2:]))>0]
nums =  [11, -6, -103, -200]
print("Original list:")
print(nums)
print("Find the numbers in the said list whose sum of digits is >0, where the first digit can be negative:")
print(test(nums))
Original list:
[11, -6, -103, -200]
Find the numbers in the said list whose sum of digits is >0, where the first digit can be negative:
[11, -103]
#48-find the indices of two entries that show that the list is not in increasing order
l=[1, 2, 3, 0, 4, 5, 6]
for i in range(len(l)):
    if l[i+1]<l[i]:
        print([i,i+1])
        break
[2, 3]
#49-find the h-index, the largest positive number h such that h occurs in 
#the sequence at least h times. If there is no such positive number return h = -1.
l=[1, 2, 2, 3, 3, 4, 4, 4, 4]
res=set()
for i in l:
    if i==l.count(i):
        res.add(i)
print(list(res)[-1])
4
def test(nums):
    return max([-1] + [i for i in nums if i > 0 and nums.count(i) >= i])

nums =  [1, 2, 2, 3, 3, 4, 4, 4, 4]
print("Original list of numbers:")
print(nums)
print("h-index, the largest positive number h such that h occurs in the said sequence at least h times:")
print(test(nums))
Original list of numbers:
[1, 2, 2, 3, 3, 4, 4, 4, 4]
h-index, the largest positive number h such that h occurs in the said sequence at least h times:
4
#50- find the even-length words from a given list of words and sort them by length
l=['Red', 'Black', 'White', 'Green', 'Pink', 'Orange']
lst=[]
for i in l:
    if len(i)%2==0:
        lst.append(i)
print(sorted(lst,key=len))
['Pink', 'Orange']
def test(nums):
     return sorted([w for w in words if len(w) % 2 == 0], key=lambda w: (len(w), w))

words = ["Red", "Black", "White", "Green", "Pink", "Orange"]
print("Original list of words:")
print(words)
print("Find the even-length words and sort them by length in the said list of words:")
print(test(words))
Original list of words:
['Red', 'Black', 'White', 'Green', 'Pink', 'Orange']
Find the even-length words and sort them by length in the said list of words:
['Pink', 'Orange']
#51-find the first n Fibonacci numbers
n=15
sums=0
res=[1,1]
for i in range(2,n):
    sums=0
    sums=res[i-2]+res[i-1]
    res.append(sums)
print(res)
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]
def test(n):
    a = [1, 1]
    while len(a) < n: a += [sum(a[-2:])]
    return a[:n]
n = 10
print("\nFind the first",n,"Fibonacci numbers:")    
print(test(n))
Find the first 10 Fibonacci numbers:
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
#52-reverse the case of all strings
l=['cat', 'catatatatctsa', 'abcdefhijklmnop', '124259239185125', '', 'foo', 'unique']
res=[]
for i in l:
    res.append(i.swapcase())
print(res)
['CAT', 'CATATATATCTSA', 'ABCDEFHIJKLMNOP', '124259239185125', '', 'FOO', 'UNIQUE']
def test(strs):
    return [s[::-1] if s.isdigit() else s.swapcase() for s in strs] 
strs = ['cat', 'catatatatctsa', 'abcdefhijklmnop', '124259239185125', '', 'foo', 'unique']
print("Original list:")
print(strs)
print("Reverse the case of all strings. For those strings which contain no letters, reverse the strings:")
print(test(strs))
Original list:
['cat', 'catatatatctsa', 'abcdefhijklmnop', '124259239185125', '', 'foo', 'unique']
Reverse the case of all strings. For those strings which contain no letters, reverse the strings:
['CAT', 'CATATATATCTSA', 'ABCDEFHIJKLMNOP', '521581932952421', '', 'FOO', 'UNIQUE']
#53-find the product of the units digits in the numbers of a given list
l=[12, 23, 43]
prod=1
for i in l:
    n=str(i)[-1]
    prod*=int(n)
print(prod)
18
def test(nums):
     return eval('*'.join([str(x % 10) for x in nums]))
 
nums = [12, 23]
print("Original list of numbers:")
print(nums)
print("Product of the units digits in the numbers of the said:")
print(test(nums))
Original list of numbers:
[12, 23]
Product of the units digits in the numbers of the said:
6
#54-remove duplicates from a list of integers, preserving order
l=[1, 3, 4, 10, 4, 1, 43]
res=[]
for i in l:
    if i not in res:
        res.append(i)
print (res)
[1, 3, 4, 10, 43]
def test(nums):
    return list(dict.fromkeys(nums))
nums = [1, 3, 4, 10, 4, 1, 43]
print("Original list of numbers:")
print(nums)
print("Remove duplicates from the said list of integers, preserving order:")
print(test(nums))
Original list of numbers:
[1, 3, 4, 10, 4, 1, 43]
Remove duplicates from the said list of integers, preserving order:
[1, 3, 4, 10, 43]
#Date-9/3/22
#55-numbers that are greater than 10 and have odd first and last digits
def test(nums):
      return [x for x in nums if x > 10 and x % 10 % 2 and int(str(x)[0]) % 2]
nums = [1, 3, 79, 10, 4, 1, 39]
print("Original list of numbers:")
print(nums)
print("Numbers of the said array that are greater than 10 and have odd first and last digits:")
print(test(nums))
Original list of numbers:
[1, 3, 79, 10, 4, 1, 39]
Numbers of the said array that are greater than 10 and have odd first and last digits:
[79, 39]
#56-find an integer exponent x such that a^x = n.
a=2
n=1024
import math 
def isPower(n):
    #base case
    if (n<=1):
        return True
    for x in range(2,int(math.sqrt(n))+1):
        p=x
        #keep multiplying with x while n <=x
        while(p<=n):
            p=p*x
            if (p==n):
                return True
    return False
# Driver Program
for i in range(2, 100) :
     
    if (isPower(i)) :
        print( i, end =" ")
4 8 9 16 25 27 32 36 49 64 81 
def test(n,a):
    m=1
    x=0
    while m!=n:
        x+=1
        m*=a
    return x
a = 2
n = 1024
print("a = ",a,": n = ",n)
print("Find an integer exponent x such that a^x = n:")    
print(test(n,a))
a =  2 : n =  1024
Find an integer exponent x such that a^x = n:
10
#57-find the sum of the magnitudes of the elements in the array with a sign 
#that is equal to the product of the signs of the entries
l=[1, 3, -2,1]
s=0
flag=0

for i in l:
    if i<0:
        flag=1        
    s+=abs(i)
   # print(i)    
if flag==1:
    print(-s)
else:
    print(s)
-7
def test(nums):
    tot=sum(abs(i)for i in nums)
    if all(nums):
        return tot if sum(i<0 for i in nums)%2==0 else -tot
    return 0
nums = [1, 3, -2]
print("Original list of numbers:")
print(nums)
print("Sum of the magnitudes of the elements in the array with a sign that is equal to the product of the signs of the entries:")
print(test(nums))    
#58- find the biggest even number between two numbers inclusive
m=12
n=57

if max(m,n)%2==0:
    print(max(m,n))
else:
    print(max(m,n)-1)
56
def test(m, n):
    if m > n or (m == n and m % 2 == 1):
        return -1
    return n if n % 2 == 0 else n - 1

m = 12
n = 51
print("Biggest even number between",m,"and",n)
print(test(m, n))
Biggest even number between 12 and 51
50
#59-program to create a list of True/False that determine whether candidate filename is valid or not
file_name=[ 'txt', 'exe', 'jpg', 'png', 'dll']
l=['abc123.txt', 'windows.dll', 'tiger.png', 'rose.jpg', 'test.py', 'win32.exe']
for i in l:
    cnt=0
    if i.count('.')>1:
        print("invalid",i)
    if i[-3:] not in file_name:
        print("invalid",i,i[-3:])        
invalid test.py .py
def test(file_names):
    return ["Yes" if 
           f.split(".")[1:] in [['txt'], ['png'], ['dll'], ['exe'], ['jpg']] and f[0].isalpha() and sum(c.isdigit() for c in f) < 4
            else "No"
            for f in file_names]
file_names = ['abc.txt', 'windows.dll', 'tiger.png', 'rose.jpg', 'test.py', 'win32.exe']
print("Original list of files:")
print(file_names)
print("Valid filenames:")
print(test(file_names))
Original list of files:
['abc.txt', 'windows.dll', 'tiger.png', 'rose.jpg', 'test.py', 'win32.exe']
Valid filenames:
['Yes', 'Yes', 'Yes', 'Yes', 'No', 'Yes']
#60-Python program to find a list of all numbers that are adjacent to a prime number in the list, sorted without duplicates
import math
l=[2, 17, 16, 0, 6, 4, 5]
res=[]
def isPrime(n):
    if n==0 or n==1:
        return False
    for i in range(2,int(math.sqrt(n)+1)):
       # print(n,i)        
        if n%i==0 :
            # print(n,i)
            return False
    return True

for i in range(0,len(l)-1):
    if isPrime(l[i])==True:
        #print(l[i],"p")
        res.append(l[i+1])
        res.append(l[i-1])
        
if isPrime(l[-1])==True:
    res.append(l[-2])
if isPrime(l[1])==True:
    res.append(l[0])
print(res)
[17, 5, 16, 2, 4, 2]
def test(nums):
    return sorted({
        n for i, n in enumerate(nums)
        if (i>0 and prime(nums[i-1])) or (i<len(nums)-1 and prime(nums[i+1]))
    })
def prime(m):
  if (m>0):
    return all(m % i for i in range(2, m - 1))   
 
nums = [2, 17, 16, 0, 6, 4, 5]
print("Original list of numbers:")
print(nums)
print("Numbers that are adjacent to a prime number in the said list, sorted without duplicates:")
print(test(nums))
Original list of numbers:
[2, 17, 16, 0, 6, 4, 5]
Numbers that are adjacent to a prime number in the said list, sorted without duplicates:
[2, 4, 16, 17]
#61-find the number which when appended to the list makes the total 0.
l=[10, 42, 17, 9, -1315182, 184, 102, 29, 15, 39, 755]
sum_l=sum(l)
n=-sum_l
print(n)
1313980
def test(nums):
    dset = set(nums)
    result = sum(nums)
    dmin = abs(min(nums) - sum(dset^set(nums)))
    for d in dset^set(nums):
        dcopy = list(nums)
        dcopy.append(d)
        ds = sum(dcopy)
        if 0-ds < dmin:
            result = ds
            dmin = abs(ds)
        elif 0-ds == dmin:
            result = min(result, ds)
    return result*(-1)
 
nums = [1, 2, 3, 4, 5]
print("Original list of numbers:")
print(nums)
print("Number which when appended to the list makes the total 0:")
print(test(nums)) 
Original list of numbers:
[1, 2, 3, 4, 5]
Number which when appended to the list makes the total 0:
-15
#62-find the dictionary key whose case is different than all other keys
def test(dict_data):
    for different in dict_data:
        if all(k.islower()!=different.islower() for k in dict_data if k!=different):
            return different
        
dict_data = {"red": "", "GREEN": "", "blue": "orange"}
print("Original dictionary key-values:")
print(dict_data)
print("Find the dictionary key whose case is different than all other keys:")
print(test(dict_data))
Original dictionary key-values:
{'red': '', 'GREEN': '', 'blue': 'orange'}
Find the dictionary key whose case is different than all other keys:
GREEN
#63-find the sum of the even elements that are at odd indices in a given list
l=[1, 2, 3, 4, 5, 6, 7]
sums=0
for ind,n in enumerate(l):
    if ind%2==1 and n%2==0:
        sums+=n
print(sums)
12
#jumping odd index by 2
def test(nums):
    return sum(i for i in nums[1::2] if i % 2 == 0) 
nums = [1, 2, 3, 4, 5, 6, 7]
print("Original list of numbers:")
print(nums)
print("Sum of the even elements of the said list that are at odd indices:")
print(test(nums))
Original list of numbers:
[1, 2, 3, 4, 5, 6, 7]
Sum of the even elements of the said list that are at odd indices:
12
#64-find the string consisting of all the words whose lengths are prime numbers.
import math
s='The quick brown fox jumps over the lazy dog'
res=[]
flag=1
for i in s.split():
    flag=1
    #print(len(i),len_w,int(math.sqrt(len(i))+1))
    for len_w in range(2,int(math.sqrt(len(i))+1)):
        #print(len(i),len_w,"i")
        if len(i)%len_w==0:
            flag=0
    if flag==1:
        res.append(i)
   # print(flag,"f")
print(res)
['The', 'quick', 'brown', 'fox', 'jumps', 'the', 'dog']
def test(strs):
    return " ".join(strs for strs in strs.split() if is_prime(len(strs))) 
def is_prime(n):
    return n > 1 and all(n % j for j in range(2, int(n ** 0.5) + 1))
strs = "The quick brown fox jumps over the lazy dog."
print("Original list of numbers:")
print(strs)
print("Words whose lengths are prime numbers in the said string:")
print(test(strs))
Original list of numbers:
The quick brown fox jumps over the lazy dog.
Words whose lengths are prime numbers in the said string:
The quick brown fox jumps the
#65- shift the decimal digits n places to the left, wrapping the extra digits around. If shift > 
#the number of digits of n, reverse the string
n = 12345 
shift = 6

if shift==len(str(n))+1:
    print(str(n)[::-1])
else:
    print(str(n)[shift:]+str(n)[:shift])
54321
#66- find the indices of the closest pair from a list of numbers.
def test(nums):
    closest_inds = None
    closest_dist = None
    for ind, num in enumerate(nums):
        for other_ind, num2 in enumerate(nums):
            if num != num2 and ((closest_dist is None) or abs(num - num2) < closest_dist):
                closest_dist = abs(num - num2)
                closest_inds = [ind, other_ind]
                if num <= num2:
                    closest_inds = [ind, other_ind]
                else:
                    closest_inds = [other_ind, ind]
    return closest_inds
 
nums = [1, 7, 9, 2, 10]
print("List of numbers:",nums)
print("Indices of the closest pair from the said list of numbers:")
print(test(nums))    
List of numbers: [1, 7, 9, 2, 10]
Indices of the closest pair from the said list of numbers:
[0, 3]
#67-program to find a string which, when each character is shifted (ASCII incremented) by shift, gives the result.
def test(strs,shift):
    return "".join(chr(ord(c) - shift) for c in strs)
 
strs = "Ascii character table"
print("Original string:")
print(strs)
shift = 1
print('Shift =',shift)
print("A new string which, when each character is shifted (ASCII incremented) by shift in the said string:")
print(test(strs, shift))
Original string:
Ascii character table
Shift = 1
A new string which, when each character is shifted (ASCII incremented) by shift in the said string:
@rbhhbg`q`bsdqs`akd
#68-find all 5's in integers less than n that are divisible by 9 or 15.
n=65
res=[]
for i in range(1,n):
    if (i%15==0 or i%45==0) and i%10!=0:
        res.append(i)
print(res)
[15, 45]
def test(n):
    return [[i,j] for i in range(n) for j in range(len(str(i))) if str(i)[j] == '5' and (i%15==0 or i%9==0)]
n = 50
print("Value of n = ",n)
print("5's in integers less than",n,"that are divisible by 9 or 15:")
print(test(n))
Value of n =  50
5's in integers less than 50 that are divisible by 9 or 15:
[[15, 1], [45, 1]]
#69- create a new string by taking a string, and word by word rearranging its characters in ASCII order
s='Ascii character table'
' '.join(''.join(sorted(w)) for w in s.split())
'Aciis aaccehrrt abelt'
#70-find the first negative balance from a given a list of numbers which represent bank deposits and withdrawals
def test(balances):
    firsts = []
    for bals in balances:
        total = 0
        for b in bals:
            total += b
            if total < 0:
                firsts.append(total)
                break
        else:
            firsts.append(None)
    return firsts 
balances = [[12, -7, 3, -89, 14, 88, -78], [-1, 2, 7]]
print("Bank deposits and withdrawals:")
print(balances)
print("\nFirst negative balance of deposits and withdrawals:")
print(test(balances))
Bank deposits and withdrawals:
[[12, -7, 3, -89, 14, 88, -78], [-1, 2, 7]]

First negative balance of deposits and withdrawals:
[-81, -1]
#71-write a Python program to create a list containing that number in between each pair of adjacent numbers
l=[12, -7, 3, -89, 14, 88, -78, -1, 2, 7]
res=[]
sep=6
for i in range(len(l)*2-1):
    if i%2==1:
        l.insert(i,sep)
print(l)    
[12, 6, -7, 6, 3, 6, -89, 6, 14, 6, 88, 6, -78, 6, -1, 6, 2, 6, 7]
def test(nums, sep):
    ans = [sep] * (2 * len(nums) - 1)
    ans[::2] = nums
    return ans 
nums = [12, -7, 3, -89, 14, 88, -78, -1, 2, 7]
separator = 6
print("List of numbers:",nums)
print("Separator:",separator)
print("Inject the separator in between each pair of adjacent numbers of the said list:")
print(test(nums,separator))
List of numbers: [12, -7, 3, -89, 14, 88, -78, -1, 2, 7]
Separator: 6
Inject the separator in between each pair of adjacent numbers of the said list:
[12, 6, -7, 6, 3, 6, -89, 6, 14, 6, 88, 6, -78, 6, -1, 6, 2, 6, 7]
#Date-9/4/22
#72-find the indices of three numbers that sum to 0 in a given list of numbers.
nums=[1, 2, 3, 4, 5, 6, -7]
def test(nums):
    inv = {n: i for i, n in enumerate(nums)}  # note that later duplicates will override earlier entries
    print(inv)
    print((nums))
    for i, n in enumerate(nums):
        #if inv[n] == i:
            #del inv[n]
            #print(i)
        if any((-m - n) in inv for m in nums[:i]):  # found solution!
            j, m = next((j, m) for j, m in enumerate(nums) if (-m - n) in inv)
            k = inv[-m - n]
            print(j,k)
            return sorted([i, j, k])
print("List of numbers:",nums)
print("Indices of three numbers that sum to 0 in the said list:")
print(test(nums))
List of numbers: [1, 2, 3, 4, 5, 6, -7]
Indices of three numbers that sum to 0 in the said list:
{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, -7: 6}
[1, 2, 3, 4, 5, 6, -7]
2 6
[2, 3, 6]
#73- find a substring in a given string contains a vowel between two consonants.
vowel=['a','e','i','o','u']
s='Sndwhchi'

for ch in range(len(s)):
    if s[ch] in vowel:
        print(s[ch-1:ch+2])
        break
hi
#74-program to find a string consisting of space-separated characters with given counts
dct={'f': 1, 'o': 2}
s=""
for key,val in dct.items():
    s+=key*val
print(s)
foo
#75-reorder numbers from a give array in increasing/decreasing order based on whether 
#the first plus last element is odd/even.
def test(nums):
    return sorted(nums,reverse=(False if(nums[0]+nums[-1])%2 else True))
print("Reorder numbers of a give array in increasing/decreasing order based on whether the first plus last element is odd/even.:") 
nums = [2, 7, 4]
print("\nList of numbers:",nums)
print("Result:")
print(test(nums))   
Reorder numbers of a give array in increasing/decreasing order based on whether the first plus last element is odd/even.:

List of numbers: [2, 7, 4]
Result:
[7, 4, 2]
#76- find the index of the largest prime in the list and the sum of its digits
import math
def isPrime(n):
    if n==0 or n==1:
        return False
    for i in range(2,int(math.sqrt(n)+1)):
        if n%i==0:
            return False
    return True

def largestPrime(l):
    max_prime=2
    for i in l:
        if isPrime(i) and i>max_prime:
            max_prime=i
    return max_prime, l.index(max_prime)
l=[3, 7, 4]
print(largestPrime(l))
(7, 1)
#77-convert GPAs to letter grades according to the following table:
#grade_dct={4.0:'A+',3.7:'A',3.4:'A-',3.0='B+',2.7:'B',2.4:'B-',2.0:'C+',1.7:'C',1.4:'C-','Below':'F'}
def test(nums):
    return ["A+" if grade >= 4.0
            else ("A" if grade >= 3.7
                  else ("A-" if grade >= 3.4
                        else ("B+" if grade >= 3.0
                              else ("B" if grade >= 2.7
                                    else ("B-" if grade >= 2.4
                                          else ("C+" if grade >= 2.0
                                                else ("C" if grade >= 1.7
                                                      else ("C-" if grade >= 1.4
                                                            else "F"))))))))
            for grade in nums]   
nums = [4.0, 3.5, 3.8]
print("List of numbers:",nums)
print("Convert GPAs to letter grades:")
print(test(nums))
List of numbers: [4.0, 3.5, 3.8]
Convert GPAs to letter grades:
['A+', 'A-', 'A']
#78-find the two closest distinct numbers in a given a list of numbers
l=[1.3, 5.24, 0.89, 21.0, 5.27, 1.3]
def test(nums):
    s=sorted(set(nums))
    return min([[a,b] for a,b in zip(s,s[1:])],key=lambda x:x[1]-x[0])

nums = [1.3, 5.24, 0.89, 21.0, 5.27, 1.3]
print("List of numbers:",nums)
print("Two closest distinct numbers in the said list of numbers:")
print(test(nums))   
List of numbers: [1.3, 5.24, 0.89, 21.0, 5.27, 1.3]
Two closest distinct numbers in the said list of numbers:
[5.24, 5.27]
#79-find the largest negative and smallest positive numbers (or 0 if none)
l=[-12, -6, 300, -40, 2, 2, 3, 57, -50, -22, 12, 40, 9, 11, 18]
def test(l):
    return [min(i for i in l if i>0 ) , max(i for i in l if i<0)]
print(test(l))
[2, -6]
#80- round each float in a given list of number up to the next integer and return the running total of the integer squares
import math
l=[2.6, 3.5, 6.7, 2.3, 5.6]
add=0
res=[math.ceil(i)**2 for i in l]
print(res)

for i in res:
    add+=i
    print(add,end=" ")
[9, 16, 49, 9, 36]
9 25 74 83 119 
#81- calculate the average of the numbers a through b ( b not included ) 
#rounded to nearest integer, in binary (or -1 if there are no such numbers).
import math
n1=11 
n2=19

print(bin(round((n1+n2)/2)))
print(bin(6))
0b1111
0b110
#82- find the sublist of numbers from a given list of numbers with only odd digits in increasing order
odd=[1,3,5,7,9]
l=[1, 3, 79, 10, 4, 2, 39]
res=[]
for i in l:
    flag=0
    for j in range(len(str(i))):
        if int(str(i)[j]) not in odd:
            flag=1
    if flag==0:
        res.append(i)
print(res)
[1, 3, 79, 39]
#83-string is happy if every three consecutive characters are distinct. 
#Write a Python program to find two indices making a given string unhappy.
s='Pythoon'
for i in range(0,len(s)):
    #print(len(s[i:i+3]))
    #print(len(set(s[i:i+3])))
    if (len(s[i:i+3]))==(len(set(s[i:i+3]))):
        #print(s[i:i+3])
        #print(set(s[i:i+3]))
        continue
    else:
        print("String unhappy")
        print(s[i:i+3], i)
        break
String unhappy
hoo 3
#73-
def test(s):
    cons = "bcdfghjklmnpqrstvwxz"
    vows = "aeiou"
    return next(s[i - 1:i + 2] for i in range(1, len(s) - 1)
                if s[i].lower() in vows and s[i - 1].lower() in cons and s[i + 1].lower() in cons)
strs = "Hello"
print("Original string:",strs) 
print("Find a vowel between two consonants, contained in said string:")
print(test(strs))
Original string: Hello
Find a vowel between two consonants, contained in said string:
Hel
#74-
def test(counts):
     return " ".join(c for c, i in counts.items() for _ in range(i))
strs = {"f": 1, "o": 2}
print("Original string:",strs) 
print("String consisting of space-separated characters with given counts:")
print(test(strs))
Original string: {'f': 1, 'o': 2}
String consisting of space-separated characters with given counts:
f o o
#76-
def test(nums):
    n,i=max((n,i) for i,n in enumerate(nums)if is_Prime(n))
    return [i,sum(int(c)for c in str(n))]
def is_Prime(n):
    return n>1 and all(n%j for j in range(2,int(n**0.5)+1))
nums = [3, 7, 4]
print("List of numbers:",nums)
print("Index of the largest prime in the said list and the sum of its digits:")
print(test(nums))
List of numbers: [3, 7, 4]
Index of the largest prime in the said list and the sum of its digits:
[1, 7]
#82-
def test(nums):
    return sorted(n for n in nums if all(int(c) % 2 for c in str(abs(n))))
  
nums = [1, 3, 79, 10, 4, 2, 39]
print("Original list of numbers:")
print(nums)
print("Sublist of numbers of the said list with only odd digits in increasing order:")
print(test(nums))
Original list of numbers:
[1, 3, 79, 10, 4, 2, 39]
Sublist of numbers of the said list with only odd digits in increasing order:
[1, 3, 39, 79]
#83-
def test(s):
    for i in range(len(s) - 2):
        if s[i] == s[i + 1]:
            return [i, i + 1]
        if s[i] == s[i + 2]:
            return [i, i + 2] 

strs = "Python"
print("Original string:",strs) 
print("Find two indices making the said string unhappy!")
print(test(strs))
Original string: Python
Find two indices making the said string unhappy!
None
#84-find the index of the matching parentheses for each character in a given string. 
s='()(())'
res=[]
dct={}

for idx,ch in enumerate(s):
    if ch=='(':
        res.append(idx)
        #print(res)
    if ch==')':
        try:
            dct[res.pop()]=idx
        except IndexError:
            print('Too many closing parentheses')
if res:
    print("Too many opening parenthesis")

print(res)
print(dct)
[]
{0: 1, 3: 4, 2: 5}
#85-find an increasing sequence consisting of the elements of the original list
l=[1, 3, 79, 10, 4, 2, 39]
print(sorted(l))
[1, 2, 3, 4, 10, 39, 79]
#86-find the vowels from each of the original texts (y counts as a vowel at the end of the word) from a given list of strings
l=['w3resource', 'Python', 'Javay', 'C++']
vowel=['a','e','i','o','u']
res=[]
for i in l:
    s=''
    for j in i:
        if j in vowel:
            s+=j
    if i[-1]=='y' or i[-1]=='Y':
        s+=i[-1]
    res.append(s)
print(res)        
['eoue', 'o', 'aay', '']
def test(strs):
        return ["".join(c for c in text if c.lower() in "aeiou") + (text[-1] if text[-1].lower() == "y" else "")
            for text in strs]

strs = ["w3resource", "Python", "Java", "C++"]
print("Original List of strings:",strs)
print("Vowels from each of the original texts (y counts as a vowel at the end of the word:")
print(test(strs))
Original List of strings: ['w3resource', 'Python', 'Java', 'C++']
Vowels from each of the original texts (y counts as a vowel at the end of the word:
['eoue', 'o', 'aa', '']
#87-find a valid substring of a given string that contains matching brackets, at least one of which is nested
def test(s):
    import re
    return re.search(r"\[(\[\])+\]", s).group(0)

brackets = "]][][[]]]"
print("Original List of strings:",brackets)
print("\nFind a valid substring of the said string that contains matching brackets, at least one of which is nested:")
print(test(brackets))
Original List of strings: ]][][[]]]

Find a valid substring of the said string that contains matching brackets, at least one of which is nested:
[[]]
#index matchin
brc = "]][][[]]]"
if i in range(len(brc)):
    if brc[i]=='[':
        res.append(i)
        
#88-find an integer (n >= 0) with the given number of even and odd digits
def test(a,b):    
    return int(evens*"2"+odds*"3")   
evens = 2
odds = 3
print("Number of even digits:",evens,",Number of odd digits:",odds)
print("Integer(>= 0) with the given number of even and odd digits:")
print(test(evens, odds)) 
Number of even digits: 2 ,Number of odd digits: 3
Integer(>= 0) with the given number of even and odd digits:
22333
#89-find all integers <= 1000 that are the product of exactly three primes. 
#Each integer should represent as the list of its three prime factors.
import math
def test(n):    
    ps = [p for p in range(2,n) if all(p % sat != 0 for sat in range(2, p))]   #find primes less than n
    return [[p, q, r] for p in ps for q in ps for r in ps if p*q*r <= n]    #see if the product<=n
n = 10
print("Number:",n)
print("Find all integers <= said number that are the product of exactly three primes:")
print(test(n))     
Number: 10
Find all integers <= said number that are the product of exactly three primes:
[[2, 2, 2]]
#90- For each triple of eaten, need, stock write a Python program to get a pair of total appetite and remaining
l=[[2, 5, 6], [3, 9, 22]]
res=[]
for i in l:
    res.append([i[1]+i[0],i[2]-i[1]])
print(res)
[[7, 1], [12, 13]]
def test(nums):
    return [[a+min(b, c), max(0, c-b)] for a, b, c in nums]

nums = [[2, 5, 6], [3, 9, 22]]
print("Original list (triple) of lists:")
print(nums)
print("Each triple of eaten, need, stock return a pair of total appetite and remaining:")
print(test(nums))
Original list (triple) of lists:
[[2, 5, 6], [3, 9, 22]]
Each triple of eaten, need, stock return a pair of total appetite and remaining:
[[7, 1], [12, 13]]
#91-find all n-digit integers that start or end with 2
n=2
res=[]
for i in range(10**(n-1),10**n):
    if int(str(i)[0])==2:
        res.append(i)
    elif int(str(i)[-1])==2:
        res.append(i)
print(res)
[12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 42, 52, 62, 72, 82, 92]
def test(n):
    ans = []
    for i in range(10 ** (n - 1), 10 ** n):
        assert len(str(i)) == n
        if str(i).startswith("2") or str(i).endswith("2"):
            ans.append(i)
    return ans   
n = 1
print("Number:",n)
print("All",n,"- digit integers that start or end with 2:")
print(test(n))
Number: 1
All 1 - digit integers that start or end with 2:
[2]
#92-start with a list of integers, keep every other element in place and otherwise sort the list.
def test(nums):
    li = nums.copy()    
    for i in range(len(li)):
        if i % 2 == 0: 
            for j in range(i+2, len(li), 2):
                if li[j] < li[i]:
                    swap(li, i, j)    
    return li

def swap(li, i, j):
    temp = li[i]
    li[i] = li[j]
    li[j] = temp
nums = [2, 5, 6, 3, 1, 4, 34]
print("Original list (triple) of lists:")
print(nums)
print("In the said list, keep every other element in place and otherwise sort the list.:")
print(test(nums))
Original list (triple) of lists:
[2, 5, 6, 3, 1, 4, 34]
In the said list, keep every other element in place and otherwise sort the list.:
[1, 5, 2, 3, 6, 4, 34]
#93- program to find the closest palindrome from a given string
#https://stackoverflow.com/questions/42880034/finding-closest-palindrome-to-string
#DFS
#94-string consisting of whitespace and groups of matched parentheses, 
#write a Python program to split it into groups of perfectly matched parentheses without any whitespace
#95-find a palindrome of a given length containing a given string
#96- Python program to get the single digits in numbers sorted backwards and converted to English words
l=[27, 3, 8, 5, 1, 31]
dct={1:"One",2:"Two",3:"Three",4:"Four",5:"Five",6:"Six",7:"Seven",8:"Eight",9:"Nine",0:"Zero"}
res=[]
sorted_l=sorted(l,reverse=True)
print(sorted_l)

for key,val in dct.items():
    if key in sorted_l:
        res.append(val)
print(res)
[1, 3, 5, 8, 27, 31]
['One', 'Three', 'Five', 'Eight']
#97-Write a Python program to find the following strange sort of list of numbers: 
#the first element is the smallest, the second is the largest of the remaining, the third is the smallest of the remaining, 
#the fourth is the smallest of the remaining, etc
#98-string consisting of groups of matched nested parentheses separated by parentheses, 
#write a Python program to compute the depth of each group
#99-Write a Python program to find a string such that, when three or more spaces are compacted 
#to a '-' and one or two spaces are replaced by underscores, leads to the target.

s='-Hello,_world!__This_is-so-easy!-'
res=""
print(s.replace("-"," ").replace("_"," "))
 Hello, world!  This is so easy! 
#100-Python program to find four positive even integers whose sum is a given integer.
def test(n):
    for a in range(n, 0, -1):
        if not a % 2 == 0:
            continue
        for b in range(n - a, 0, -1):
            if not b % 2 == 0:
                continue
            for c in range(n - b - a, 0, -1):
                if not c % 2 == 0:
                    continue
                for d in range(n - b - c - a, 0, -1):
                    if not d % 2 == 0:
                        continue
                    if a + b + c + d == n:
                        return [a, b, c, d]
   
n = 100
print("Four positive even integers whose sum is",n)
print(test(n))
Four positive even integers whose sum is 100
[94, 2, 2, 2]
def test(nums):
    digits = {"zero": None,
              "one": 1,
              "two": 2,
              "three": 3,
              "four": 4,
              "five": 5,
              "six": 6,
              "seven": 7,
              "eight": 8,
              "nine": 9}
    digits_backwards = {digits[k]: k for k in digits}
    digits = [digits[s] for s in digits]
    li = [digits[n] for n in nums if n in digits]
    return [digits_backwards[n] for n in sorted(li, reverse=True)]
  
nums = [1, 3, 4, 5, 11]
print("Original list of numbers:")
print(nums)
print("Return the single digits in nums sorted backwards and converted to English words:")
print(test(nums))
Original list of numbers:
[1, 3, 4, 5, 11]
Return the single digits in nums sorted backwards and converted to English words:
['five', 'four', 'three', 'one']
 