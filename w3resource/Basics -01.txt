#20*****for loop+range function
def mulString(str1,n):
    result=""
    for i in range(n):
        result=result+str1
    return result

print(mulString("abc",2))
abcabc
#19******string index using cant use 0:2 but just :2
def strMod(str1):
    if str1[:2]=="IS":
        return str1
    else :
        return "IS"+str1
    
    
print(strMod("isswap"))
#18
def sumThreeNum(a,b,c):
    if a==b and b==c:
        return a*3
    else:
        return a+b+c
    
print(sumThreeNum(2,2,4))
8
#17******
def numRange(n):
    if 1100 >n>900 or 2100>n>1900:
        return 0
    else:
        return 1
    
print(numRange(1901))
0
#17 Number could be floating too
#use boolean protocol
def near_thousand(n):
    return((abs(1000-n)<=100) or (abs(2000-n)<=100)) 

print(near_thousand(900))
True
#16
def diff(n):
    sub=17-n
    if sub>=0:
        return sub
    else:
        return abs(sub)*2
    
print(diff(17))
0
#15
def vol_sph(r):
    return 4/3*3.14*r**3
print(vol_sph(6))
904.3199999999999
#14*****date function
from datetime import date 
delta= date(2014, 7, 11)-date(2014, 7, 1)
print(delta.days)
10
#13
print("a string that you \"don\'t\" have to escape \nThis \nis a ....multi-line \nheterodoc string")
a string that you "don't" have to escape 
This 
is a ....multi-line 
heterodoc string
#12****calendar function
import calendar
print(calendar.month(2025,4,4,2))
            April 2025

Mon  Tue  Wed  Thu  Fri  Sat  Sun

       1    2    3    4    5    6

  7    8    9   10   11   12   13

 14   15   16   17   18   19   20

 21   22   23   24   25   26   27

 28   29   30


#21****if loop
def eveOdd(n):
    if n%2==0:
        return 0
    else:
        return 1
    
print(eveOdd(int(input("Enter a number: "))))
Enter a number: 3
1
#22*****for loop
def cntFour(list):
    cnt=0
    for n in (list):
        if n==4:
            cnt= cnt+1
    return cnt
        
print(cntFour([1,2,4,5,6,4] ))
2
#23
def strCopies(str1,n):
    for i in range(n):
        if len(str1)>2:
            print(str1[:2])
        else:
            print(str1)
            
strCopies("chi",3)
ch
ch
ch
#24
def vowel(char1):
    if char1=='a' or char1=='e' or char1=='i' or char1=='o' or char1=='u':
        return True
    else:
        return False
print(vowel('a'))
    
True
#24*******
def vowel1(char):
    all_wovel='aeiou'
    return char in all_wovel

print(vowel1('d'))
print(vowel1('a'))
False
True
#25
def membership(n,lists):
    if n in lists:
        return True
    else:
        return False
    
print(membership(0,[1,5,8,3,6]))
False
#26************ while loop in for to print the character for number of times indexes of list
def histo(ch,lists):
    for i in lists:
        output=" "
        n=i
        while (n>0):
            output+=ch
            n=n-1
        print(output) 
    
histo('@',[1,5,4,3])
 @
 @@@@@
 @@@@
 @@@
#27************you cant directly prinnt from list need to use str function
def concString(lists):
    str1=''
    for i in lists:
        str1=str1+str(i)
    return str1
        
print(concString(["1a",'2']))
1a2
#28*********Break statement used to spot given number and stop there also see how numbers in lists are printed not list[i] but 
#just an i

def printList(lists):
    for i in lists:
       # while (lists[i]!=237):
           # if lists[i]%2==0:
            #    print(lists[i])
        if i==237:
            print(i)
            break
        elif i%2==0:
            print(i)

printList([386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345, 
    399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217, 
    815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717, 
    958,743, 527])
    
386
462
418
344
236
566
978
328
162
758
918
237
#29
def listprinting(list1, list2):
    for i in list1:
        if i not in list2:
            print(i)
listprinting(["White", "Black", "Red"] ,["Red", "Green"] )
    
White
Black
#29**********difference() function also it work in sequence only
def listprinting1(list1, list2):
    print(list1.difference(list2))
    print(list2.difference(list1))
    
listprinting(["White", "Fire", "Red"] ,["Red", "Green"] )
White
Fire
#30*********program accept input
def areatri():
    print("please enter height of triangle ")
    h=int(input())
    
    print("Please enter base of triangle ")
    b=int(input())
    area=1/2 * h*b
    
    return area
    
print(areatri())
please enter height of triangle 
12
Please enter base of triangle 
6
36.0
#31*****very very interesting case check all 3 solutions in W3Source
#range function, euclidean method just for 2 and gcd function called
def gcd(x,y):
    if x%y==0:
        return y
    for k in range(y,0,-1):
        if y%k==0 and x%k==0:
            return k
print(gcd(12,17))

            
1
#32#### interesting solution formula for LCM here--https://www.mathportal.org/calculators/numbers-calculators/lcm-calculator.php
#also check lambda and other W3 Solutions
from functools import reduce
from math import gcd

def lcm(numbers):
    return reduce((lambda x,y:int(x*y/gcd(x,y))),numbers)

print(lcm([12,7]))
   
    
84
#33
def intSum(n1,n2,n3):
    if n1!=n2 and n2!=n3 and n3!=n1:
        return n1+n2+n3
    elif n1==n2 or n2==n3 or n3==n1:
        return 0
print(intSum(1,2,2))
0
#34
def intervalSum(n1,n2):
    if n1+n2 >=15 and n1+n2<=20:
        return 0
    else:
        return n1+n2
   
    
print(intervalSum(12,8))
    
#print(intervalSum([12,8]))
0
#35
def boolsTest(n1,n2):
    if n1==n2 or n1+n2==5 or abs(n1-n2)==5:
        return False
    else:
        return True

print(boolsTest(12,8))
True
#36*********object concept
def objSum(a,b):
    if not(isinstance(a,int) and isinstance(b,int)):
        return "Inputs must be integers"
    return a+b

print(objSum('5',6))
print(objSum(5,6))
Inputs must be integers
11
#37********.format and input placeholder
name, age="Prachi",25
Address="Mumbai"

print("My name is {} \nMy Age is {}".format(name,age))
My name is Prachi 
My Age is 25
#38
print("Enter first number ")
x=int(input())
print("Enter second number ")
y=int(input())

result=(x+y)**2
print(result)
Enter first number 
12
Enter second number 
12
576
#39 FV = P(1 + r/n)^nt.
print("Please enter principal amount ")
amt=int(input())
print("Please enter number of years ")
yr=int(input())
print("Please enter rate ")
rate=float(input())

#result=(amt(1+rate/1))**(1*yr)
result=amt*((1+(0.01*rate)) ** yr)

print(result)
Please enter principal amount 
10000
Please enter number of years 
7
Please enter rate 
3.5
12722.792627665729
#40
import math
def distCoord(x1,y1,x2,y2):
    distance=math.sqrt(((x2-x1)**2)+((y2-y1)**2))
    return distance
print(distCoord(1,2,8,5))
7.615773105863909
#41***** file concept-1

import os.path
print(os.path.exists('Python_Stages.txt'))
print(os.path.isfile('main.py'))
False
False
#42******OS concept 32 or 64 bits
import struct
print(struct.calcsize("P")*8)
64
#43
import platform
import os
print("Name of the OS: ",os.name)
print("Name of the OS system: ",platform.system())
print("Version of the OS: ",platform.release())
Name of the OS:  nt
Name of the OS system:  Windows
Version of the OS:  10
#44
import site
print(site.getsitepackages())
['C:\\Users\\przir\\anaconda3', 'C:\\Users\\przir\\anaconda3\\lib\\site-packages']
#45******* file path
#from subprocess import call
#call(["ls", "-l"])

#46*************File Path
import os
print("Current File Name: ", os.path.realpath("W3S_Exc_Basic_1.py"))
Current File Name:  C:\Users\przir\W3S_Exc_Basic_1.py
#47
import multiprocessing
print(multiprocessing.cpu_count())
2
#48******Parsing data type
n=246.2458
print(float(n))
print(int(float(n)))
246.2458
246
#48******Parsing data type
def test(s):
   try:
       return int(s)
   except ValueError:
       return float(s)
print(test('12'))
print(test('233.12'))
12
233.12
#49*******list of directories in a file

from os import listdir
from os.path import isfile, join
files_list=[f for f in listdir ('C:/Users/przir/OneDrive/Desktop/Personal Care/Dress Care/RL-floral') if isfile(join('C:/Users/przir/OneDrive/Desktop/Personal Care/Dress Care/RL-floral',f))]
print(files_list)
['Cre.txt', 'Image-01.jpg', 'Styled.jpg']
#50******print without newline or space

for i in range(10):
    print("*",end="")
print("\n")
**********

#51
import cProfile
def sum():
    print(1+2)
cProfile.run('sum()')
3
         41 function calls in 0.001 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.001    0.001 3806822997.py:3(sum)
        1    0.000    0.000    0.001    0.001 <string>:1(<module>)
        3    0.000    0.000    0.000    0.000 iostream.py:206(schedule)
        2    0.000    0.000    0.000    0.000 iostream.py:418(_is_master_process)
        2    0.000    0.000    0.000    0.000 iostream.py:437(_schedule_flush)
        2    0.000    0.000    0.001    0.000 iostream.py:500(write)
        3    0.000    0.000    0.000    0.000 iostream.py:96(_event_pipe)
        3    0.000    0.000    0.000    0.000 socket.py:474(send)
        3    0.000    0.000    0.000    0.000 threading.py:1059(_wait_for_tstate_lock)
        3    0.000    0.000    0.000    0.000 threading.py:1113(is_alive)
        3    0.000    0.000    0.000    0.000 threading.py:529(is_set)
        1    0.000    0.000    0.001    0.001 {built-in method builtins.exec}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.len}
        1    0.000    0.000    0.001    0.001 {built-in method builtins.print}
        2    0.000    0.000    0.000    0.000 {built-in method nt.getpid}
        3    0.000    0.000    0.000    0.000 {method 'acquire' of '_thread.lock' objects}
        3    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


#52
from __future__ import print_function
import sys

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, ** kwargs)
    
eprint("abc","efg", "xyz",sep="--")
abc--efg--xyz
#53
import os
print("*____________________*")
print(os.environ)
print("*____________________*")
print(os.environ['HOME'])
print("*____________________*")
print(os.environ['PATH'])
*____________________*
environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\przir\\AppData\\Roaming', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'LAPTOP-SOUD7UOF', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'CONDA_DEFAULT_ENV': 'base', 'CONDA_EXE': 'C:\\Users\\przir\\anaconda3\\Scripts\\conda.exe', 'CONDA_PROMPT_MODIFIER': '(base) ', 'CONDA_PYTHON_EXE': 'C:\\Users\\przir\\anaconda3\\python.exe', 'CONDA_SHLVL': '1', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\przir', 'LOCALAPPDATA': 'C:\\Users\\przir\\AppData\\Local', 'LOGONSERVER': '\\\\LAPTOP-SOUD7UOF', 'NUMBER_OF_PROCESSORS': '2', 'ONEDRIVE': 'C:\\Users\\przir\\OneDrive', 'ONEDRIVECONSUMER': 'C:\\Users\\przir\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'C:\\Users\\przir\\anaconda3;C:\\Users\\przir\\anaconda3\\Library\\mingw-w64\\bin;C:\\Users\\przir\\anaconda3\\Library\\usr\\bin;C:\\Users\\przir\\anaconda3\\Library\\bin;C:\\Users\\przir\\anaconda3\\Scripts;C:\\Users\\przir\\anaconda3\\bin;C:\\Users\\przir\\anaconda3\\condabin;C:\\Users\\przir\\anaconda3;C:\\Users\\przir\\anaconda3\\Library\\mingw-w64\\bin;C:\\Users\\przir\\anaconda3\\Library\\usr\\bin;C:\\Users\\przir\\anaconda3\\Library\\bin;C:\\Users\\przir\\anaconda3\\Scripts;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0;C:\\WINDOWS\\System32\\OpenSSH;C:\\Users\\przir\\AppData\\Local\\Programs\\Python\\Python310\\Scripts;C:\\Users\\przir\\AppData\\Local\\Programs\\Python\\Python310;C:\\Users\\przir\\AppData\\Local\\Microsoft\\WindowsApps;.', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 122 Stepping 1, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '7a01', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PROMPT': '(base) $P$G', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\WINDOWS', 'TEMP': 'C:\\Users\\przir\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\przir\\AppData\\Local\\Temp', 'USERDOMAIN': 'LAPTOP-SOUD7UOF', 'USERDOMAIN_ROAMINGPROFILE': 'LAPTOP-SOUD7UOF', 'USERNAME': 'przir', 'USERPROFILE': 'C:\\Users\\przir', 'WINDIR': 'C:\\WINDOWS', 'CONDA_PREFIX': 'C:\\Users\\przir\\anaconda3', 'CONDA_ROOT': 'C:\\Users\\przir\\anaconda3', 'PYDEVD_USE_FRAME_EVAL': 'NO', 'JPY_INTERRUPT_EVENT': '2288', 'IPY_INTERRUPT_EVENT': '2288', 'JPY_PARENT_PID': '2332', 'TERM': 'xterm-color', 'CLICOLOR': '1', 'PAGER': 'cat', 'GIT_PAGER': 'cat', 'MPLBACKEND': 'module://matplotlib_inline.backend_inline'})
*____________________*
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_7916/2888234496.py in <module>
      4 print(os.environ)
      5 print("*____________________*")
----> 6 print(os.environ['HOME'])
      7 print("*____________________*")
      8 print(os.environ['PATH'])

~\anaconda3\lib\os.py in __getitem__(self, key)
    677         except KeyError:
    678             # raise KeyError with the original key value
--> 679             raise KeyError(key) from None
    680         return self.decodevalue(value)
    681 

KeyError: 'HOME'
#54
import getpass
print(getpass.getuser())
przir
#55
import socket
print([l for l in ([ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] 
if not ip.startswith("127.")][:1], [[(s.connect(('8.8.8.8', 53)), 
s.getsockname()[0], s.close()) for s in [socket.socket(socket.AF_INET, 
socket.SOCK_DGRAM)]][0][1]]) if l][0][0])
192.168.0.102
#56
import fcntl, termios, struct
def terminal_size():    
    th, tw, hp, wp = struct.unpack('HHHH',
        fcntl.ioctl(0, termios.TIOCGWINSZ,
        struct.pack('HHHH', 0, 0, 0, 0)))
    return tw, th

print('Number of columns and Rows: ',terminal_size())
---------------------------------------------------------------------------
ModuleNotFoundError                       Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_7916/3154261879.py in <module>
      1 #56
----> 2 import termios, struct
      3 def terminal_size():
      4     th, tw, hp, wp = struct.unpack('HHHH',
      5         fcntl.ioctl(0, termios.TIOCGWINSZ,

ModuleNotFoundError: No module named 'termios'
#57******time function
import time
def sum_of_numbers(n):
    start_time=time.time()
    s=0
    for i in range(1,1+n):
        s=s+i
    end_time=time.time()
    return s, end_time,start_time

n=5
print("\nTime to sum of 1 to ",n," and required time to calculate is :",sum_of_numbers(n))
Time to sum of 1 to  5  and required time to calculate is : (15, 1650629851.382311, 1650629851.382311)
#58
def sumOfInt(n):
    sum=n*(n+1)/2
    return sum

print(sumOfInt(6))
21.0
#59
def inchToCM():
    print("Please enter inches and feet ")
    ic=int(input())
    ft=int(input())
    
    result=((ft*12)+ic)*2.54
    print("result=",result)
    
inchToCM()
    
Please enter inches and feet 
3
5
result= 160.02
#60
import math
def hypotenuse():
    print("Please enter height of the triangle :")
    ht=int(input())
    print("Please enter base of the triangle: ")
    bs=int(input())
    
    hypotns=math.sqrt(ht**2+bs**2)
    print("Hypotenuse of the triangle is ",hypotns)
    
hypotenuse()
Please enter height of the triangle :
3
Please enter base of the triangle: 
4
Hypotenuse of the triangle is  5.0
#61
def distanceConv(ft):
    inc=ft*12
    yrd=ft*0.333
    miles=ft*0.0002
    print("Feet to Inches conversion= ",inc)
    
    print("Feet to Yards conversion= ",yrd)
    
    print("Feet to Miles conversion= ",miles)
    
    
distanceConv(1)
Feet to Inches conversion=  12
Feet to Yards conversion=  0.333
Feet to Miles conversion=  0.0002
#62
def timeConversion():
    print("Enter hour ")
    hrs=int(input())
    print("Enter Minutes ")
    mins=int(input())
    
    secs=hrs*60*60+mins*60
    print("Total Seconds=",secs)
    
timeConversion()
Enter hour 
1
Enter Minutes 
1
Total Seconds= 3660
#63*********file path 
def absFilePath(file_name):
    import os
    return os.path.abspath('Clear-Color-Palette-Me')
print("Absolute file path ",absFilePath("Clear-Color-Palette-Me") )
Absolute file path  C:\Users\przir\Clear-Color-Palette-Me
#64
import os.path, time
print("Last modified: %s" %time.ctime(os.path.getmtime("Test.txt")))
print("created:%s" %time.ctime(os.path.getctime("Test.txt")))
---------------------------------------------------------------------------
FileNotFoundError                         Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_7916/1835394260.py in <module>
      1 #64
      2 import os.path, time
----> 3 print("Last modified: %s" %time.ctime(os.path.getmtime("Test.txt")))
      4 print("created:%s" %time.ctime(os.path.getctime("Test.txt")))

~\anaconda3\lib\genericpath.py in getmtime(filename)
     53 def getmtime(filename):
     54     """Return the last modification time of a file, reported by os.stat()."""
---> 55     return os.stat(filename).st_mtime
     56 
     57 

FileNotFoundError: [WinError 2] The system cannot find the file specified: 'Test.txt'
#65******time conversion and formatting with %d
time = float(input("Input time in seconds: "))
day = time // (24 * 3600)
time = time % (24 * 3600)
hour = time // 3600
time %= 3600
minutes = time // 60
time %= 60
seconds = time
print("d:h:m:s-> %d:%d:%d:%d" % (day, hour, minutes, seconds))
Input time in seconds: 90000
d:h:m:s-> 1:1:0:0
#66
print("Please enter height of the person in meter :")
ht=float(input())
print("Please enter weight of the person in KG :")
m=float(input())
bmi=ht/(m**2)
print("Persons body mass index is: ",bmi)
Please enter height of the person in meter :
5.5
Please enter weight of the person in KG :
10
Persons body mass index is:  0.055
#67
kpa = float(input("Input pressure in in kilopascals> "))
psi = kpa / 6.89475729
mmhg = kpa * 760 / 101.325
atm = kpa / 101.325
print("The pressure in pounds per square inch: %.2f psi"  % (psi))
print("The pressure in millimeter of mercury: %.2f mmHg" % (mmhg))
print("Atmosphere pressure: %.2f atm." % (atm))
    
Input pressure in in kilopascals> 10
The pressure in pounds per square inch: 1.45 psi
The pressure in millimeter of mercury: 75.01 mmHg
Atmosphere pressure: 0.10 atm.
#68********
sum=0
for digit in str(num):
    sum=sum+num

print(sum)
 
 
#68********
number = 123

sum_of_digits = 0
for digit in str(number):
#turn to string to iterate through

  sum_of_digits += int(digit)

print(sum_of_digits)
6
#69 *****sorting without loops/condition

print("3 integers")
x=int(input())
y=int(input())
z=int(input())

a1=min(x,y,z)
a3=max(x,y,z)
a2=(x+y+z)-a1-a3

print(a1,a2,a3)
3 integers
1
3
2
1 2 3
#70
import glob
import os

files=glob.glob("*.txt")
files.sort(key=os.path.getmtime)
print("\n".join(files))
#71*****files sorting 
import os
import time
paths = ["%s %s" % (time.ctime(t),f) for t, f in
sorted([(os.path.getctime(x),x) for x in os.listdir(".")])]
print("Directory listing, sorted by creation date:")
for x in range(len(paths)):
    print(paths[x],)
Directory listing, sorted by creation date:
Mon Dec  6 15:05:08 2021 Documents
Mon Dec  6 15:05:08 2021 Downloads
Mon Dec  6 15:05:08 2021 Favorites
Mon Dec  6 15:05:08 2021 Links
Mon Dec  6 15:05:08 2021 Music
Mon Dec  6 15:05:08 2021 My Documents
Mon Dec  6 15:05:08 2021 Saved Games
Mon Dec  6 15:05:08 2021 Start Menu
Mon Dec  6 15:05:08 2021 Videos
Mon Dec  6 15:05:08 2021 Recent
Mon Dec  6 15:05:08 2021 SendTo
Mon Dec  6 15:05:08 2021 Cookies
Mon Dec  6 15:06:54 2021 3D Objects
Mon Dec  6 15:06:54 2021 Contacts
Mon Dec  6 15:06:54 2021 Searches
Mon Dec  6 15:09:06 2021 MicrosoftEdgeBackups
Mon Dec  6 15:14:11 2021 OneDrive
Tue Dec 14 08:19:17 2021 IntelGraphicsProfiles
Fri Dec 24 08:40:34 2021 NTUSER.DAT
Fri Dec 24 08:40:34 2021 AppData
Fri Dec 24 08:40:34 2021 Application Data
Fri Dec 24 08:40:34 2021 Templates
Fri Dec 24 08:40:34 2021 PrintHood
Fri Dec 24 08:40:34 2021 NetHood
Fri Dec 24 08:40:34 2021 Local Settings
Fri Dec 24 08:40:34 2021 ntuser.dat.LOG1
Fri Dec 24 08:40:34 2021 ntuser.dat.LOG2
Fri Dec 24 08:40:34 2021 NTUSER.DAT{53b39e88-18c4-11ea-a811-000d3aa4692b}.TM.blf
Fri Dec 24 08:40:34 2021 NTUSER.DAT{53b39e88-18c4-11ea-a811-000d3aa4692b}.TMContainer00000000000000000001.regtrans-ms
Fri Dec 24 08:40:34 2021 NTUSER.DAT{53b39e88-18c4-11ea-a811-000d3aa4692b}.TMContainer00000000000000000002.regtrans-ms
Fri Dec 24 15:10:06 2021 ntuser.ini
Mon Apr 18 12:17:47 2022 anaconda3
Mon Apr 18 12:26:43 2022 .ipython
Mon Apr 18 12:28:25 2022 .continuum
Mon Apr 18 12:28:31 2022 .conda
Mon Apr 18 12:28:41 2022 .condarc
Mon Apr 18 12:28:59 2022 .jupyter
Mon Apr 18 12:29:32 2022 Untitled.ipynb
Mon Apr 18 12:29:32 2022 .ipynb_checkpoints
Mon Apr 18 12:30:19 2022 First_prgm.ipynb
Tue Apr 19 10:52:54 2022 Untitled1.ipynb
Tue Apr 19 11:04:41 2022 W3S_Exc_Basic_1.ipynb
Sat Apr 23 08:48:15 2022 Untitled2.ipynb
Sat Apr 23 08:53:41 2022 W3S_Exc_Basic_1_2.ipynb
#72 math module details

import math
print("Details of math modiles: \n")
help(math)
Details of math modiles: 

Help on built-in module math:

NAME
    math

DESCRIPTION
    This module provides access to the mathematical functions
    defined by the C standard.

FUNCTIONS
    acos(x, /)
        Return the arc cosine (measured in radians) of x.
        
        The result is between 0 and pi.
    
    acosh(x, /)
        Return the inverse hyperbolic cosine of x.
    
    asin(x, /)
        Return the arc sine (measured in radians) of x.
        
        The result is between -pi/2 and pi/2.
    
    asinh(x, /)
        Return the inverse hyperbolic sine of x.
    
    atan(x, /)
        Return the arc tangent (measured in radians) of x.
        
        The result is between -pi/2 and pi/2.
    
    atan2(y, x, /)
        Return the arc tangent (measured in radians) of y/x.
        
        Unlike atan(y/x), the signs of both x and y are considered.
    
    atanh(x, /)
        Return the inverse hyperbolic tangent of x.
    
    ceil(x, /)
        Return the ceiling of x as an Integral.
        
        This is the smallest integer >= x.
    
    comb(n, k, /)
        Number of ways to choose k items from n items without repetition and without order.
        
        Evaluates to n! / (k! * (n - k)!) when k <= n and evaluates
        to zero when k > n.
        
        Also called the binomial coefficient because it is equivalent
        to the coefficient of k-th term in polynomial expansion of the
        expression (1 + x)**n.
        
        Raises TypeError if either of the arguments are not integers.
        Raises ValueError if either of the arguments are negative.
    
    copysign(x, y, /)
        Return a float with the magnitude (absolute value) of x but the sign of y.
        
        On platforms that support signed zeros, copysign(1.0, -0.0)
        returns -1.0.
    
    cos(x, /)
        Return the cosine of x (measured in radians).
    
    cosh(x, /)
        Return the hyperbolic cosine of x.
    
    degrees(x, /)
        Convert angle x from radians to degrees.
    
    dist(p, q, /)
        Return the Euclidean distance between two points p and q.
        
        The points should be specified as sequences (or iterables) of
        coordinates.  Both inputs must have the same dimension.
        
        Roughly equivalent to:
            sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))
    
    erf(x, /)
        Error function at x.
    
    erfc(x, /)
        Complementary error function at x.
    
    exp(x, /)
        Return e raised to the power of x.
    
    expm1(x, /)
        Return exp(x)-1.
        
        This function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.
    
    fabs(x, /)
        Return the absolute value of the float x.
    
    factorial(x, /)
        Find x!.
        
        Raise a ValueError if x is negative or non-integral.
    
    floor(x, /)
        Return the floor of x as an Integral.
        
        This is the largest integer <= x.
    
    fmod(x, y, /)
        Return fmod(x, y), according to platform C.
        
        x % y may differ.
    
    frexp(x, /)
        Return the mantissa and exponent of x, as pair (m, e).
        
        m is a float and e is an int, such that x = m * 2.**e.
        If x is 0, m and e are both 0.  Else 0.5 <= abs(m) < 1.0.
    
    fsum(seq, /)
        Return an accurate floating point sum of values in the iterable seq.
        
        Assumes IEEE-754 floating point arithmetic.
    
    gamma(x, /)
        Gamma function at x.
    
    gcd(*integers)
        Greatest Common Divisor.
    
    hypot(...)
        hypot(*coordinates) -> value
        
        Multidimensional Euclidean distance from the origin to a point.
        
        Roughly equivalent to:
            sqrt(sum(x**2 for x in coordinates))
        
        For a two dimensional point (x, y), gives the hypotenuse
        using the Pythagorean theorem:  sqrt(x*x + y*y).
        
        For example, the hypotenuse of a 3/4/5 right triangle is:
        
            >>> hypot(3.0, 4.0)
            5.0
    
    isclose(a, b, *, rel_tol=1e-09, abs_tol=0.0)
        Determine whether two floating point numbers are close in value.
        
          rel_tol
            maximum difference for being considered "close", relative to the
            magnitude of the input values
          abs_tol
            maximum difference for being considered "close", regardless of the
            magnitude of the input values
        
        Return True if a is close in value to b, and False otherwise.
        
        For the values to be considered close, the difference between them
        must be smaller than at least one of the tolerances.
        
        -inf, inf and NaN behave similarly to the IEEE 754 Standard.  That
        is, NaN is not close to anything, even itself.  inf and -inf are
        only close to themselves.
    
    isfinite(x, /)
        Return True if x is neither an infinity nor a NaN, and False otherwise.
    
    isinf(x, /)
        Return True if x is a positive or negative infinity, and False otherwise.
    
    isnan(x, /)
        Return True if x is a NaN (not a number), and False otherwise.
    
    isqrt(n, /)
        Return the integer part of the square root of the input.
    
    lcm(*integers)
        Least Common Multiple.
    
    ldexp(x, i, /)
        Return x * (2**i).
        
        This is essentially the inverse of frexp().
    
    lgamma(x, /)
        Natural logarithm of absolute value of Gamma function at x.
    
    log(...)
        log(x, [base=math.e])
        Return the logarithm of x to the given base.
        
        If the base not specified, returns the natural logarithm (base e) of x.
    
    log10(x, /)
        Return the base 10 logarithm of x.
    
    log1p(x, /)
        Return the natural logarithm of 1+x (base e).
        
        The result is computed in a way which is accurate for x near zero.
    
    log2(x, /)
        Return the base 2 logarithm of x.
    
    modf(x, /)
        Return the fractional and integer parts of x.
        
        Both results carry the sign of x and are floats.
    
    nextafter(x, y, /)
        Return the next floating-point value after x towards y.
    
    perm(n, k=None, /)
        Number of ways to choose k items from n items without repetition and with order.
        
        Evaluates to n! / (n - k)! when k <= n and evaluates
        to zero when k > n.
        
        If k is not specified or is None, then k defaults to n
        and the function returns n!.
        
        Raises TypeError if either of the arguments are not integers.
        Raises ValueError if either of the arguments are negative.
    
    pow(x, y, /)
        Return x**y (x to the power of y).
    
    prod(iterable, /, *, start=1)
        Calculate the product of all the elements in the input iterable.
        
        The default start value for the product is 1.
        
        When the iterable is empty, return the start value.  This function is
        intended specifically for use with numeric values and may reject
        non-numeric types.
    
    radians(x, /)
        Convert angle x from degrees to radians.
    
    remainder(x, y, /)
        Difference between x and the closest integer multiple of y.
        
        Return x - n*y where n*y is the closest integer multiple of y.
        In the case where x is exactly halfway between two multiples of
        y, the nearest even value of n is used. The result is always exact.
    
    sin(x, /)
        Return the sine of x (measured in radians).
    
    sinh(x, /)
        Return the hyperbolic sine of x.
    
    sqrt(x, /)
        Return the square root of x.
    
    tan(x, /)
        Return the tangent of x (measured in radians).
    
    tanh(x, /)
        Return the hyperbolic tangent of x.
    
    trunc(x, /)
        Truncates the Real x to the nearest Integral toward 0.
        
        Uses the __trunc__ magic method.
    
    ulp(x, /)
        Return the value of the least significant bit of the float x.

DATA
    e = 2.718281828459045
    inf = inf
    nan = nan
    pi = 3.141592653589793
    tau = 6.283185307179586

FILE
    (built-in)


#72 math module details
import math
math_mod=dir(math)
print(math_mod)
['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 'lcm', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'nextafter', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc', 'ulp']
#73 
print("enter start points of line: ")
x1=int(input())
y1=int(input())

print("Enter end points of the line: ")
x2=int(input())
y2=int(input())

midPointX=(x1+x2)/2
midPoinY=(y1+y2)/2

print("midPoints are: (",midPointX,midPoinY,")")
enter start points of line: 
4
5
Enter end points of the line: 
2
1
midPoints are: ( 3.0 3.0 )
#74***** hash words 
soundex=[0,1,2,3,0,1,2,0,0,2,2,4,5,5,0,1,2,6,2,3,0,1,0,2,0,2]

word=input("Input the word to be hashed: ")
word=word.upper()
coded=word[0]

for a in word[1:len(word)]:
    i=65-ord(a)
    coded=coded+str(soundex[i])
print()
print("coded word is:"+coded)
print()
Input the word to be hashed: Man

coded word is:M05

#74***** hash words 
int_num = 112
flt_num = 23.99
text_val = 'Python Exercises'
print("Original integer value:",int_num)
print ("Hash value of the said integer value: " + str(hash(int_num)))
print("Original float value:",flt_num)
print ("Hash value of the said float value: " + str(hash(flt_num)))
print("Original text:",text_val)
print ("Hash value of the said text: " + str(hash(text_val)))
Original integer value: 112
Hash value of the said integer value: 112
Original float value: 23.99
Hash value of the said float value: 2282784579121553431
Original text: Python Exercises
Hash value of the said text: -3355991208796899690
#75
import sys
print(copyright)
print(sys.copyright)
Copyright (c) 2001-2021 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved.
Copyright (c) 2001-2021 Python Software Foundation.
All Rights Reserved.

Copyright (c) 2000 BeOpen.com.
All Rights Reserved.

Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.

Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved.
#76
import sys
print("This is the name/path of the script:"),sys.argv[0]
print("Number of arguments:",len(sys.argv))
print("Argument List:",str(sys.argv))
This is the name/path of the script:
Number of arguments: 3
Argument List: ['C:\\Users\\przir\\anaconda3\\lib\\site-packages\\ipykernel_launcher.py', '-f', 'C:\\Users\\przir\\AppData\\Roaming\\jupyter\\runtime\\kernel-567d5f02-2556-43c3-80a6-d22c41d4c5cf.json']
#77
import sys
print()
if sys.byteorder == "little":
    #intel, alpha
    print("Little-endian platform.")
else:
    #motorola, sparc
    print("Big-endian platform.")
print()
Little-endian platform.

#78
help('modules')
Please wait a moment while I gather a list of all available modules...

C:\Users\przir\anaconda3\lib\site-packages\IPython\kernel\__init__.py:12: ShimWarning: The `IPython.kernel` package has been deprecated since IPython 4.0.You should import from ipykernel or jupyter_client instead.
  warn("The `IPython.kernel` package has been deprecated since IPython 4.0."
WARNING: AstropyDeprecationWarning: The private astropy._erfa module has been made into its own package, pyerfa, which is a dependency of astropy and can be imported directly using "import erfa" [astropy._erfa]
C:\Users\przir\anaconda3\lib\pkgutil.py:93: MatplotlibDeprecationWarning: 
The matplotlib.compat module was deprecated in Matplotlib 3.3 and will be removed two minor releases later.
  __import__(info.name)
C:\Users\przir\anaconda3\lib\site-packages\nltk\twitter\__init__.py:20: UserWarning: The twython library has not been installed. Some functionality from the twitter package will not be available.
  warnings.warn(
Update LANGUAGE_CODES (inside config/base.py) if a new translation has been added to Spyder
QSS file sucessfuly loaded.
Found application patches to be applied.
No QCoreApplication instance found. Application patches not applied. You have to call load_stylesheet function after instantiation of QApplication to take effect. 
C:\Users\przir\anaconda3\lib\pkgutil.py:108: VisibleDeprecationWarning: zmq.eventloop.minitornado is deprecated in pyzmq 14.0 and will be removed.
    Install tornado itself to use zmq with the tornado IOLoop.
    
  yield from walk_packages(path, info.name+'.', onerror)
Cython              codecs              modulefinder        sortedcontainers
IPython             codeop              more_itertools      soupsieve
OpenSSL             collections         mpmath              sphinx
PIL                 colorama            msgpack             sphinxcontrib
PyQt5               colorsys            msilib              spyder
TBB                 commctrl            msvcrt              spyder_kernels
__future__          compileall          multipledispatch    sqlalchemy
_abc                comtypes            multiprocessing     sqlite3
_aix_support        concurrent          munkres             sre_compile
_ast                conda               mypy_extensions     sre_constants
_asyncio            conda_build         nacl                sre_parse
_bisect             conda_content_trust navigator_updater   ssl
_black_version      conda_env           nbclassic           sspi
_blake2             conda_pack          nbclient            sspicon
_bootlocale         conda_package_handling nbconvert           stat
_bootsubprocess     conda_token         nbformat            statistics
_bz2                conda_verify        nest_asyncio        statsmodels
_cffi_backend       configparser        netbios             storemagic
_codecs             contextlib          netrc               string
_codecs_cn          contextlib2         networkx            stringprep
_codecs_hk          contextvars         nltk                struct
_codecs_iso2022     cookiecutter        nntplib             subprocess
_codecs_jp          copy                nose                sunau
_codecs_kr          copyreg             notebook            symbol
_codecs_tw          crypt               nt                  sympy
_collections        cryptography        ntpath              sympyprinting
_collections_abc    csv                 ntsecuritycon       symtable
_compat_pickle      ctypes              nturl2path          sys
_compression        curl                numba               sysconfig
_contextvars        curses              numbers             tables
_csv                cwp                 numexpr             tabnanny
_ctypes             cycler              numpy               tarfile
_ctypes_test        cython              numpydoc            tbb
_daal4py            cythonmagic         odbc                tblib
_datetime           cytoolz             olefile             telnetlib
_decimal            daal4py             onedal              tempfile
_distutils_hack     dask                opcode              terminado
_elementtree        dataclasses         openpyxl            test
_functools          datetime            operator            test_data
_hashlib            dateutil            optparse            test_pycosat
_heapq              dbi                 os                  testpath
_imp                dbm                 packaging           tests
_io                 dde                 pandas              text_unidecode
_json               debugpy             pandocfilters       textdistance
_locale             decimal             paramiko            textwrap
_lsprof             decorator           parser              this
_lzma               defusedxml          parso               threading
_markupbase         diff_match_patch    partd               threadpoolctl
_md5                difflib             past                three_merge
_msi                dis                 path                tifffile
_multibytecodec     distributed         pathlib             time
_multiprocessing    distutils           pathlib2            timeit
_nsis               doctest             pathspec            timer
_onedal4py_host     docutils            patsy               tinycss
_opcode             email               pdb                 tkinter
_operator           encodings           pep8                tlz
_osx_support        ensurepip           perfmon             token
_overlapped         entrypoints         pexpect             tokenize
_peg_parser         enum                pickle              toml
_pickle             erfa                pickleshare         toolz
_py_abc             errno               pickletools         tornado
_pydecimal          et_xmlfile          pip                 tqdm
_pyio               fastcache           pipes               trace
_pyrsistent_version faulthandler        pkg_resources       traceback
_pytest             filecmp             pkginfo             tracemalloc
_queue              fileinput           pkgutil             traitlets
_random             filelock            platform            tty
_sha1               flake8              plistlib            turtle
_sha256             flask               pluggy              turtledemo
_sha3               fnmatch             ply                 typed_ast
_sha512             fontTools           poplib              types
_signal             formatter           posixpath           typing
_sitebuiltins       fractions           poyo                typing_extensions
_socket             fsspec              pprint              ujson
_sqlite3            ftplib              profile             unicodecsv
_sre                functools           prometheus_client   unicodedata
_ssl                future              prompt_toolkit      unidecode
_stat               gc                  pstats              unittest
_statistics         genericpath         psutil              urllib
_string             getopt              pty                 urllib3
_strptime           getpass             ptyprocess          uu
_struct             gettext             pvectorc            uuid
_symtable           gevent              py                  venv
_system_path        glob                py_compile          warnings
_testbuffer         glob2               pyclbr              watchdog
_testcapi           graphlib            pycodestyle         wave
_testconsole        greenlet            pycosat             wcwidth
_testimportmultiple gzip                pycparser           weakref
_testinternalcapi   h5py                pycurl              webbrowser
_testmultiphase     hashlib             pydoc               webencodings
_thread             heapdict            pydoc_data          werkzeug
_threading_local    heapq               pydocstyle          wheel
_tkinter            hmac                pyexpat             whichcraft
_tracemalloc        html                pyflakes            widgetsnbextension
_uuid               html5lib            pygments            win2kras
_warnings           http                pylab               win32api
_weakref            idlelib             pylint              win32clipboard
_weakrefset         idna                pyls_spyder         win32com
_win32sysloader     imagecodecs         pylsp               win32con
_winapi             imageio             pylsp_black         win32console
_winxptheme         imagesize           pylsp_jsonrpc       win32cred
_xxsubinterpreters  imaplib             pyodbc              win32crypt
_yaml               imghdr              pyparsing           win32cryptcon
_zoneinfo           imp                 pyreadline          win32ctypes
abc                 importlib           pyrsistent          win32event
adodbapi            importlib_metadata  pytest              win32evtlog
afxres              inflection          pythoncom           win32evtlogutil
aifc                iniconfig           pytz                win32file
alabaster           inspect             pywin               win32gui
anaconda_navigator  intervaltree        pywin32_bootstrap   win32gui_struct
anaconda_project    io                  pywin32_testutil    win32help
antigravity         ipaddress           pywintypes          win32inet
anyio               ipykernel           pywt                win32inetcon
appdirs             ipykernel_launcher  pyximport           win32job
argh                ipython_genutils    qdarkstyle          win32lz
argon2              ipywidgets          qstylizer           win32net
argparse            isapi               qtawesome           win32netcon
array               isort               qtconsole           win32pdh
arrow               isympy              qtpy                win32pdhquery
asn1crypto          itertools           queue               win32pdhutil
ast                 itsdangerous        quopri              win32pipe
astroid             jdcal               random              win32print
astropy             jedi                rasutil             win32process
async_generator     jinja2              re                  win32profile
asynchat            jinja2_time         readline            win32ras
asyncio             joblib              regcheck            win32rcparser
asyncore            json                regex               win32security
atexit              json5               regutil             win32service
atomicwrites        jsonschema          repo_cli            win32serviceutil
attr                jupyter             reprlib             win32timezone
audioop             jupyter_client      requests            win32trace
autopep8            jupyter_console     rlcompleter         win32traceutil
autoreload          jupyter_core        rmagic              win32transaction
babel               jupyter_server      rope                win32ts
backcall            jupyterlab          rtree               win32ui
backports           jupyterlab_pygments ruamel_yaml         win32uiole
base64              jupyterlab_server   run                 win32verstamp
bcrypt              jupyterlab_widgets  runpy               win32wnet
bdb                 jwt                 sched               win_inet_pton
binaryornot         keyring             scipy               win_unicode_console
binascii            keyword             scripts             wincertstore
binhex              kiwisolver          seaborn             winerror
binstar_client      lazy_object_proxy   secrets             winioctlcon
bisect              lib2to3             select              winnt
bitarray            libarchive          selectors           winperf
bkcharts            libfuturize         send2trash          winpty
black               libpasteurize       servicemanager      winreg
blackd              lief                setuptools          winsound
bleach              linecache           shelve              winxpgui
blib2to3            llvmlite            shlex               winxptheme
bokeh               locale              shutil              wrapt
boto                locket              signal              wsgiref
bottleneck          logging             simplegeneric       xdrlib
brotli              lxml                singledispatch      xlrd
bs4                 lzma                sip                 xlsxwriter
builtins            mailbox             sipconfig           xlwings
bz2                 mailcap             sipdistutils        xlwt
cProfile            markupsafe          site                xml
cached_property     marshal             six                 xmlrpc
calendar            math                skimage             xmltodict
certifi             matplotlib          sklearn             xxsubtype
cffi                matplotlib_inline   sklearnex           yaml
cgi                 mccabe              slugify             yapf
cgitb               menuinst            smtpd               yapftests
chardet             mimetypes           smtplib             zict
charset_normalizer  mistune             sndhdr              zipapp
chunk               mkl                 sniffio             zipfile
click               mkl_fft             snowballstemmer     zipimport
cloudpickle         mkl_random          socket              zipp
clyent              mmap                socketserver        zlib
cmath               mmapfile            socks               zmq
cmd                 mmsystem            sockshandler        zoneinfo
code                mock                sortedcollections   zope

Enter any module name to get more help.  Or, type "modules spam" to search
for modules whose name or summary contain the string "spam".

#79****
import sys
str1="One"
x=2
L=[1,2,"Red","White"]

print("Size Of ", str1,"=",str(sys.getsizeof(str1)),"in bytes")
print("Size of ",x,"=",(sys.getsizeof(x)),"in bytes")
print("Size of ",L,"=",sys.getsizeof(L),"in bytes")
Size Of  One = 52 in bytes
Size of  2 = 28 in bytes
Size of  [1, 2, 'Red', 'White'] = 120 in bytes
#80******Recursion Limit
import sys
print()
print("Current value of recursion imit=")
print(sys.getrecursionlimit())

sys.setrecursionlimit(1000)
new_rec_limit=sys.getrecursionlimit()
print(new_rec_limit)
Current value of recursion imit=
1000
1000
#81***String concatenation
x="one"
y="Two"
list_of_obj=["Random","Stuff"]

print(x+y)

print("%s%s%s"%(x,y,list_of_obj))

v='_'.join(list_of_obj)
print(v)
oneTwo
oneTwo['Random', 'Stuff']
Random_Stuff
#82 Tuple,List,Set, Dictionary sum of members

import math
#1.container in general
my_list = [1,3,5,2,4]
print ("The sum of my_list is", sum(my_list))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_13564/3135846520.py in <module>
      4 #1.container in general
      5 my_list = [1,3,5,2,4]
----> 6 print ("The sum of my_list is", sum(my_list))

TypeError: 'int' object is not callable
#82
def dict_sum(nums):
    num_sum=0
    
#83
def numComp(n):
    myList=[10,20,30,40]
    count=0
    for x in myList:
        if n < x:
            count=0
            break
        else:
            count=count+1
    return count

print(numComp(25))
0
#83
num=[2,3,4,5]
print()
print(all(x>1 for x in num))
print(all(x>4 for x in num))
True
False
#84
def charCountStr(str1, chars):
    counts=0
    for x in str1:
        if x ==chars:
            counts=counts+1
        
    return counts

print(charCountStr("bananasaraa","a"))
6
#84
s="bananasara"
print(s.count("a"))
5
#85
import os
path="abx.txt"

if os.path.isdir(path):
    print("\n It is a directory")
elif os.path.isfile(path):
    print("\n It is just a file")
else:
    print("It is special file(socket, fifo device file)")
print()
It is special file(socket, fifo device file)

#86*****Ascii Code please download table from solution
print(ord('a'))
print(ord('A'))
97
65
#87
import os
#print(sizeof(abc.txt))
file_size=os.path.getsize("abc.txt")

#Alternate Solution
import os
file=open('main.py')
file.seek(0,os.SEEK_END)
print("size of the file is: ",file.tell())
---------------------------------------------------------------------------
FileNotFoundError                         Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_9308/739530283.py in <module>
      2 import os
      3 #print(sizeof(abc.txt))
----> 4 file_size=os.path.getsize("abc.txt")
      5 
      6 #Alternate Solution

~\anaconda3\lib\genericpath.py in getsize(filename)
     48 def getsize(filename):
     49     """Return the size of a file, reported by os.stat()."""
---> 50     return os.stat(filename).st_size
     51 
     52 

FileNotFoundError: [WinError 2] The system cannot find the file specified: 'abc.txt'
#88****** formatting
x=30
y=20

print("%d+%d=%d"%(x,y,x+y))
print("{0}+{1}={2}".format(x,y,x+y))
print("{}+{}={}".format(x,y,x+y))
30+20=50
30+20=50
30+20=50
#89
def condTest(var1):
    if var1==1:
        return "First Day of Month"
    else:
        pass
condTest(4)
#90
def file_copy(src, dest):
    with open(src) as f, open(dest, 'w') as d:
        d.write(f.read())
        file_copy("untitled0.py", "z.py")
        with open('z.py', 'r') as filehandle:
            for line in filehandle:
                print(line, end = '')
#91
x=30
y=20
sumOfNum=x+y

x=sumOfNum-x
y=sumOfNum-y
print(x,y)
20 30
91
x=30 y=20

x=temp temp=y y=x

print(x,y

#91
x=30 
y=20
temp=0

temp =x
x=y
y=temp

print(x,y)
20 30
#92
print()
print("\#{'}${\"}@/")
print("\#{'}${"'"'"}@/")
print(r"""\#{'}${"}@/""")
print('\#{\'}${"}@/')
print('\#{'"'"'}${"}@/')
print(r'''\#{'}${"}@/''')
print()
\#{'}${"}@/
\#{'}${"}@/
\#{'}${"}@/
\#{'}${"}@/
\#{'}${"}@/
\#{'}${"}@/

#93***indentity, type, id of an object
x=10
print("identity of an object x: ",x)
print("Type of an object x: ",type(x))
print("id of an object x: ",id(x))
identity of an object x:  10
Type of an object x:  <class 'int'>
id of an object x:  2136235862608
#94****convert byte string to integer list

#Solution 1
x=b'abc'#b represents BYTES
print()
print("convert byte of strings into integer: ")
print(list(x))
convert byte of strings into integer: 
[97, 98, 99]
#94****convert byte string to integer list

#Solution 2
S="The quick brown fox jumped into the wall"
print("Original String ")
print(S)
nums=[]
print("Convert bytes of string into integers: ")
for chr in S:
    nums.append(ord(chr))#USE of ORD Function
print(nums)
Original String 
The quick brown fox jumped into the wall
Convert bytes of string into integers: 
[84, 104, 101, 32, 113, 117, 105, 99, 107, 32, 98, 114, 111, 119, 110, 32, 102, 111, 120, 32, 106, 117, 109, 112, 101, 100, 32, 105, 110, 116, 111, 32, 116, 104, 101, 32, 119, 97, 108, 108]
#95 **** Check string is numeric or not
#solution-1
str1='a123.001'
str2='123'

try:
    i=float(str1)
except(ValueError,TypeError):
    print("Not Numeric")
print("")
Not Numeric
Numeric
#95 **** Check string is numeric or not
#solution-2 doe not work for float
text=input("Input words or numbers: ")
if text.isdigit():
    print("Input value is numbers")
else:
    print("input value is string")
Input words or numbers: kbc
input value is string
#96
import traceback
print()
def f1():
    return abc()
def abc():
    traceback.print_stack()
f1()
print()

  File "C:\Users\przir\anaconda3\lib\runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "C:\Users\przir\anaconda3\lib\runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "C:\Users\przir\anaconda3\lib\site-packages\ipykernel_launcher.py", line 16, in <module>
    app.launch_new_instance()
  File "C:\Users\przir\anaconda3\lib\site-packages\traitlets\config\application.py", line 846, in launch_instance
    app.start()
  File "C:\Users\przir\anaconda3\lib\site-packages\ipykernel\kernelapp.py", line 677, in start
    self.io_loop.start()
  File "C:\Users\przir\anaconda3\lib\site-packages\tornado\platform\asyncio.py", line 199, in start
    self.asyncio_loop.run_forever()
  File "C:\Users\przir\anaconda3\lib\asyncio\base_events.py", line 596, in run_forever
    self._run_once()
  File "C:\Users\przir\anaconda3\lib\asyncio\base_events.py", line 1890, in _run_once
    handle._run()
  File "C:\Users\przir\anaconda3\lib\asyncio\events.py", line 80, in _run
    self._context.run(self._callback, *self._args)
  File "C:\Users\przir\anaconda3\lib\site-packages\ipykernel\kernelbase.py", line 457, in dispatch_queue
    await self.process_one()
  File "C:\Users\przir\anaconda3\lib\site-packages\ipykernel\kernelbase.py", line 446, in process_one
    await dispatch(*args)
  File "C:\Users\przir\anaconda3\lib\site-packages\ipykernel\kernelbase.py", line 353, in dispatch_shell
    await result
  File "C:\Users\przir\anaconda3\lib\site-packages\ipykernel\kernelbase.py", line 648, in execute_request
    reply_content = await reply_content
  File "C:\Users\przir\anaconda3\lib\site-packages\ipykernel\ipkernel.py", line 353, in do_execute
    res = shell.run_cell(code, store_history=store_history, silent=silent)
  File "C:\Users\przir\anaconda3\lib\site-packages\ipykernel\zmqshell.py", line 533, in run_cell
    return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)
  File "C:\Users\przir\anaconda3\lib\site-packages\IPython\core\interactiveshell.py", line 2901, in run_cell
    result = self._run_cell(
  File "C:\Users\przir\anaconda3\lib\site-packages\IPython\core\interactiveshell.py", line 2947, in _run_cell
    return runner(coro)
  File "C:\Users\przir\anaconda3\lib\site-packages\IPython\core\async_helpers.py", line 68, in _pseudo_sync_runner
    coro.send(None)
  File "C:\Users\przir\anaconda3\lib\site-packages\IPython\core\interactiveshell.py", line 3172, in run_cell_async
    has_raised = await self.run_ast_nodes(code_ast.body, cell_name,
  File "C:\Users\przir\anaconda3\lib\site-packages\IPython\core\interactiveshell.py", line 3364, in run_ast_nodes
    if (await self.run_code(code, result,  async_=asy)):
  File "C:\Users\przir\anaconda3\lib\site-packages\IPython\core\interactiveshell.py", line 3444, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "C:\Users\przir\AppData\Local\Temp/ipykernel_9308/2708431505.py", line 8, in <module>
    f1()
  File "C:\Users\przir\AppData\Local\Temp/ipykernel_9308/2708431505.py", line 5, in f1
    return abc()
  File "C:\Users\przir\AppData\Local\Temp/ipykernel_9308/2708431505.py", line 7, in abc
    traceback.print_stack()
#97

s_var_names = sorted((set(globals().keys()) | set(__builtins__.__dict__.keys())) - set('_ names i'.split()))
print()
print( '\n'.join(' '.join(s_var_names[i:i+8]) for i in range(0, len(s_var_names), 8)) )
print()
ArithmeticError AssertionError AttributeError BaseException BlockingIOError BrokenPipeError BufferError BytesWarning
ChildProcessError ConnectionAbortedError ConnectionError ConnectionRefusedError ConnectionResetError DeprecationWarning EOFError Ellipsis
EnvironmentError Exception False FileExistsError FileNotFoundError FloatingPointError FutureWarning GeneratorExit
IOError ImportError ImportWarning In IndentationError IndexError InterruptedError IsADirectoryError
KeyError KeyboardInterrupt LookupError MemoryError ModuleNotFoundError NameError None NotADirectoryError
NotImplemented NotImplementedError OSError Out OverflowError PendingDeprecationWarning PermissionError ProcessLookupError
RecursionError ReferenceError ResourceWarning RuntimeError RuntimeWarning S StopAsyncIteration StopIteration
SyntaxError SyntaxWarning SystemError SystemExit TabError TimeoutError True TypeError
UnboundLocalError UnicodeDecodeError UnicodeEncodeError UnicodeError UnicodeTranslateError UnicodeWarning UserWarning ValueError
Warning WindowsError ZeroDivisionError _36 __ __IPYTHON__ ___ __build_class__
__builtin__ __builtins__ __debug__ __doc__ __import__ __loader__ __name__ __package__
__spec__ _dh _i _i1 _i10 _i11 _i12 _i13
_i14 _i15 _i16 _i17 _i18 _i19 _i2 _i20
_i21 _i22 _i23 _i24 _i25 _i26 _i27 _i28
_i29 _i3 _i30 _i31 _i32 _i33 _i34 _i35
_i36 _i37 _i38 _i39 _i4 _i40 _i41 _i42
_i43 _i44 _i45 _i46 _i47 _i48 _i49 _i5
_i50 _i51 _i52 _i53 _i54 _i55 _i56 _i57
_i58 _i59 _i6 _i60 _i61 _i62 _i63 _i7
_i8 _i9 _ih _ii _iii _oh abc abs
all any ascii bin bool breakpoint bytearray bytes
callable charCountStr chr classmethod compile complex condTest copyright
credits delattr dict dir display divmod enumerate eval
exec execfile exit f1 file_copy filter float format
frozenset get_ipython getattr globals hasattr hash help hex
id input int isinstance issubclass iter len license
list locals map max memoryview min next num
numComp nums object oct open ord os path
pow print property quit range repr reversed round
runfile s set setattr slice sorted staticmethod str
str1 str2 sum sumOfNum super temp text traceback
tuple type vars x y zip

#98****System time
#solution-1
import time
print()
print(time.ctime())
print()
Thu May  5 19:56:31 2022

#98****System time
#solution-2

import datetime
print(datetime.datetime.now())
2022-05-05 19:57:27.787800
#99
#100 Solution-1
import socket
host_name=socket.gethostname()
print("HostName: ",host_name)
HostName:  LAPTOP-SOUD7UOF
#101
from http.client import HTTPConnection
conn = HTTPConnection("example.com")
conn.request("GET", "/")  
result = conn.getresponse()
# retrieves the entire contents.  
contents = result.read() 
print(contents)
b'<!doctype html>\n<html>\n<head>\n    <title>Example Domain</title>\n\n    <meta charset="utf-8" />\n    <meta http-equiv="Content-type" content="text/html; charset=utf-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1" />\n    <style type="text/css">\n    body {\n        background-color: #f0f0f2;\n        margin: 0;\n        padding: 0;\n        font-family: -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;\n        \n    }\n    div {\n        width: 600px;\n        margin: 5em auto;\n        padding: 2em;\n        background-color: #fdfdff;\n        border-radius: 0.5em;\n        box-shadow: 2px 3px 7px 2px rgba(0,0,0,0.02);\n    }\n    a:link, a:visited {\n        color: #38488f;\n        text-decoration: none;\n    }\n    @media (max-width: 700px) {\n        div {\n            margin: 0 auto;\n            width: auto;\n        }\n    }\n    </style>    \n</head>\n\n<body>\n<div>\n    <h1>Example Domain</h1>\n    <p>This domain is for use in illustrative examples in documents. You may use this\n    domain in literature without prior coordination or asking for permission.</p>\n    <p><a href="https://www.iana.org/domains/example">More information...</a></p>\n</div>\n</body>\n</html>\n'
#101
import requests
data = requests.get('https://google.com/')
print(data.text)
<!doctype html><html itemscope="" itemtype="http://schema.org/WebPage" lang="en"><head><meta content="Search the world's information, including webpages, images, videos and more. Google has many special features to help you find exactly what you're looking for." name="description"><meta content="noodp" name="robots"><meta content="text/html; charset=UTF-8" http-equiv="Content-Type"><meta content="/images/branding/googleg/1x/googleg_standard_color_128dp.png" itemprop="image"><title>Google</title><script nonce="sGNfqEQSt7hGzpgEXDh3-g">(function(){window.google={kEI:'rGZ0YpOCEqKYptQPlNSouAc',kEXPI:'0,1302536,56873,1709,4350,206,2414,2390,926,1390,383,246,5,1354,4013,1238,1122515,1197697,697,380097,16114,19398,9286,17572,4859,1361,9290,3028,17581,4020,978,13228,3847,4192,6430,22741,5081,1593,1279,2742,149,1103,840,1983,4314,3514,606,2023,1777,520,14670,3227,2845,7,5599,11851,7539,4086,4695,1851,6397,8927,432,3,346,1244,1,5444,804,10668,2652,4,1528,2304,923,6116,22023,3050,2658,7356,13659,2980,1457,9358,5993,1435,5791,2566,4094,4052,3,3541,1,11942,2321,448,27443,2,14022,1931,442,342,255,2993,2300,5853,11623,5679,1020,2379,2721,18260,1,8,7753,4568,6253,23424,830,422,5835,14967,4333,2204,2083,1803,1394,445,2,2,1,1385,2064,7341,166,6356,7314,153,1416,1,436,8155,6582,568,231,2,3,7,3030,859,7871,2908,2163,5178,2621,782,1,8,1035,11937,770,265,846,3738,1921,1632,8,11,588,24,880,1391,2829,1764,789,488,1663,3,886,164,431,771,1008,1908,515,3,207,490,4,393,1029,3461,678,569,666,1511,386,1359,2645,643,201,747,2253,192,3,1,2,124,290,241,1184,56,284,40,77,2,3,7,376,608,325,899,1387,883,2441,15,10,557,5423867,2729,497,71,101,60,5994716,2801868,1326,3,1877,1,2562,1,748,141,795,6164,6751,155,17,13,72,139,4,2,20,2,169,13,19,46,5,39,644,29,2,2,1,2,1,2,2,7,4,1,2,2,2,2,2,2,1052,1,1,158,3,2,2,2,2,2,4,2,3,3,2011,1002,312,155,15,343,10,4,88,3,3,3,1,1,1,1,33,3,5,4,9,4,11,6,9,4,9,13,9,16,2,3,43,29,42,1,10,3,4,23650958,299809,2738463,1303679,1964,2935,159,1358,6902,2943,1136,1240,2129,1276',kBL:'R5aA'};google.sn='webhp';google.kHL='en';})();(function(){
var f=this||self;var h,k=[];function l(a){for(var b;a&&(!a.getAttribute||!(b=a.getAttribute("eid")));)a=a.parentNode;return b||h}function m(a){for(var b=null;a&&(!a.getAttribute||!(b=a.getAttribute("leid")));)a=a.parentNode;return b}
function n(a,b,c,d,g){var e="";c||-1!==b.search("&ei=")||(e="&ei="+l(d),-1===b.search("&lei=")&&(d=m(d))&&(e+="&lei="+d));d="";!c&&f._cshid&&-1===b.search("&cshid=")&&"slh"!==a&&(d="&cshid="+f._cshid);c=c||"/"+(g||"gen_204")+"?atyp=i&ct="+a+"&cad="+b+e+"&zx="+Date.now()+d;/^http:/i.test(c)&&"https:"===window.location.protocol&&(google.ml&&google.ml(Error("a"),!1,{src:c,glmm:1}),c="");return c};h=google.kEI;google.getEI=l;google.getLEI=m;google.ml=function(){return null};google.log=function(a,b,c,d,g){if(c=n(a,b,c,d,g)){a=new Image;var e=k.length;k[e]=a;a.onerror=a.onload=a.onabort=function(){delete k[e]};a.src=c}};google.logUrl=n;}).call(this);(function(){
google.y={};google.sy=[];google.x=function(a,b){if(a)var c=a.id;else{do c=Math.random();while(google.y[c])}google.y[c]=[a,b];return!1};google.sx=function(a){google.sy.push(a)};google.lm=[];google.plm=function(a){google.lm.push.apply(google.lm,a)};google.lq=[];google.load=function(a,b,c){google.lq.push([[a],b,c])};google.loadAll=function(a,b){google.lq.push([a,b])};google.bx=!1;google.lx=function(){};}).call(this);google.f={};(function(){
document.documentElement.addEventListener("submit",function(b){var a;if(a=b.target){var c=a.getAttribute("data-submitfalse");a="1"===c||"q"===c&&!a.elements.q.value?!0:!1}else a=!1;a&&(b.preventDefault(),b.stopPropagation())},!0);document.documentElement.addEventListener("click",function(b){var a;a:{for(a=b.target;a&&a!==document.documentElement;a=a.parentElement)if("A"===a.tagName){a="1"===a.getAttribute("data-nohref");break a}a=!1}a&&b.preventDefault()},!0);}).call(this);</script><style>#gbar,#guser{font-size:13px;padding-top:1px !important;}#gbar{height:22px}#guser{padding-bottom:7px !important;text-align:right}.gbh,.gbd{border-top:1px solid #c9d7f1;font-size:1px}.gbh{height:0;position:absolute;top:24px;width:100%}@media all{.gb1{height:22px;margin-right:.5em;vertical-align:top}#gbar{float:left}}a.gb1,a.gb4{text-decoration:underline !important}a.gb1,a.gb4{color:#00c !important}.gbi .gb4{color:#dd8e27 !important}.gbf .gb4{color:#900 !important}
</style><style>body,td,a,p,.h{font-family:arial,sans-serif}body{margin:0;overflow-y:scroll}#gog{padding:3px 8px 0}td{line-height:.8em}.gac_m td{line-height:17px}form{margin-bottom:20px}.h{color:#1558d6}em{font-weight:bold;font-style:normal}.lst{height:25px;width:496px}.gsfi,.lst{font:18px arial,sans-serif}.gsfs{font:17px arial,sans-serif}.ds{display:inline-box;display:inline-block;margin:3px 0 4px;margin-left:4px}input{font-family:inherit}body{background:#fff;color:#000}a{color:#4b11a8;text-decoration:none}a:hover,a:active{text-decoration:underline}.fl a{color:#1558d6}a:visited{color:#4b11a8}.sblc{padding-top:5px}.sblc a{display:block;margin:2px 0;margin-left:13px;font-size:11px}.lsbb{background:#f8f9fa;border:solid 1px;border-color:#dadce0 #70757a #70757a #dadce0;height:30px}.lsbb{display:block}#WqQANb a{display:inline-block;margin:0 12px}.lsb{background:url(/images/nav_logo229.png) 0 -261px repeat-x;border:none;color:#000;cursor:pointer;height:30px;margin:0;outline:0;font:15px arial,sans-serif;vertical-align:top}.lsb:active{background:#dadce0}.lst:focus{outline:none}</style><script nonce="sGNfqEQSt7hGzpgEXDh3-g">(function(){window.google.erd={jsr:1,bv:1578,de:true};
var f=this||self;var g,h=null!=(g=f.mei)?g:1,m,n=null!=(m=f.sdo)?m:!0,p=0,q,r=google.erd,u=r.jsr;google.ml=function(a,b,d,k,c){c=void 0===c?2:c;b&&(q=a&&a.message);if(google.dl)return google.dl(a,c,d),null;if(0>u){window.console&&console.error(a,d);if(-2===u)throw a;b=!1}else b=!a||!a.message||"Error loading script"===a.message||p>=h&&!k?!1:!0;if(!b)return null;p++;d=d||{};var e=c;c=encodeURIComponent;b="/gen_204?atyp=i&ei="+c(google.kEI);google.kEXPI&&(b+="&jexpid="+c(google.kEXPI));b+="&srcpg="+c(google.sn)+"&jsr="+c(r.jsr)+"&bver="+c(r.bv)+("&jsel="+e);e=a.lineNumber;void 0!==e&&(b+="&line="+
e);var l=a.fileName;l&&(b+="&script="+c(l),e&&l===window.location.href&&(e=document.documentElement.outerHTML.split("\n")[e],b+="&cad="+c(e?e.substring(0,300):"No script found.")));for(var t in d)b+="&",b+=c(t),b+="=",b+=c(d[t]);b=b+"&emsg="+c(a.name+": "+a.message);b=b+"&jsst="+c(a.stack||"N/A");12288<=b.length&&(b=b.substr(0,12288));a=b;k||google.log(0,"",a);return a};window.onerror=function(a,b,d,k,c){q!==a&&(a=c instanceof Error?c:Error(a),void 0===d||"lineNumber"in a||(a.lineNumber=d),void 0===b||"fileName"in a||(a.fileName=b),google.ml(a,!1,void 0,!1,"SyntaxError"===a.name||"SyntaxError"===a.message.substring(0,11)?2:0));q=null;n&&p>=h&&(window.onerror=null)};})();</script></head><body bgcolor="#fff"><script nonce="sGNfqEQSt7hGzpgEXDh3-g">(function(){var src='/images/nav_logo229.png';var iesg=false;document.body.onload = function(){window.n && window.n();if (document.images){new Image().src=src;}
if (!iesg){document.f&&document.f.q.focus();document.gbqf&&document.gbqf.q.focus();}
}
})();</script><div id="mngb"><div id=gbar><nobr><b class=gb1>Search</b> <a class=gb1 href="https://www.google.com/imghp?hl=en&tab=wi">Images</a> <a class=gb1 href="https://maps.google.com/maps?hl=en&tab=wl">Maps</a> <a class=gb1 href="https://play.google.com/?hl=en&tab=w8">Play</a> <a class=gb1 href="https://www.youtube.com/?gl=US&tab=w1">YouTube</a> <a class=gb1 href="https://news.google.com/?tab=wn">News</a> <a class=gb1 href="https://mail.google.com/mail/?tab=wm">Gmail</a> <a class=gb1 href="https://drive.google.com/?tab=wo">Drive</a> <a class=gb1 style="text-decoration:none" href="https://www.google.com/intl/en/about/products?tab=wh"><u>More</u> &raquo;</a></nobr></div><div id=guser width=100%><nobr><span id=gbn class=gbi></span><span id=gbf class=gbf></span><span id=gbe></span><a href="http://www.google.com/history/optout?hl=en" class=gb4>Web History</a> | <a  href="/preferences?hl=en" class=gb4>Settings</a> | <a target=_top id=gb_70 href="https://accounts.google.com/ServiceLogin?hl=en&passive=true&continue=https://www.google.com/&ec=GAZAAQ" class=gb4>Sign in</a></nobr></div><div class=gbh style=left:0></div><div class=gbh style=right:0></div></div><center><br clear="all" id="lgpd"><div id="lga"><img alt="Google" height="92" src="/images/branding/googlelogo/1x/googlelogo_white_background_color_272x92dp.png" style="padding:28px 0 14px" width="272" id="hplogo"><br><br></div><form action="/search" name="f"><table cellpadding="0" cellspacing="0"><tr valign="top"><td width="25%">&nbsp;</td><td align="center" nowrap=""><input name="ie" value="ISO-8859-1" type="hidden"><input value="en" name="hl" type="hidden"><input name="source" type="hidden" value="hp"><input name="biw" type="hidden"><input name="bih" type="hidden"><div class="ds" style="height:32px;margin:4px 0"><input class="lst" style="margin:0;padding:5px 8px 0 6px;vertical-align:top;color:#000" autocomplete="off" value="" title="Google Search" maxlength="2048" name="q" size="57"></div><br style="line-height:0"><span class="ds"><span class="lsbb"><input class="lsb" value="Google Search" name="btnG" type="submit"></span></span><span class="ds"><span class="lsbb"><input class="lsb" id="tsuid1" value="I'm Feeling Lucky" name="btnI" type="submit"><script nonce="sGNfqEQSt7hGzpgEXDh3-g">(function(){var id='tsuid1';document.getElementById(id).onclick = function(){if (this.form.q.value){this.checked = 1;if (this.form.iflsig)this.form.iflsig.disabled = false;}
else top.location='/doodles/';};})();</script><input value="AJiK0e8AAAAAYnR0vD5lZ_U-dS9dKEFyfwAseNmoEL9_" name="iflsig" type="hidden"></span></span></td><td class="fl sblc" align="left" nowrap="" width="25%"><a href="/advanced_search?hl=en&amp;authuser=0">Advanced search</a></td></tr></table><input id="gbv" name="gbv" type="hidden" value="1"><script nonce="sGNfqEQSt7hGzpgEXDh3-g">(function(){
var a,b="1";if(document&&document.getElementById)if("undefined"!=typeof XMLHttpRequest)b="2";else if("undefined"!=typeof ActiveXObject){var c,d,e=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"];for(c=0;d=e[c++];)try{new ActiveXObject(d),b="2"}catch(h){}}a=b;if("2"==a&&-1==location.search.indexOf("&gbv=2")){var f=google.gbvu,g=document.getElementById("gbv");g&&(g.value=a);f&&window.setTimeout(function(){location.href=f},0)};}).call(this);</script></form><div id="gac_scont"></div><div style="font-size:83%;min-height:3.5em"><br></div><span id="footer"><div style="font-size:10pt"><div style="margin:19px auto;text-align:center" id="WqQANb"><a href="/intl/en/ads/">Advertising Programs</a><a href="/services/">Business Solutions</a><a href="/intl/en/about.html">About Google</a></div></div><p style="font-size:8pt;color:#70757a">&copy; 2022 - <a href="/intl/en/policies/privacy/">Privacy</a> - <a href="/intl/en/policies/terms/">Terms</a></p></span></center><script nonce="sGNfqEQSt7hGzpgEXDh3-g">(function(){window.google.cdo={height:757,width:1440};(function(){
var a=window.innerWidth,b=window.innerHeight;if(!a||!b){var c=window.document,d="CSS1Compat"==c.compatMode?c.documentElement:c.body;a=d.clientWidth;b=d.clientHeight}a&&b&&(a!=google.cdo.width||b!=google.cdo.height)&&google.log("","","/client_204?&atyp=i&biw="+a+"&bih="+b+"&ei="+google.kEI);}).call(this);})();</script> <script nonce="sGNfqEQSt7hGzpgEXDh3-g">(function(){google.xjs={ck:'',cs:'',excm:[]};})();</script>  <script nonce="sGNfqEQSt7hGzpgEXDh3-g">(function(){var u='/xjs/_/js/k\x3dxjs.hp.en_US.LZDvaSbOQsg.O/am\x3dAOAJAEACkA/d\x3d1/ed\x3d1/esmo\x3d1/rs\x3dACT90oHaBnq7zeEMXHmTj5PobfymvRgwEg/m\x3dsb_he,d';
var d=this||self,e=function(a){return a};var g;var l=function(a,b){this.g=b===h?a:""};l.prototype.toString=function(){return this.g+""};var h={};
function n(){var a=u;google.lx=function(){p(a);google.lx=function(){}};google.bx||google.lx()}
function p(a){google.timers&&google.timers.load&&google.tick&&google.tick("load","xjsls");var b=document;var c="SCRIPT";"application/xhtml+xml"===b.contentType&&(c=c.toLowerCase());c=b.createElement(c);if(void 0===g){b=null;var k=d.trustedTypes;if(k&&k.createPolicy){try{b=k.createPolicy("goog#html",{createHTML:e,createScript:e,createScriptURL:e})}catch(q){d.console&&d.console.error(q.message)}g=b}else g=b}a=(b=g)?b.createScriptURL(a):a;a=new l(a,h);c.src=a instanceof l&&a.constructor===l?a.g:"type_error:TrustedResourceUrl";var f,m;(f=(a=null==(m=(f=(c.ownerDocument&&c.ownerDocument.defaultView||window).document).querySelector)?void 0:m.call(f,"script[nonce]"))?a.nonce||a.getAttribute("nonce")||"":"")&&c.setAttribute("nonce",f);document.body.appendChild(c);google.psa=!0};google.xjsu=u;setTimeout(function(){n()},0);})();function _DumpException(e){throw e;}
function _F_installCss(c){}
(function(){google.jl={attn:false,blt:'none',chnk:0,dw:false,dwu:true,emtn:0,end:0,ine:false,injs:'none',injt:0,lls:'default',pdt:0,rep:0,snet:true,strt:0,ubm:false,uwp:true};})();(function(){var pmc='{\x22d\x22:{},\x22sb_he\x22:{\x22agen\x22:true,\x22cgen\x22:true,\x22client\x22:\x22heirloom-hp\x22,\x22dh\x22:true,\x22dhqt\x22:true,\x22ds\x22:\x22\x22,\x22ffql\x22:\x22en\x22,\x22fl\x22:true,\x22host\x22:\x22google.com\x22,\x22isbh\x22:28,\x22jsonp\x22:true,\x22msgs\x22:{\x22cibl\x22:\x22Clear Search\x22,\x22dym\x22:\x22Did you mean:\x22,\x22lcky\x22:\x22I\\u0026#39;m Feeling Lucky\x22,\x22lml\x22:\x22Learn more\x22,\x22oskt\x22:\x22Input tools\x22,\x22psrc\x22:\x22This search was removed from your \\u003Ca href\x3d\\\x22/history\\\x22\\u003EWeb History\\u003C/a\\u003E\x22,\x22psrl\x22:\x22Remove\x22,\x22sbit\x22:\x22Search by image\x22,\x22srch\x22:\x22Google Search\x22},\x22ovr\x22:{},\x22pq\x22:\x22\x22,\x22refpd\x22:true,\x22rfs\x22:[],\x22sbas\x22:\x220 3px 8px 0 rgba(0,0,0,0.2),0 0 0 1px rgba(0,0,0,0.08)\x22,\x22sbpl\x22:16,\x22sbpr\x22:16,\x22scd\x22:10,\x22stok\x22:\x22lzSJmWOGKgQ-RhuoWSc8HBL3Zbs\x22,\x22uhde\x22:false}}';google.pmc=JSON.parse(pmc);})();</script>        </body></html>
#102
import subprocess
# file and directory listing
returned_text = subprocess.check_output("dir", shell=True, universal_newlines=True)
print("dir command to list file and directory")
print(returned_text)
dir command to list file and directory
 Volume in drive C is OS
 Volume Serial Number is 246C-D7CD

 Directory of C:\Users\przir

05/05/2022  08:07 PM    <DIR>          .
05/05/2022  08:07 PM    <DIR>          ..
04/23/2022  02:52 PM    <DIR>          .anaconda
04/23/2022  02:52 PM    <DIR>          .astropy
05/01/2022  08:09 PM    <DIR>          .conda
04/18/2022  12:28 PM                25 .condarc
04/18/2022  12:28 PM    <DIR>          .continuum
04/23/2022  08:53 AM    <DIR>          .ipynb_checkpoints
04/18/2022  12:29 PM    <DIR>          .ipython
04/18/2022  12:28 PM    <DIR>          .jupyter
04/23/2022  02:52 PM    <DIR>          .matplotlib
04/23/2022  02:53 PM    <DIR>          .spyder-py3
12/24/2021  04:10 PM    <DIR>          3D Objects
04/18/2022  12:23 PM    <DIR>          anaconda3
12/24/2021  04:10 PM    <DIR>          Contacts
12/06/2021  04:15 PM    <DIR>          Documents
05/01/2022  01:19 PM    <DIR>          Downloads
12/24/2021  04:10 PM    <DIR>          Favorites
04/18/2022  12:36 PM             1,867 First_prgm.ipynb
12/24/2021  04:10 PM    <DIR>          Links
12/24/2021  04:10 PM    <DIR>          Music
04/21/2022  08:34 PM    <DIR>          OneDrive
12/24/2021  04:10 PM    <DIR>          Saved Games
12/24/2021  04:10 PM    <DIR>          Searches
04/18/2022  12:29 PM                72 Untitled.ipynb
04/19/2022  11:01 AM             1,029 Untitled1.ipynb
04/23/2022  08:52 AM             1,223 Untitled2.ipynb
12/24/2021  04:10 PM    <DIR>          Videos
04/23/2022  08:49 AM            44,531 W3S_Exc_Basic_1.ipynb
05/05/2022  08:07 PM            80,234 W3S_Exc_Basic_1_2.ipynb
               7 File(s)        128,981 bytes
              23 Dir(s)  14,567,956,480 bytes free

#103 **** Exact filename form a given path
import os
print()
print(os.path.basename('/Users/przir/OneDrive/Desktop/Data Science'))
Data Science
#104
import os
print("\nEffective group id: ",os.getegid())
print("Effective user id: ",os.geteuid())
print("Real group id: ",os.getgid())
print("List of supplemental group ids: ",os.getgroups())
print()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_9308/849918924.py in <module>
      1 #104
      2 import os
----> 3 print("\nEffective group id: ",os.getegid())
      4 print("Effective user id: ",os.geteuid())
      5 print("Real group id: ",os.getgid())

AttributeError: module 'os' has no attribute 'getegid'
#105
import os
print(os.environ)
environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\przir\\AppData\\Roaming', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'LAPTOP-SOUD7UOF', 'COMSPEC': 'C:\\WINDOWS\\system32\\cmd.exe', 'CONDA_DEFAULT_ENV': 'base', 'CONDA_EXE': 'C:\\Users\\przir\\anaconda3\\Scripts\\conda.exe', 'CONDA_PROMPT_MODIFIER': '(base) ', 'CONDA_PYTHON_EXE': 'C:\\Users\\przir\\anaconda3\\python.exe', 'CONDA_SHLVL': '1', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer', 'FPS_BROWSER_USER_PROFILE_STRING': 'Default', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\przir', 'LOCALAPPDATA': 'C:\\Users\\przir\\AppData\\Local', 'LOGONSERVER': '\\\\LAPTOP-SOUD7UOF', 'NUMBER_OF_PROCESSORS': '2', 'ONEDRIVE': 'C:\\Users\\przir\\OneDrive', 'ONEDRIVECONSUMER': 'C:\\Users\\przir\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'C:\\Users\\przir\\anaconda3;C:\\Users\\przir\\anaconda3\\Library\\mingw-w64\\bin;C:\\Users\\przir\\anaconda3\\Library\\usr\\bin;C:\\Users\\przir\\anaconda3\\Library\\bin;C:\\Users\\przir\\anaconda3\\Scripts;C:\\Users\\przir\\anaconda3\\bin;C:\\Users\\przir\\anaconda3\\condabin;C:\\Users\\przir\\anaconda3;C:\\Users\\przir\\anaconda3\\Library\\mingw-w64\\bin;C:\\Users\\przir\\anaconda3\\Library\\usr\\bin;C:\\Users\\przir\\anaconda3\\Library\\bin;C:\\Users\\przir\\anaconda3\\Scripts;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0;C:\\WINDOWS\\System32\\OpenSSH;C:\\Users\\przir\\AppData\\Local\\Programs\\Python\\Python310\\Scripts;C:\\Users\\przir\\AppData\\Local\\Programs\\Python\\Python310;C:\\Users\\przir\\AppData\\Local\\Microsoft\\WindowsApps;.', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 122 Stepping 1, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '7a01', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PROMPT': '(base) $P$G', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\WINDOWS', 'TEMP': 'C:\\Users\\przir\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\przir\\AppData\\Local\\Temp', 'USERDOMAIN': 'LAPTOP-SOUD7UOF', 'USERDOMAIN_ROAMINGPROFILE': 'LAPTOP-SOUD7UOF', 'USERNAME': 'przir', 'USERPROFILE': 'C:\\Users\\przir', 'WINDIR': 'C:\\WINDOWS', 'CONDA_PREFIX': 'C:\\Users\\przir\\anaconda3', 'CONDA_ROOT': 'C:\\Users\\przir\\anaconda3', 'PYDEVD_USE_FRAME_EVAL': 'NO', 'JPY_INTERRUPT_EVENT': '2532', 'IPY_INTERRUPT_EVENT': '2532', 'JPY_PARENT_PID': '2620', 'TERM': 'xterm-color', 'CLICOLOR': '1', 'PAGER': 'cat', 'GIT_PAGER': 'cat', 'MPLBACKEND': 'module://matplotlib_inline.backend_inline'})
#106
import os.path
for path in [ 'test.txt', 'filename', '/user/system/test.txt', '/', '' ]:
    print('"%s" :' % path, os.path.splitext(path))
	
"test.txt" : ('test', '.txt')
"filename" : ('filename', '')
"/user/system/test.txt" : ('/user/system/test', '.txt')
"/" : ('/', '')
"" : ('', '')
#107
import os.path
import time

print('File         :'/Users/przir/OneDrive/Desktop/Data Science)
print('Access time  :', time.ctime(os.path.getatime(__file__)))
print('Modified time:', time.ctime(os.path.getmtime(__file__)))
print('Change time  :', time.ctime(os.path.getctime(__file__)))
print('Size         :', os.path.getsize(__file__))
  File "C:\Users\przir\AppData\Local\Temp/ipykernel_9308/818094709.py", line 5
    print('File         :',/Users/przir/OneDrive/Desktop/Data Science)
                           ^
SyntaxError: invalid syntax
#108
import os.path

for file in [ __file__, os.path.dirname(__file__), '/', './broken_link']:
    print('File        :', file)
    print('Absolute    :', os.path.isabs(file))
    print('Is File?    :', os.path.isfile(file))
    print('Is Dir?     :', os.path.isdir(file))
    print('Is Link?    :', os.path.islink(file))
    print('Exists?     :', os.path.exists(file))
    print('Link Exists?:', os.path.lexists(file))
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_9308/78028738.py in <module>
      2 import os.path
      3 
----> 4 for file in [ __file__, os.path.dirname(__file__), '/', './broken_link']:
      5     print('File        :', file)
      6     print('Absolute    :', os.path.isabs(file))

NameError: name '__file__' is not defined
#109
def numCheck(n):
    if n==0:
        print("Number is zero")
    elif n>0:
        print("Number is positive")
    else:
        print("Number is negative")
        
numCheck(-1)
Number is negative
#109*****short if method
#solution 2
n=float(input('Input a number '))
print('Number is positive ' if n>0 else 'Its zero 'if n==0 else 'number is negative')
Input a number 3
Number is positive 
#110*****anonymous function
num_list=[25,23,45,12,5,10]

result=list(filter(lambda x:(x%5==0),num_list))
            
print(result)
[25, 45, 5, 10]
#111
import glob
file_list = glob.glob('*.*')
print(file_list)
#Specific files
print(glob.glob('*.py'))
print(glob.glob('./[0-9].*'))
['First_prgm.ipynb', 'NTUSER.DAT', 'ntuser.dat.LOG1', 'ntuser.dat.LOG2', 'NTUSER.DAT{53b39e88-18c4-11ea-a811-000d3aa4692b}.TM.blf', 'NTUSER.DAT{53b39e88-18c4-11ea-a811-000d3aa4692b}.TMContainer00000000000000000001.regtrans-ms', 'NTUSER.DAT{53b39e88-18c4-11ea-a811-000d3aa4692b}.TMContainer00000000000000000002.regtrans-ms', 'ntuser.ini', 'Untitled.ipynb', 'Untitled1.ipynb', 'Untitled2.ipynb', 'W3S_Exc_Basic_1.ipynb', 'W3S_Exc_Basic_1_2.ipynb']
[]
[]
#112 ****List remove first item
num_list=[2,3,4,6,7,8]
print(num_list)
num_list.pop()
print(num_list)
num_list.remove(2)
print(num_list)
del num_list[0]
print(num_list)
[2, 3, 4, 6, 7, 8]
[2, 3, 4, 6, 7]
[3, 4, 6, 7]
[4, 6, 7]
#113
#Solution-1
x = 1.23
x_int = x.is_integer()
print("Check if x is an integer!")
print(x_int)
Check if x is an integer!
False
#113 ***** try catch block
#Solution-2
while True:
    try:
        a=int(input("input a number: "))
        break
    except ValueError:
        print("This is not a number: ")
        print()
#113
#Solution-3
x=1.0
x_int=isinstance(x,int)
print("Check if x is an integer! ")
print(x_int)
y=1
y_int=isinstance(y,int)
print("Check if y is an integer! ")
print(y_int)
 
#113
#Solution-3
x=1.0
x_int=isinstance(x,int)
print("Check if x is an integer! ")
print(x_int)
y=1
y_int=isinstance(y,int)
print("Check if y is an integer! ")
print(y_int)
Check if x is an integer! 
False
Check if y is an integer! 
True
#114******filter function
#Solution-1

num_list=[-1,12,0,34,-4,35]

def posNumFilter(num):
    if num>0:
        return True
    return False

num_list_pos=filter(posNumFilter,num_list)
print(list(num_list_pos))
[12, 34, 35]
#114******
#Solution-2 
num_list=[-1,12,0,34,-4,35]

num_list_pos=filter(lambda x:x>0,num_list)#(lambda VAR:CONDITION,INPUT)
print(list(num_list_pos))
[12, 34, 35]
#114******
#Solution-3 short for-if loops
num_list=[-1,12,0,34,-4,35]

num_list_pos=[n for n  in num_list if n>0]
print(num_list_pos)
[12, 34, 35]
#115 ***** Reduce function
from functools import reduce
num_list=[2,3,4,5,1]

num_list_prod=reduce((lambda x,y:x*y),num_list)
print(num_list_prod)
120
#115 *****
import math

num_list=[2,3,4,5,1]
num_list_prod=math.prod(num_list)
print(num_list_prod)
120
#116
str = u'\u0050\u0079\u0074\u0068\u006f\u006e \u0045\u0078\u0065\u0072\u0063\u0069\u0073\u0065\u0073 \u002d \u0077\u0033\u0072\u0065\u0073\u006f\u0075\u0072\u0063\u0065'
print()
print(str)
print()
Python Exercises - w3resource

#117*** Memory Location
str1 = "Python"
str2 = "Python"
 
print("\nMemory location of str1 =", hex(id(str1)))
print("Memory location of str2 =", hex(id(str2)))
print()
Memory location of str1 = 0x1fafa078b70
Memory location of str2 = 0x1fafa078b70

#118
num_list=[2,3,4,5,1]
values=bytearray(num_list)

print(values)
bytearray(b'\x02\x03\x04\x05\x01')
#119***** Rounded numbers
import math
x=1.123
#x_round=math.round(x)
print("rounded number is %.2f" %x)
print("rounded number is {:0.2f}".format(x))
rounded number is 1.12
rounded number is 1.12
#120****limiting length of string

str1="Abcdefmkl"

print("original string :",str1)
print("Trimmed String %.3s"%str1)
original string : Abcdefmkl
Trimmed String Abc
#121****try except block
try:
    x
except NameError:
    print("Variable is not defined ....!")
else:
    print("Variable is defined..!")
    
Variable is defined..!
#122 Returning Empty variable
#solution-1
n=20
d={"x":200}
l=[1,3,5]
t=(5,6,8)
print(type(n)())
print(type(d)())
print(type(l)())
print(type(t)())
0
{}
[5]
()
#122 Returning Empty variable
#solution-2
def empty_var(lst):
    return [type(i)() for i in lst]
lst=["python",{"x":12},[10,12,'sfsd']]
print("original list: ",lst)
print(empty_var(lst))
original list:  ['python', {'x': 12}, [10, 12, 'sfsd']]
['', {}, []]
#123 largest int,long and float
import sys
print("Float value information ",sys.float_info)
print("Integer Value information ",sys.int_info)
print("maximum size of integer ",sys.maxsize)
Float value information  sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)
Integer Value information  sys.int_info(bits_per_digit=30, sizeof_digit=4)
maximum size of integer  9223372036854775807
#124
x=20
y=20
z=200
if x==y==z:
    print("All variables have same value")
#124-All vars have same value solution-2
def multiple_var_equality(*var):
    for x in var:
        if x!=var[0]:
            return "All variables are not of same value"
    return "All variables are of same value"
print(multiple_var_equality(2,2,2,2))
All variables are of same value
#125-sum of all counts in a collections
import collections
num=[2,2,4,4,6,8,8,4,10]
print(sum(collections.Counter(num).values()))
9
#125-sum of all counts in a collections
import collections
num=[2,2,4,4,6,8,8,4,10]
print(len(num))
9
#126-actual module object for a given object
from inspect import getmodule
from math import sqrt
print(getmodule(sqrt))
<module 'math' (built-in)>
#126-actual module object for a given object
import inspect 
def add(x,y):
    return x+y
print(inspect.getmodule(add))
<module '__main__'>
#127
int_val=30
if int_val.bit_length()<=63:
    print((-2 ** 63).bit_length())
    print((2 ** 63).bit_length())
64
7
#128-lowercase letters exist in a string

str1='abCc'
print(any(c.islower() for c in str1))
True
#128--lowercase letters exist in a string
def lower_case_str(txt):
    ctr=0
    for char in txt:
        if(ord(char)>=97 and ord(char)<=122):
            ctr=ctr+1
        if(ctr>0):
            return True
str1='PYTHON'
print(lower_case_str(str1))
None
#129-add leading zeros to a string
#solution1:concat
str1="Champ"
str2=str1+'0000'
print(str2)
Champ0000
#129-add leading zeros to a string
#solution2:ljust/rjust functions

str1='122.22'
str1=str1.ljust(8,'0')
print(str1)

str2=str1.rjust(15,'0')
print(str2)
122.2200
0000000122.2200
#129-add leading zeros to a string
#solution3:string formatting
str1='122.22'
f_text='{:>010}'
str1=f_text.format(str1)
print(str1)
0000122.22
#130
import json
print(json.dumps({'Alex':1,'Suresh':2}))
{"Alex": 1, "Suresh": 2}
#131--did not understand this
var_list=['a','b','c']
x,y,z=(var_list+[None]*3)[:3]
print(x,y,z)
var_list=[100,10.25]
x,y=(var_list+[None]*2)[:2]
print(x,y)
a b c
100 10.25
#133
from timeit import default_timer
def timer(n):
    start=default_timer()
    #some code here
    for row in range(0,n):
        print(row)
    print(default_timer()-start)
    
timer(5)
timer(15)
0
1
2
3
4
0.0006566999945789576
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
0.0006753999623470008
#132****home directory path
import os.path
print(os.path.expanduser('~'))
print(os.path)
C:\Users\przir
<module 'ntpath' from 'C:\\Users\\przir\\anaconda3\\lib\\ntpath.py'>
#134 Solution 1
x=12
y=23
print(x ,y)
12 23
#135
x=30
print("value of x is \"",x,"\"")
print('value of x is "{}"'.format(x))
print("value of x is '{}'".format(x))
print("Value of x is \"%i\"" % x)
value of x is " 30 "
value of x is "30"
value of x is '30'
Value of x is "30"
#136 - find files and skip directories of a given directory.
import os
print([f for f in os.listdir('/home/Test') if os.path.isfile(os.path.join('/home/Test', f))])
---------------------------------------------------------------------------
FileNotFoundError                         Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_1768/2733900247.py in <module>
      1 #136
      2 import os
----> 3 print([f for f in os.listdir('/home/Test') if os.path.isfile(os.path.join('/home/Test', f))])

FileNotFoundError: [WinError 3] The system cannot find the path specified: '/home/Test'
#136-find files and skip directories of a given directory.
import os
user_path = 'd:/'
for fname in os.listdir(user_path):
   path = os.path.join(user_path, fname)
   if os.path.isdir(path):
       # skip directories
       continue
   # print the file names
   print(fname)
---------------------------------------------------------------------------
FileNotFoundError                         Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_1768/3007517136.py in <module>
      1 import os
      2 user_path = 'd:/'
----> 3 for fname in os.listdir(user_path):
      4    path = os.path.join(user_path, fname)
      5    if os.path.isdir(path):

FileNotFoundError: [WinError 3] The system cannot find the path specified: 'd:/'
#137****directory variable extraction
d={'Red':'Green'}
(c1,c2),=d.items()
print(c1)
print(c2)
Red
Green
#138
def fun_tf(x,y):
    if x==y:
        return 0
    else:
        return 1
    
print(fun_tf(0,1))
1
#138
x = 'true'
x = int(x == 'true')
print(x)
x = 'abcd'
x = int(x == 'true')
print(x)
1
0
import socket
addr = '127.0.0.2561'
try:
    socket.inet_aton(addr)
    print("Valid IP")
except socket.error:
    print("Invalid IP")
Invalid IP
#140****convert to binary and keep leading zeroes
x=12
print(format(x,'08b'))
print(format(x,'010b'))
00001100
0000001100
#141 Decimal to Hexadecimal conversion
x=30
print(format(x,'02x'))
1e
def dechimal_to_Hex(n):   
   x = (n % 16)
   ch = ""
   if (x < 10):
       ch = x
   if (x == 10):
       ch = "A"
   if (x == 11):
       ch = "B"
   if (x == 12):
       ch = "ch"
   if (x == 13):
       ch = "D"
   if (x == 14):
       ch = "E"
   if (x == 15):
       ch = "F"
   if (n - x != 0):
       return dechimal_to_Hex(n // 16) + str(ch)
   else:
       return str(ch)
dechimal_nums = [0, 15, 30, 55, 355, 656, 896, 1125]
print("Dechimal numbers:")
print(dechimal_nums)
print("\nHexadechimal numbers of the said dechimal numbers:")
print([dechimal_to_Hex(x) for x in dechimal_nums])
Dechimal numbers:
[0, 15, 30, 55, 355, 656, 896, 1125]

Hexadechimal numbers of the said dechimal numbers:
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_1768/1452397611.py in <module>
     24 print(dechimal_nums)
     25 print("\nHexadechimal numbers of the said dechimal numbers:")
---> 26 print([dechimal_to_Hex(x) for x in dechimal_nums])

~\AppData\Local\Temp/ipykernel_1768/1452397611.py in <listcomp>(.0)
     24 print(dechimal_nums)
     25 print("\nHexadechimal numbers of the said dechimal numbers:")
---> 26 print([dechimal_to_Hex(x) for x in dechimal_nums])

~\AppData\Local\Temp/ipykernel_1768/1452397611.py in dechimal_to_Hex(n)
     19        return dechimal_to_Hex(n // 16) + str(ch)
     20    else:
---> 21        return str(ch)
     22 dechimal_nums = [0, 15, 30, 55, 355, 656, 896, 1125]
     23 print("Dechimal numbers:")

TypeError: 'str' object is not callable
#141:decimal to hex
def dec_to_hex(decimal_num):
    digits="0123456789ABCDEF"
    x=(decimal_num%16)
    rest_part=decimal_num//16
    if(rest_part==0):
        return digits[x]
    return dec_to_hex(rest_part)+digits[x]
decimal_nums=[0,15,43]
print([dec_to_hex(x) for x in decimal_nums])
['0', 'F', '2B']
#142-consecutive sequence of zeroes is followed by a consecutive sequence of ones of same length
def test(str1):
    while '01' in str1:
        str1=str1.replace('01','')
    return len(str1)==0
    
print(test('01011'))
False
#142-consecutive sequence of zeroes is followed by a consecutive sequence 
#
def test(str1):
    temp=[]
    for x in str1:
        if(x=='0'):#--if hit 0 then append 0
            temp.append('0')
        else:
            temp.pop()#if hit 1 then remove added 0
    return not temp

print(test("011")
  File "C:\Users\przir\AppData\Local\Temp/ipykernel_1768/50888820.py", line 11
    print(test("011")
                     ^
SyntaxError: unexpected EOF while parsing
#143
import struct
print(struct.calcsize("P") * 8)
64
#144:whether variable is integer or string.
print(isinstance(25,int) or isinstance(25,str))
print(isinstance([25],int) or isinstance([25],str))
print(isinstance("25",int) or isinstance("25",str))
True
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_1768/1985095661.py in <module>
      1 #144:whether variable is integer or string.
      2 print(isinstance(25,int) or isinstance(25,str))
----> 3 print(isinstance([25],int) or isinstance([25],str))
      4 print(isinstance("25",int) or isinstance("25",str))

TypeError: isinstance() arg 2 must be a type or tuple of types
#145-test if a variable is a list or tuple or a set
x=('tuple',False,3.2,1)
if type(x) is list:
    print('x is a list')
elif type(x) is set:
    print('x is a set')
elif type(x) is tuple:
    print('x is a tuple')
else:
    print('neither a list or set or tuple')
    
x is a tuple
#145-test if a variable is a list or tuple or a set
def check_type(nums):
    if isinstance(x,tuple)==True:
        return 'The variable is a tuple'
    elif isinstance(x,set)==True:
        return 'The variable is a set'
    elif isinstance(x,list)==True:
        return 'The variable is a list'
    else:
        return 'Neither a list or tuple or set'
    
x=['a','b','c','d']
print(check_type(x))
The variable is a list
#146-location of Python module sources
import imp
print("Location of Python os module sources:")
print(imp.find_module('os'))
print("\nLocation of Python sys module sources:")
print(imp.find_module('datetime'))
Location of Python os module sources:
(<_io.TextIOWrapper name='C:\\Users\\przir\\anaconda3\\lib\\os.py' mode='r' encoding='utf-8'>, 'C:\\Users\\przir\\anaconda3\\lib\\os.py', ('.py', 'r', 1))

Location of Python sys module sources:
(<_io.TextIOWrapper name='C:\\Users\\przir\\anaconda3\\lib\\datetime.py' mode='r' encoding='utf-8'>, 'C:\\Users\\przir\\anaconda3\\lib\\datetime.py', ('.py', 'r', 1))
import os
print("\nList of directories in os module:")
print(os.path)
print("\nList of directories in sys module:")
import sys
print(sys.path)
List of directories in os module:
<module 'ntpath' from 'C:\\Users\\przir\\anaconda3\\lib\\ntpath.py'>

List of directories in sys module:
['C:\\Users\\przir', 'C:\\Users\\przir\\anaconda3\\python39.zip', 'C:\\Users\\przir\\anaconda3\\DLLs', 'C:\\Users\\przir\\anaconda3\\lib', 'C:\\Users\\przir\\anaconda3', '', 'C:\\Users\\przir\\anaconda3\\lib\\site-packages', 'C:\\Users\\przir\\anaconda3\\lib\\site-packages\\locket-0.2.1-py3.9.egg', 'C:\\Users\\przir\\anaconda3\\lib\\site-packages\\win32', 'C:\\Users\\przir\\anaconda3\\lib\\site-packages\\win32\\lib', 'C:\\Users\\przir\\anaconda3\\lib\\site-packages\\Pythonwin', 'C:\\Users\\przir\\anaconda3\\lib\\site-packages\\IPython\\extensions', 'C:\\Users\\przir\\.ipython']
#147
def numDiv():
    print("Enter two numbers ")
    x=int(input())
    y=int(input())
    
    if x%y==0 or y%x==0:
        return "Yup"
    else:
        return "Nope"
    
print(numDiv())
Enter two numbers 
2
4
Yup
#148
def findMaxMin():
    num=[2,5,8,4,1]
    maxi=num[0]
    mini=num[0]
    
    for i in num:
        if i>=maxi:
            maxi=i
        else:
            pass
            
        if i<=mini:
            mini=i
        else:
            pass
            
    return maxi , mini
print(findMaxMin())
(8, 1)
#149
def cubeOfNum(numList,num):
    summ=0
    for i in numList:
        if i<=num:
            summ=i+summ
        
    return summ**3

print(cubeOfNum([2,4,5,6,7,8,9],7))
            
13824
#150--Notice difference between i in num and i in range num
def oddProdNum(num):
    count=0
    for i in num:
        for j in num:
            if i!=j and i*j%2==1:
                count=count+1
                
    return count/2

print(oddProdNum([3,5,8,7]))
3.0
#150 --Use of combination of itertools
import itertools
def pair_num_odds(nums):
    uniqList=set(nums)#to get unique numbers
    result=[]#result list
    for n in itertools.combination(uniqList,2):#adding 2 unique values from uniqList to n 
        if ((n[0]*n[1])%2==1):
            temp=str(n[0])+"*"+str[n[1]]#storing results in temp
            result.append(temp)
    return result