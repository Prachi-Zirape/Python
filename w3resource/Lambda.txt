#date-7/29-22
#https://www.w3schools.com/python/python_lambda.asp
#https://www.geeksforgeeks.org/python-lambda/
#https://www.geeksforgeeks.org/python-lambda-anonymous-functions-filter-map-reduce/

x = "GeeksforGeeks"
 
# lambda gets pass to print
(lambda x: print(x))(x)
GeeksforGeeks
#1-create a lambda function that adds 15 to a given number passed in as an argument,
#also create a lambda function that multiplies argument x with argument y and print the result.
def add_lamb(n):
     return lambda x:x+n
res=add_lamb(10)
print(res(5))
15
res=lambda x:x+10
print(res(5))
15
def mul_lamb(y):
    return lambda x:x*y
res=mul_lamb(10)
print(res(5))
50
r=lambda a:a+15
print(r(10))

r=lambda x,y:x*y
print(r(10,5))    
25
50
#2-create a function that takes one argument, and that argument will be multiplied with an unknown given number
#inuput-Double the number of 15 = 30
n=15
res=lambda x:x*n
print(res(2))
30
#3-sort a list of tuples using Lambda
#input-[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]
#output-[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
#s1-bubble sort
#s2-sort +lambda method
#s3-sorted +lambda method

l=[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]
def sort_lst(lst):
    lst.sort(key=lambda x:x[1])
    return lst
print(sort_lst(l))
[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
l=[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]
def sorted_lst(lst):    
    return sorted(lst,key=lambda x:x[1])
print(sorted_lst(l))
[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]
def buble_sort(lst):
    tup=len(lst)
    for i in range(0,tup):
        for j in range(0,tup-i-1):
            #print(tup-i-1,tup)
            if (lst[j][1]>lst[j+1][1]):
                temp=lst[j]
                lst[j]=lst[j+1]
                lst[j+1]=temp
    return lst
tup =[('for', 24), ('is', 10), ('Geeks', 28),
      ('Geeksforgeeks', 5), ('portal', 20), ('a', 15)]
       
print(buble_sort(tup))
[('Geeksforgeeks', 5), ('is', 10), ('a', 15), ('portal', 20), ('for', 24), ('Geeks', 28)]
#4-sort a list of dictionaries using Lambda
dcts=[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Mi Max', 'model': '2', 'color': 'Gold'}, {'make': 'shoppingmode Samsung', 'model': 7, 'color': 'Blue'}]

#output-[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, 
#{'make': 'Mi Max', 'model': '2', 'color': 'Gold'}]
#res=dict{}
def dict_sort(dct):    
    return sorted(dct,key=lambda x:x['color'])
print(dict_sort(dcts))
[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'shoppingmode Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': '2', 'color': 'Gold'}]
#5-filter a list of integers using Lambda
#s1-map lambda fn with list
#s2-filter method
#s3-for loop

l=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
def filter_lamb(lst,fn):
    return list(map(fn,lst))
print(filter_lamb(l, lambda x:x%2==0))
[False, True, False, True, False, True, False, True, False, True]
nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even_nums=list(filter(lambda x:x%2==0,nums))
print(even_nums)
[2, 4, 6, 8, 10]
#6-square and cube every number in a given list of integers using Lambda
l=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
def sq_cu_lst(lst,n):
    #sqr_lst=list(lambda x:pow(x,n) for n in lst)
    sqr_lst=list(map(lambda x:x**n,lst))
    return sqr_lst
print(sq_cu_lst(l,2))
print(sq_cu_lst(l,3))
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]
#7-find if a given string starts with a given character using Lambda
def str_chr(str1,ch):
    res=next(map(lambda x:x[0]==ch,str1))
    return res
print(str_chr('Ramesh','l'))
False
starts_with=lambda x:True if x.startswith('P') else False
print(starts_with('Python'))
True
#8-extract year, month, date and time using Lambda.
time_stamp1='2020-01-15 09:03:32.744178'
res=list(map(lambda x:x.split('-'),time_stamp1))
#res=list((lambda x:x.split('-') for x in time_stamp1))
print(res)
print(time_stamp1.split())       
[['2'], ['0'], ['2'], ['0'], ['', ''], ['0'], ['1'], ['', ''], ['1'], ['5'], [' '], ['0'], ['9'], [':'], ['0'], ['3'], [':'], ['3'], ['2'], ['.'], ['7'], ['4'], ['4'], ['1'], ['7'], ['8']]
['2020-01-15', '09:03:32.744178']
import datetime
now=datetime.datetime.now()
print(now)
year=lambda x:x.year
month=lambda x:x.month
day=lambda x:x.day
time=lambda x:x.time()
print("current year=",year(now))
print("current monnth=",month(now))
print("current day=",day(now))
print("current time=",time(now))
2022-07-29 20:59:16.140328
current year= 2022
current monnth= 7
current day= 29
current time= 20:59:16.140328
#9-check whether a given string is number or not using Lambd
res=lambda x: True if type(x)==str else False
res(123)
res('true')
True
def str_chk(n):###does not work with integer
    res=next(map(lambda x: True if type(x)==str else False,str(n)))
    return res
str_chk(123)
True
#10-create Fibonacci series upto n using Lambda
#reduce method
def fib_series(n):
    res=list()
#map method
#11-intersection of two given arrays using Lambda
#12-rearrange positive and negative numbers in a given array using Lambda.
#13-count the even, odd numbers in a given array of integers using Lambda
#Date-7/30/22
#14- find the values of length six in a given list using Lambda
lst=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
res=list(map(lambda x:x if len(x)==6 else ...,lst))
print(res)
['Monday', Ellipsis, Ellipsis, Ellipsis, 'Friday', Ellipsis, 'Sunday']
lst=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
days=filter(lambda day:day if len(day)==6 else '',lst)
for d in days:
    print(d)
Monday
Friday
Sunday
#13-add two given lists using map and lambda
l1=[1, 2, 3]
l2=[4, 5, 6]
res=list(map(lambda x,y: x+y,l1,l2))
result = map(lambda x, y: x + y, l1, l2)
print(res)
print(list(result))
[5, 7, 9]
[5, 7, 9]
#14-second lowest grade of any student(s) from the given names and grades of each student using lists and lambda
#1-create list of sublist from the given names and grades
#2-sort it 
#3-find 1st elemment of the list
def second_lowest_grade():
    num_inp=int(input())
    grd_nem_lst=[]
    for i in range(0,num_inp):
        str1=input()
        grd_nem_lst.append(str1.split(','))
    print(grd_nem_lst)
    sorted_lst=sorted(grd_nem_lst,key=lambda x: int(x[1]))
    print(sorted_lst)   

second_lowest_grade()  
3
'R Menon',70
'K Ram', 50
'S Roy', 100
[["'R Menon'", '70'], ["'K Ram'", ' 50'], ["'S Roy'", ' 100']]
[["'K Ram'", ' 50'], ["'R Menon'", '70'], ["'S Roy'", ' 100']]
#method 2
students=[]
sec_name=[]
second_low=0
n=int(input("number of students="))
for _ in range(n):
    s_name=input("name=")
    score=float(input("score="))
    students.append([s_name,score])
print("\nNames and Grades of all students:")
print(students)
order=sorted(students,key=lambda x:x[1])
for i in range(n):
    if order[i][1]!=order[0][1]:
        second_low=order[i][1]
        break
print("\nSecond lowest grade: ",second_low)
sec_student_name = [x[0] for x in order if x[1] == second_low]
sec_student_name.sort()
print("\nNames:")
for s_name in sec_student_name:
    print(s_name)
#print(order)  
number of students=3
name=Roy
score=30
name=Mani
score=10
name=Seeta
score=23

Names and Grades of all students:
[['Roy', 30.0], ['Mani', 10.0], ['Seeta', 23.0]]
[['Mani', 10.0], ['Seeta', 23.0], ['Roy', 30.0]]
#17-find numbers divisible by nineteen or thirteen from a list of numbers using Lambda.
l=[19, 65, 57, 39, 152, 639, 121, 44, 90, 190]
res=list(filter(lambda x: x%13==0 or x%19==0,l))
print(res)
[19, 65, 57, 39, 152, 190]
#18-find palindromes in a given list of strings using Lambda
l_str=['php', 'w3r', 'Python', 'abcd', 'Java', 'aaa']
l_op=list(filter(lambda x:x==x[::-1],l_str))
print(l_op)
['php', 'aaa']
#using reversed function
texts=['php', 'w3r', 'Python', 'abcd', 'Java', 'aaa']
print("Orginal list of strings:",texts)
results=list(filter(lambda x: (x=="".join(reversed(x))),texts))
print(results)
Orginal list of strings: ['php', 'w3r', 'Python', 'abcd', 'Java', 'aaa']
['php', 'aaa']
#19- find all anagrams of a string in a given list of strings using lambda
#s1-sort string and compare
#s2-create dictionary with key=character and value=count

#https://www.geeksforgeeks.org/print-pairs-anagrams-given-array-strings/
#https://www.geeksforgeeks.org/check-whether-two-strings-are-anagram-of-each-other/

l=['bcda', 'abce', 'cbda', 'cbea', 'adcb']
#20-find the numbers of a given string and store them in a list, 
#display the numbers which are bigger than the length of the list in sorted form. Use lambda function to solve the problem
str1='sdf 23 safs8 5 sdfsd8 sdfs 56 21sfs 20 5'

str_num=[i for i in str1.split(' ')]
lenght=len(str_num)
print(str_num)
nums=sorted([int(x) for x in str_num if x.isdigit()])

for i in ((filter(lambda x : x>lenght,nums))):
    print(i,end=' ')
['sdf', '23', 'safs8', '5', 'sdfsd8', 'sdfs', '56', '21sfs', '20', '5']
20 23 56 
#21- multiply each number of given list with a given number using lambda function. Print the result
l=[2, 4, 6, 9, 11]
n=2
result=list(map(lambda x:x*n,l))
print(result)
print(' '.join(map(str,result)))
[4, 8, 12, 18, 22]
4 8 12 18 22
#22-sum the length of the names of a given list of names after removing the names that starts with an lowercase letter
l=['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']
result=list(filter(lambda x:x[0].isupper(),l))
print(result)
print(len(''.join(result)))
['Dylan', 'Diana', 'Joanne']
16
#23-calculate the sum of the positive and negative numbers of a given list of numbers
l=[2, 4, -6, -9, 11, -12, 14, -5, 17]
sum_pos=0
sum_neg=0
sum_pos=sum(map(lambda x:x if x>0 else 0,l))
sum_neg=sum(map(lambda x:x if x<0 else 0,l))
print(result,sum_pos,sum_neg)
[2, 4, -6, -9, 11, -12, 14, -5, 17] 48 -32
nums=[2, 4, -6, -9, 11, -12, 14, -5, 17]
total_negative_nums = list(filter(lambda nums:nums<0,nums))
total_positive_nums = list(filter(lambda nums:nums>0,nums))

print("Sum of the positive numbers: ",sum(total_negative_nums))
print("Sum of the negative numbers: ",sum(total_positive_nums))
Sum of the positive numbers:  -32
Sum of the negative numbers:  48
#Date-8/2/22
#24-find numbers within a given range where every number is divisible by every digit it contains
n=25
print(int(str(n)[0])/2)
#result=list(map(lambda x:n/int(x),str(n)))
for i in range(1,n):
    if i==0 or str(i)=='0':
        continue
    elif i!=0:
        result=list(map(lambda x:i/int(x),str(i)))
print(result)
1.0
[True, True]
def divisible_by_digits(m,n):
    return[n for n in range(1,n+1) if not any(map(lambda x:int(x)==0 or n%int(x)!=0,str(n)))]
print(divisible_by_digits(1,22))
[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
#25-Create the next bigger number by rearranging the digits of a given number
#s1-arrangig digits of a number in descending order
#s2-creating all permutations of a number and result being biggest one

#Original number: 12  Output--Next bigger number: 21
#Original number: 10 Output-Next bigger number: False
n=10
result=list(str(n))
sorted_result=sorted(result)
for i in sorted_result:
    op_num=''.join(i)
print(op_num)
next_bigger_num=next((lambda x:True if x>n else False,int(op_num)))
1
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_13712/1170692195.py in <module>
     11     op_num=''.join(i)
     12 print(op_num)
---> 13 next_bigger_num=next((lambda x:True if x>n else False,int(op_num)))

TypeError: 'tuple' object is not an iterator
#536479
#4321
def findNext(number,n):
    for i in range(n-1,0,-1):
        if number[i]>number[i-1]:#i>i-1
            break;
    if i==1 and number[i]<number[i-1]:##we are at 2nd leftmost digit(3)
            print("Next digit not possible")
            return
    x=number[i-1]  
    smallest=i
    for j in range(i+1,n):
        if number[j]>x and number[j]<number[smallest]:
            smallest=j
    number[smallest],number[i-1]=number[i-1],number[smallest]
    x=0
    for j in range(i):
        x=x*10+number[j]
    # Sort the digits after i-1 in ascending order
    number=sorted(number[i:])
    # converting the remaining sorted digits into number
    for j in range(n-i):
        x=x*10+number[j]
    print ("Next number with set of digits is",x) 
# Driver Program to test above function
digits = "534976"        
 
# converting into integer array,
# number becomes [5,3,4,9,7,6]
number = list(map(int ,digits))
findNext(number, len(digits))       
Next number with set of digits is 536479
def nextPermutation(arr):
    n=len(arr)# find the length of the array
    # start from the right most digit and find the first digit that is smaller than the digit next to it.
    k=n-2
    while k>=0:
        if arr[k]<arr[k+1]:
            #print("1st",arr[k],arr[k+1])
            break;
        k-=1
    # reverse the list if the digit that is smaller than digit next to it is not found.
    if k<0:
        arr=arr[::-1]
    else:
        # find the first greatest element than arr[k] from end of the list
        for l in range(n-1,k,-1):
            if arr[l]>arr[k]:
                #print(arr[l],arr[k])
                break
            # swap the elements at arr[k] and arr[l  
        arr[l],arr[k]=arr[k],arr[l]
        # reverse the list from k + 1 to the end to find the
        # most nearest greater number to the given input number
        #print(arr[k+1:])
        arr[k+1:]=reversed(arr[k+1:])
    return arr
# Driver code
arr = [5, 3, 4, 9, 7, 6]
print(*nextPermutation(arr))
5 3 6 4 7 9
def rearrange_bigger(n):
    #Break the number into digits and store in a list
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("".join(nums))
    return False
n = 12
print("Original number:",n)
print("Next bigger number:",rearrange_bigger(n))
Original number: 12
Next bigger number: 21
#26-find the list with maximum and minimum length using lambda.
l=[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]
#result_max=max(map(lambda x:(len(x)),l))
result_max=max(l,key=lambda x:(len(x)))
result_min=min(l,key=lambda x:(len(x)))
print(result_max,result_min)
[13, 15, 17] [0]
#27-sort each sublist of strings in a given list of lists using lambda
l=[['green', 'orange'], ['black', 'white'], ['Ahite', 'black', 'orange']]
sorted_l=[sorted(x,key=lambda x:x) for x in l]
sorted_ll=[sorted(l,key=lambda x:x)]
print(sorted_l,sorted_ll)
[['green', 'orange'], ['black', 'white'], ['Ahite', 'black', 'orange']] [[['Ahite', 'black', 'orange'], ['black', 'white'], ['green', 'orange']]]
#28- sort a given list of lists by length and value using lambda
l_num=[[2], [0], [1, 3], [0, 7], [19, 11,20,1], [13, 11, 17]]
result = sorted(l_num, key=lambda l: (len(l), l))
l_sorted=[sorted(x,key=lambda x:x)for x in l_num]
print(l_sorted)
print(result)
[[2], [0], [1, 3], [0, 7], [1, 11, 19, 20], [11, 13, 17]]
[[0], [2], [0, 7], [1, 3], [13, 11, 17], [19, 11, 20, 1]]
#29-find the maximum value in a given heterogeneous list using lambda
l_hetro=['Python', 3, 2, 4, 5, 'version']
print(max(l_hetro,key=lambda i:(isinstance (i,int),i)))
print(max(l_hetro,key=lambda i:(isinstance (i,str),i)))
5
version
#30-sort a given matrix in ascending order according to the sum of its rows using lambda
l_mtr=[[1, 2, 3], [2, 4, 5], [1, 1, 1]]
l_mtr_sorted=sorted(l_mtr,key=lambda x:sum(x))
print(l_mtr_sorted)
[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
#31-extract specified size of strings from a give list of string values using lambda
l=['Python', 'list', 'exercises', 'practice', 'solution']
n=8
result=list(filter(lambda x:len(x)==n,l))
print(result)
['practice', 'solution']
#32-count float number in a given mixed list using lambda
l_mixed=[1, 'abcd', 3.12, 1.2, 4, 'xyz', 5, 'pqr', 7, -5, -12.22]
result=list(filter(lambda x:isinstance(x,float),l_mixed))
print(result)
[3.12, 1.2, -12.22]
#Date-8/3/22
#33-check whether a given string contains a capital letter, a lower case letter, a number and a minimum length using lambda
def check_string(str1):
    messg = [
    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',
    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',
    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',
    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]
    result = [x for x in [i(str1) for i in messg] if x != True]
    if not result:
        result.append('Valid string.')
    return result    
s = input("Input the string: ")
print(check_string(s))
Input the string: re
['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']
#34- filter the height and width of students, which are stored in a dictionary using lambda
dict1={'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}
ht=6
wt=70
result=dict(filter(lambda x: x[1][0]>=ht and x[1][1]>=wt,dict1.items()))
print(result)
{'Cierra Vega': (6.2, 70)}
#35-check whether a specified list is sorted or not using lambda
l=[1, 2, 4, 6, 8, 10, 12, 14, 16, 17]
result=sorted(l,key=lambda x:x)
if l==result:
    print("List was sorted")
else:
    print("List was not sorted")
List was sorted
def is_sort_list(nums, key=lambda x: x):
    for i, e in enumerate(nums[1:]):#i is 1 poiter ahead of e and we compare those two values every iteration
       # print(key(e),key(nums[i]))
        if key(e) < key(nums[i]): 
            return False
    return True
nums1 = [1,2,4,6,8,10,12,14,16,27]
print ("Original list:")
print(nums1)
print("\nIs the said list is sorted!")
print(is_sort_list(nums1)) 
Original list:
[1, 2, 4, 6, 8, 10, 12, 14, 16, 27]

Is the said list is sorted!
True
#36-extract the nth element from a given list of tuples using lambda
l=[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]
n=0
result=list(map(lambda x:x[n],l))
print(result)
['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']
#37-sort a list of lists by a given index of the inner list using lambda
l=[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]
idx=0
result=sorted(l,key=lambda x:x[idx])
print(result)
[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]
#38- remove all elements from a given list present in another list using lambda
l1=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
l2=[2, 4, 6, 8]
result=list(filter(lambda x : x not in l2,l1))
print(result)
[1, 3, 5, 7, 9, 10]
#39-find the elements of a given list of strings that contain specific substring using lambda
l=['red', 'black', 'white', 'green', 'orange','rack']
sub_str='ack'
result=list(filter(lambda x:sub_str in x,l))
print(result)
['black', 'rack']
#40-find the nested lists elements, which are present in another list using lambda
org_lst=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
nested_lst=[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]
result=[list(filter(lambda x:x in org_lst,sublist)) for sublist in nested_lst]
print(result)
[[12], [7, 11], [1, 5, 8]]
#41-reverse strings in a given list of string values using lambda
l=['Red', 'Green', 'Blue', 'White', 'Black']
result=list(map(lambda x:''.join(reversed(x)),l))
#list(filter(lambda x: (x=="".join(reversed(x))),texts))
print(result)
['deR', 'neerG', 'eulB', 'etihW', 'kcalB']
#42-calculate the product of a given list of numbers using lambda
import functools
list1= [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
mul=list1[0]
result=functools.reduce(lambda x,y:x*y,list1)
#result=functools.reduce(lambda x,y:x*y,list1,1)
#result1=map(lambda x,y:x*y,list1,1)
print(result)
3628800
#43-multiply all the numbers in a given list using lambda
import functools
l=[4, 3, 2, 2, -1, 18]
result=functools.reduce(lambda x,y:x*y,l)
print(result)
-864
#44-calculate the average value of the numbers in a given tuple of tuples using lambda
tup=((10, 10, 10), (30, 45, 56), (81, 80, 39), (1, 2, 3))
result=tuple(map(lambda x:sum(x)/len(x),zip(*tup)))
print(result)
(30.5, 34.25, 27.0)
#45-convert string element to integer inside a given tuple using lambda
tup=(('233', 'ABCD', '33'), ('1416', 'EFGH', '55'), ('2345', 'WERT', '34'))
result=tuple(map(lambda x: (int(x[0]),int(x[2])),tup))
print(result)
((233, 33), (1416, 55), (2345, 34))
#46-find index position and value of the maximum and minimum values in a given list of numbers using lambda.
l=[12, 33, 23, 10.11, 67, 89, 45, 66.7, 23, 12, 11, 10.25, 54]
result_max=max(enumerate(l),key=lambda x:x[1]) #enumerate gives tuple of (index,element). so x[1] is max of element
#if we write lambda x:x it will give max of index as default=x[0]

result_min=min(enumerate(l),key=lambda x:x[1])

print(result_max,result_min)
(5, 89) (3, 10.11)
#47-program to sort a given mixed list of integers and strings using lambda. Numbers must be sorted before strings
l=[19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1]
result=sorted(l,key=lambda x:(isinstance(x,str),x))
print(result)
[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']
#48-sort a given list of strings(numbers) numerically using lambda
l=['4', '12', '45', '7', '0', '100', '200', '-12', '-500']
result=sorted(l,key=lambda x:int(x))
print(result)
['-500', '-12', '0', '4', '7', '12', '45', '100', '200']
#49-count the occurrences of the items in a given list using lambda
l=[3, 4, 5, 8, 0, 3, 8, 5, 0, 3, 1, 5, 2, 3, 4, 2]
dicts={}
result=dict(map(lambda x:(x,l.count(x)),l))#(x,l.count(x))-we have to pass 2 arguments as dictionary takes key:value pair input
#result=dict(map(lambda x:(l.count(x)),l))
print(result)
{3: 4, 4: 2, 5: 3, 8: 2, 0: 2, 1: 1, 2: 2}
#50-remove specific words from a given list using lambda.
l=['orange', 'red', 'green', 'blue', 'white', 'black']
l_remove=['orange', 'black']
result=list(filter(lambda x:x not in l_remove,l))
print(result)
['red', 'green', 'blue', 'white']
#51-find the maximum and minimum values in a given list of tuples using lambda function
tup_lst=[('V', 62), ('VI', 68), ('VII', 72), ('VIII', 70), ('IX', 74), ('X', 65)]
result_max=max(tup_lst,key=lambda x:x[1])
result_min=min(tup_lst,key=lambda x:x[1])
print(result_max,result_min)
('IX', 74) ('V', 62)
#52-remove None value from a given list using lambda function
l=[12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]
result=list(filter(lambda x: isinstance(x,int),l))
result_way=list(filter(lambda x: x is not None,l))
print(result)
print(result_way)
[12, 0, 23, -55, 234, 89, 0, 6, -12]
[12, 0, 23, -55, 234, 89, 0, 6, -12]
 