#DATE-06/07/2022
#01-sum all the items in a list
lst_num=[2,5,7,12,4,9]
sum=0
for i in lst_num:
    sum+=i
print(sum)
39
#2-multiply all the items in a list
lst_num=[2,5,7,12,4,9]
prod=1
for i in lst_num:
    prod*=i
print(prod)
30240
#3-get the largest number from a list.
#s1-sort them and print last num
#s2-use max method
lst_num=[2,5,7,12,4,9]
max_num=max(lst_num)
print(max_num)
12
#4-smallest number from a list
lst_num=[2,5,7,12,4,9]
min_num=min(lst_num)
print(min_num)
2
#5-count the number of strings where the string length is 2 or more and the 
#first and last character are same from a given list of strings.
#Sample List : ['abc', 'xyz', 'aba', '1221']
#Expected Result : 2

#logic-split strings by spaces. trace first and last character of individual string to check if they are same
#s1-check strings and counter increment

def str_cnt():
    str_lst=['abc','rnr', 'xyz', 'aba', '1221']
    count=0
    for i in str_lst:
        if i[0]==i[len(i)-1]:
            #print(j,i[0],i[len(i)-1])
            count+=1
            #break
    print(count)
str_cnt()
3
#6-get a list, sorted in increasing order by the last element in each tuple from a given list of non-empty tuples
#Sample List : [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]
#Expected Result : [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]

#logic-trace each tuple and compare last element of it add it in dictionary
#s1-for loop
#s2-list comprehension
#s3-lambda function

#s2-list comprehension
def reorder_lst():
    tup_lst=[(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]
    sorted_lst=[]
   # swap=[]
    tupList =[(5, 7), (12, 4), (20, 13), (45, 2)]
    print("List of Tuple before sorting : " ,str(tupList))

# Bubble Sorting List of Tuples in Increasing order by last element 
    listLen = len(tupList); 
    for i in range(0, listLen):
        for j in range(0, listLen - i - 1):
            #print(tupList[j][-1],tupList[j + 1][-1])
           # print(tupList[j][1],tupList[j + 1][1])
           # print('x',tupList[j])
            if(tupList[j][-1] > tupList[j + 1][-1]):   #[j][-1] ==     [j][1]        
                swap = tupList[j]
                tupList[j] = tupList[j + 1]
                tupList[j + 1] = swap
               # print(tupList)
    print("List of Tuple after sorting : " + str(tupList))            
    
reorder_lst()
List of Tuple before sorting :  [(5, 7), (12, 4), (20, 13), (45, 2)]
List of Tuple after sorting : [(45, 2), (12, 4), (5, 7), (20, 13)]
#Recursion
def last(n):
    #print(n[-1])
    return n[-1] #second number in tuples-5,2,4,3,1

def sort_list_last(tuples):
    #print(sorted(tuples,key=last))
    return sorted(tuples,key=last)  #sorted based on second number of tuples 

print(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))
[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]
#lambda
tupList =[(5, 7), (12, 4), (20, 13), (45, 2)]

tupList.sort(key=lambda n:n[-1])
print("List of Tuple after sorting : " + str(tupList))
List of Tuple after sorting : [(45, 2), (12, 4), (5, 7), (20, 13)]
#7-remove duplicates from a list
#create set and convert back to list
#move items in new list if not exist
#distinct method
lst=[4,5,2,1,6,5,3,1,2]
result=[]
for i in lst:
    if i not in result:
        result.append(i)
print(result)
[4, 5, 2, 1, 6, 3]
#8-check a list is empty or not
lst=[4,5,2,1,6,5,3,1,2]
result=[4]
if len(result)==0:
    print("list is empty")
else:
    print("list has items in it")
list has items in it
#8-check a list is empty or not
lst=[4,5,2,1,6,5,3,1,2]
result=[]
if not result:
    print("list is empty")
else:
    print("list has items in it")
list is empty
#9-clone or copy a list.
lst=[4,5,2,1,6,5,3,1,2]

result=lst.copy()
new_list = list(lst)

print(result)
print(new_list)
[4, 5, 2, 1, 6, 5, 3, 1, 2]
[4, 5, 2, 1, 6, 5, 3, 1, 2]
#10-find the list of words that are longer than n from a given list of words
#q1:is long word part of list or given input

def find_longer_wrd():
    long_word="abc"
    word_lst=["dferth","dsde","as","wqwkdskfs","d","lkj"]
    result_lst=[]
    for i in word_lst:
        if len(long_word)<len(i):
            result_lst.append(i)
    print(result_lst)
find_longer_wrd()
['dferth', 'dsde', 'wqwkdskfs']
#11-takes two lists and returns True if they have at least one common member
#s1-lambda
#s2-and logical and
#s3-for loop

#s1-lambda
lst1=[1,2,3,4,5,6,7,8]
lst2=[11,22,33,44,5,66,77,8]
list(filter(lambda x:x in lst1,lst2))
[5, 8]
#s2-logical and
lst1=[1,2,3,4,5,6,7,8]
lst2=[11,22,33,44,5,66,77,8]
lst=list(set(lst1) & set(lst2))
#lst=(lst1 & lst2)
print(lst)
[8, 5]
#12-print a specified list after removing the 0th, 4th and 5th elements
lst=['Red', 'Green', 'White', 'Black', 'Pink', 'Yellow']
lst=[x for (i,x) in enumerate(lst) if i not in(0,4,5)]
print(lst)
['Green', 'White', 'Black']
#13-generate a 3*4*6 3D array whose each element is *
#s1-3 for loops with i,j and k in range of 3*4*6 and print *

def print_pattern():
    array=[[['*' for col in range(6)] for col in range(4)] for row in range(3)]
    print(array)

print_pattern()
[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]
#14-print the numbers of a specified list after removing even numbers from it.
#s1-for loop
#s2-lambda

lst=[5,4,2,1,6,8,9,0]
new_lst=list(filter(lambda x:(x%2!=0), lst))
print(new_lst)
[5, 1, 9]
#15-shuffle and print a specified list
#s1-use random method
#s2-use shuffle method
from random import shuffle
def shuffle_lst():
    s=[5,4,2,1,6,8,9,0]
    random.shuffle(s) # << shuffle before print or assignment
    print(s)
shuffle_lst()
[8, 5, 1, 9, 4, 0, 2, 6]
import random
random.sample(list(range(10)), 10)
[7, 9, 6, 1, 4, 5, 3, 0, 8, 2]
#16-generate and print a list of first and last 5 elements where the values are
#square of numbers between 1 and 30 (both included).

#s1-lambda
#s2-enumerate
#s3-for loop
l=[]
for i in range(6):
    l.append(i**2)
print(l)

new_lst=[(lambda x:x*x)(x) for x in range(6)]
print(new_lst)
[0, 1, 4, 9, 16, 25]
[0, 1, 4, 9, 16, 25]
#17-generate and print a list except for the first 5 elements,
#where the values are square of numbers between 1 and 30 (both included)
def printValues():
	l = list()
	for i in range(1,31):
		l.append(i**2)
	print(l[5:])
printValues()
[36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900]
#18-generate all permutations of a list in Python.
#s1-permutation method 

from itertools import permutations
perm=permutations([5,4,2])
for  i in list(perm):
    print(i)
(5, 4, 2)
(5, 2, 4)
(4, 5, 2)
(4, 2, 5)
(2, 5, 4)
(2, 4, 5)
#18-
def permutations_logic(elements):
    if len(elements)<=1:
        yield elements
        return
    for perm in permutations_logic(elements[1:]):
        for i in range(len(elements)):
            yield perm[:i]+elements[0:1]+perm[i:]
permutations_logic([5,4,2])
<generator object permutations_logic at 0x0000014CA328F040>
def permutations(iterable, r=None):
    # permutations('ABCD', 2) --> AB AC AD BA BC BD CA CB CD DA DB DC
    # permutations(range(3)) --> 012 021 102 120 201 210
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    if r > n:
        return
    indices = range(n)
    cycles = range(n, n-r, -1)
    yield tuple(pool[i] for i in indices[:r])
    while n:
        for i in reversed(range(r)):
            cycles[i] -= 1
            if cycles[i] == 0:
                indices[i:] = indices[i+1:] + indices[i:i+1]
                cycles[i] = n - i
            else:
                j = cycles[i]
                indices[i], indices[-j] = indices[-j], indices[i]
                yield tuple(pool[i] for i in indices[:r])
                break
        else:
            return
#19-difference between the two lists
#& method
#subtract method
lst1=[0, 1, 4, 9, 16, 25]
lst2=[0, 1, 4, 9, 26, 25]

lst=list(set(lst1)& set(lst2))
#new_lst=lst1-lst2

new_lst=[x for x in lst1 if x not in lst2]

print(lst)
print(new_lst)
[0, 1, 4, 9, 25]
[16]
#20-access the index of a list
#enumerate
#range in length
lst=[0, 1, 4, 9, 16, 25]
print(list(enumerate(lst,0)))
[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
#21-convert a list of characters into a string
#q1-is it type conversion or conversion of list to string

lst=['a','s','d','f']
new_lst=str(lst)
print(type(new_lst), type(lst))
<class 'str'> <class 'list'>
lst=['a','s','d','f']
str1=" "
for i in lst:
    #str1=str1+i  or 
    str1=''.join(lst)
print(str1)
asdf
#22-find the index of an item in a specified list
#enumerate
#for loop
lst=['a','s','d','f']
for i in range(len(lst)):
    if lst[i]=='d':
        print(i)  
print(lst.index('s'))
2
1
#23-flatten a shallow list
#s1-use deepcopy() method--doe not flatten list just deep copied
#s2-use 2 for loops
#s3-use chain function
import copy
#s2-use 2 for loops
lst1 = [[10, 20, 30, 40], [50, 60, 70, 80], [90, 100, 110, 120]]
new_lst=[]
for i in lst1:
    for j in i:
        new_lst.append(j)
print(new_lst)
[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
lst1 = [[10, 20, 30, 40], [50, 60, 70, 80], [90, 100, 110, 120]]
import itertools
#new_lst=[]
new_lst=list(itertools.chain(*lst1))
print(new_lst)
[10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
#24-append a list to the second list
#s1-use of extend method
#s2-append method

lst1=[10, 20, 30, 40]
lst2=[50, 60, 70, 80]
lst1.extend(lst2)
print(lst1)
[10, 20, 30, 40, 50, 60, 70, 80]
#25-select an item randomly from a list
#s1-random method on i
import random
lst=[10, 20, 30, 40]
print(random.choice(lst))
10
#26-check whether two lists are circularly identical
#s1-by merging 2 lists
#s2-#list slicing
#s3-map method

#s1-list slicing
def circularly_identical(list1,list2):
    list1.extend(list1)
    for i in range(len(list1)):
        if list2==list1[i:i+len(list2)]:
           # print(list1[i:i+len(list2)],i)
            return True
    return False
# driver code
list1 = [10, 10, 0, 0, 10]
list2 = [10, 10, 10, 0, 0]
list3 = [1, 10, 10, 0, 0] 
 
# check for list 1 and list 2
if(circularly_identical(list1, list2)):
    print("Yes")
else:
    print("No")
 
# check for list 2 and list 3
if(circularly_identical(list2, list3)):
    print ("Yes")
else:
    print ("No")   
[10, 10, 10, 0, 0] 4
Yes
No
#s1-by merging 2 lists
def circularly_identical1(list1,list2):
    list3=list1*2 #list3=[10, 10, 0, 0, (10,10, 10, 0, 0,) 10]
    for x in range(0,len(list1)):
        z=0
        for y in range(x,x+len(list1)):#start from 2nd last item in first list until end of length of first list
            if list2[z]==list3[y]:
                z+=1
            else:
                break
        if z==len(list1):
            return True
    return False
# driver code
list1 = [10, 10, 0, 0, 10]
list2 = [10, 10, 10, 0, 0]
list3 = [1, 10, 10, 0, 0] 
 
# check for list 1 and list 2
if(circularly_identical1(list1, list2)):
    print("Yes")
else:
    print("No")
 
# check for list 2 and list 3
if(circularly_identical1(list2, list3)):
    print ("Yes")
else:
    print ("No")
Yes
No
#s3-map method
def circularly_identical2(list1,list2):
    #print(' '.join(map(str, list2)) )
    return(' '.join(map(str,list2)) in ' '.join(map(str, list1*2))) #checking list2 is in extended list1 or not
# driver code
list1 = [10, 10, 0, 0, 10]
list2 = [10, 10, 10, 0, 0]
list3 = [1, 10, 10, 0, 0] 
 
# check for list 1 and list 2
if(circularly_identical2(list1, list2)):
    print("Yes")
else:
    print("No")
    
# check for list 2 and list 3
if(circularly_identical2(list2, list3)):
    print ("Yes")
else:
    print ("No")
Yes
No
#27-second smallest number in a list
#s1-temp1= smallest number and temp2=2nd smallest and not equal to smallest
#s2-sort list and pick 2nd item
def second_small_num():
    lst=[90, 120, 20, 40, 110, 60, 70, -80, 10, 100, 30, 50]
    smallest_num=lst[0]
    sec_smallest_num=lst[0]
    
    for i in lst:
        if i < smallest_num:
            smallest_num=i
            #lst.remove(i)
            
    for j in range(len(lst)):
       # print(lst[j])
        if lst[j]<sec_smallest_num and lst[j]>smallest_num:
            sec_smallest_num=lst[j]
            #print(sec_smallest_num,j)
    print(smallest_num,sec_smallest_num)
second_small_num()    
-80 10
#28-second largest number in a list
#s1-sort and pick second but last number
#s2-temp1= largest number and temp2=2nd largest and not equal to largest
def second_large_num():
    lst=[90, 120, 20, 40, 110, 60, 70, -80, 10, 100, 30, 50]
    largest=lst[0]
    largest2=None
    for item in lst[1:]:
        if item>largest:
            largest2=largest
            largest=item
        elif largest2==None or largest2<item:
            largest2=item
    print("Largest element is:", largest)
    print("second largest element is:", largest2)
second_large_num()
Largest element is: 120
second largest element is: 110
#29-get unique values from a list
#s1-count frequency and uniqs are numbers with frequency 1
#s2-sort list and see if lst[i]==lst[i+1]
#s3-use dictionary with key=list item and values=frequency
def find_uniques():
    lst=[90, 120, 120, 90, 110, 50, 70, -80, 70, 70, 50]
    #my_dict={lst[i]:lst[i+1] for i in range(0,len(lst),2)}
    #res_dct = {lst[i]: lst[i + 1] for i in range(0, len(lst)-1, 2)}
   # return res_dct
   # d1=dict(enumerate(lst))
    res=[]
    
    for i in lst:
        count=0
        for j in lst:
            if i==j:
                count+=1
        if count==1:
            res.append(i)
    print(res)
    
find_uniques()  
[110, -80]
#30-Python program to get the frequency of the elements in a list
#s1-count method
#s2-2 for loops
#s3-dictionary method
def freq_cnt():
    lst=[90, 120, 120, 90, 110, 50, 70, -80, 70, 70, 50]
    res={}
    
    for i in lst:
        if (i in res):
            res[i]+=1
        else:
            res[i]=1
            
    for key,value in res.items():
        print("%d:%d"%(key,value))
        
    print(res)
        
freq_cnt()
90:2
120:2
110:1
50:2
70:3
-80:1
{90: 2, 120: 2, 110: 1, 50: 2, 70: 3, -80: 1}
#counter method
import collections
my_lst=[90, 120, 120, 90, 110, 50, 70, -80, 70, 70, 50]
print("original list=",my_lst)
ctr=collections.Counter(my_lst)
print("Frequency of the elements in the List : ",ctr)
original list= [90, 120, 120, 90, 110, 50, 70, -80, 70, 70, 50]
Frequency of the elements in the List :  Counter({70: 3, 90: 2, 120: 2, 50: 2, 110: 1, -80: 1})
#31-count the number of elements in a list within a specified range
def count_range_lst(lst,min,max):
    ctr=0
    for x in lst:
        if min<=x<=max:
            ctr+=1
    return ctr
lst=['a','b','k','d','e','b']
count_range_lst(lst,'a','e')
5
#32-program to check whether a list contains a sublist
#q1-is it nested list or series of inputs given by user
#s1-if its nested then use isinstance method
#s2-if its input given by users then need to check sequence present in list
#s1-
sam_lst=[90, 120, 120, 90, 110, 50, 70, [-80, 70, 70], 50]
any(isinstance(i,list)for i in sam_lst)
True
#s2-
sam_lst=[90, 120, 90, 110, 50, 70, -80]
sub_lst=[90,110,520]
res=False
for i in range(len(sam_lst)-len(sub_lst)+1):
    if sam_lst[i:i+len(sub_lst)]==sub_lst:
        res=True
        break
print("Is sublist present in list ? : " + str(res))
Is sublist present in list ? : False
#s3-list slicing
sam_lst=[90, 120, 90, 110, 50, 70, -80]
sub_lst=[90,110,50]
res=any(sam_lst[i:i+len(sub_lst)]==sub_lst
       for i in range(len(sam_lst)-len(sub_lst)+1))
print("Is sublist present in list ? : " + str(res))
Is sublist present in list ? : True
#33-generate all sublists of a list
#s1-permutations?-nope they dont create sublist. its just permutation of numbers
#s2-2 for loops
#s3-combinations

#Input  :list = [1, 2, 3] 
#Output :[[], [1], [1, 2], [1, 2, 3], [2], [2, 3], [3]]

#s2
lst = [1, 2, 3]
res_lst=[]
counter=0
counter2=0

while counter!=len(lst):
    counter2=counter
    res_lst=[]
    while counter2!=len(lst):
        res_lst.append(lst[counter2])
        counter2+=1
        print(res_lst)
    counter+=1
[1]
[1, 2]
[1, 2, 3]
[2]
[2, 3]
[3]
def sub_lists(l):
    lists=[[]]
    for i in range(len(l)+1):
        for j in range(i):
            lists.append(l[j:i])
    return lists
l1=[1,2,3,4]
print(sub_lists(l1))
[[], [1], [1, 2], [2], [1, 2, 3], [2, 3], [3], [1, 2, 3, 4], [2, 3, 4], [3, 4], [4]]
from itertools import combinations
def sub_lists(my_list):
    subs=[]
    for i in range(0,len(my_list)+1):
        temp=[list(x) for x in combinations(my_list,i)]
        #print(temp)
        if len(temp)>0:
            subs.extend(temp)
    return subs
l1 = [10, 20, 30, 40]
sub_lists(l1)
[[],
 [10],
 [20],
 [30],
 [40],
 [10, 20],
 [10, 30],
 [10, 40],
 [20, 30],
 [20, 40],
 [30, 40],
 [10, 20, 30],
 [10, 20, 40],
 [10, 30, 40],
 [20, 30, 40],
 [10, 20, 30, 40]]
#34- Sieve of Eratosthenes method for computing primes upto a specified number
def SieveOfEratosthenes(num):
    prime=[True for i in range(num+1)]
    #boolean array
    p=2
    while(p*p<=num):
        if (prime[p]==True):
            for i in range(p*p,num+1,p): #start=4. stop=31,step=2
                #print("prime[i]=",i,p)
                prime[i]=False
        p+=1
    for p in range(2,num+1):
        if prime[p]:
            print(p)
SieveOfEratosthenes(30)
2
3
5
7
11
13
17
19
23
29
#35-create a list by concatenating a given list which range goes from 1 to n.
#Sample list : ['p', 'q'] and n =5
#Sample Output : ['p1', 'q1', 'p2', 'q2', 'p3', 'q3', 'p4', 'q4', 'p5', 'q5']
#s1-for loop from 0-n and concat i to lst[i]

def concat_lst():
    lst=['p', 'q']
    n=5
    res_lst=[]
    for i in range(1,n+1):
        #print(n)
        for j in lst:
            #print(i)
            res_lst.append(j+(str(i)))
    print(res_lst)
    
concat_lst()
    
['p1', 'q1', 'p2', 'q2', 'p3', 'q3', 'p4', 'q4', 'p5', 'q5']
#s2-using format method
lst=['p','q']
n=4
new_lst=['{}{}'.format(x,y) for y in range(1,n+1) for x in lst]
print(new_lst)
['p1', 'q1', 'p2', 'q2', 'p3', 'q3', 'p4', 'q4']
#36-Python program to get variable unique identification number or string
#q1-is alphanumeric consider as string?

#s1-auto increament as number
#s2-combination of alphabet and number

#s1-
a='c'
print(hex(id(10)))
print(format(id(a),'d'))  
0x201af6d6a50
2206263230576
#37-common items from two lists
#s1-in method with for loop
#s2-& with set
#s3-intersection
#s1-
lst1=[4,2,1,6,7,21,51,88]
lst2=[5,4,2,1,88,21,99,0,100,7]
lst=[]
for i in lst2:  #i for i in lst1 if i in lst2
    if i in lst1:
        lst.append(i)
print(lst)
[4, 2, 1, 88, 21, 7]
lst1=[4,2,1,6,7,21,51,88]
lst2=[5,4,2,1,88,21,99,0,100,7]
print(set(lst1) & set(lst2))
{1, 2, 4, 7, 21, 88}
#38-Python program to change the position of every n-th value with the (n+1)th in a list.
#Sample list: [0,1,2,3,4,5]
#Expected Output: [1, 0, 3, 2, 5, 4]

#q1-what if value is higher position than n+1 already does it move back
#q2-what if number's resu;ted location is out of range
#q3-after shuffling few numbers could be out of place i.e. not at (n+1) position
#q4-what if I have two or more identical numbers

#s1-for loops with swapping
def pos_chnage():
    lst1=[0,1,2,3,4,5]
    lst=[]
    for i in range(len(lst1)-1):    
       # print(lst[i],i)
        if lst1[i]==i:
            temp=lst1[i]
            lst1[i]=lst1[i+1]
            lst1[i+1]=temp
            lst.append(lst1[i])
            lst.append(lst1[i+1])
    print(lst)
pos_chnage()
[1, 0, 3, 2, 5, 4]
#s2-itertools tee method
from itertools import zip_longest,chain,tee
def replace_copy(lst):
    lst1,lst2=tee(iter(lst),2)
    return list(chain.from_iterable(zip_longest(lst[1::2],lst[::2])))
n=[0,1,2,3,40,5]
replace_copy(n)
[1, 0, 3, 2, 5, 40]
#39-program to convert a list of multiple integers into a single integer
#Sample list: [11, 33, 50]
#Expected Output: 113350
#s1-+operator
#s2-concat
#s3-join method

def list_conv():
    num=' '
    lst=[11, 33, 50]
    for i in lst:
        num=num+str(i)
    print(num)
list_conv()
 113350
#3-join method
lst=[11, 33, 50]
x="".join(map(str,lst))
print(x)
113350
#40-split a list based on first character of word
#check what is the first letter and move the word to resulted list
#l1-strings are iterable themselves
#S1-create dictionaries with keys as first char and append the words if match found
#s2-itemgettor and groupby import

def list_split():
    dictionary=dict()
    word_list = ['be','have','do','say','get','make','go','know','take','see','come','think',
     'look','want','give','use','find','tell','ask','work','seem','feel','leave','call']
    for i in word_list:
        f=i[0]
        if f in dictionary.keys():
            dictionary[f].append(i)
        else:
            dictionary[f]=[i]
    return dictionary
print(list_split())
{'b': ['be'], 'h': ['have'], 'd': ['do'], 's': ['say', 'see', 'seem'], 'g': ['get', 'go', 'give'], 'm': ['make'], 'k': ['know'], 't': ['take', 'think', 'tell'], 'c': ['come', 'call'], 'l': ['look', 'leave'], 'w': ['want', 'work'], 'u': ['use'], 'f': ['find', 'feel'], 'a': ['ask']}
#s2-itemgettor and groupby import
from itertools import groupby
from operator import itemgetter

word_list = ['be','have','do','say','get','make','go','know','take','see','come','think']

for letter, words in groupby (sorted(word_list),key=itemgetter(0)):
    print (letter)
    for word in words:
        print (word)    
b
be
c
come
d
do
g
get
go
h
have
k
know
m
make
s
say
see
t
take
think
#41-program to create multiple lists
objectiv={}
for i in range(10):
    objectiv[str(i)]=[]
print(objectiv)
{'0': [], '1': [], '2': [], '3': [], '4': [], '5': [], '6': [], '7': [], '8': [], '9': []}
#42-find missing and additional values in two lists
#Sample data : Missing values in second list: b,a,c
#Additional values in second list: g,h
list1 = ['a','b','c','d','e','f']
list2 = ['d','e','f','g','h']
missing=[]
additional=[]
for i in list1:
    if i not in list2:
        missing.append(i)
    if i not in list1:#did not work as we are tracing list 1 not list2 with for loop
        additional.append(i)
print(missing,additional)
['a', 'b', 'c'] []
#difference method
list1 = ['a','b','c','d','e','f']
list2 = ['d','e','f','g','h']
print('missing values in second list: ', set(list1).difference(set(list2)))
print('missing values in second list: ', set(list2).difference(set(list1)))
missing values in second list:  {'a', 'c', 'b'}
missing values in second list:  {'h', 'g'}
#43-program to split a list into different variables
#q1-what is the base condition to assign value to variable?
#q2-new list would be the part of original lists or two separate lists
#s1-create two empty lists and apeend values based on condition--Not expected
#s2-if they are nested list/child lists of original list then append two sublists inside and cut paste the values to sublists
#--not expected

#expected outcome
lst=[5,4,2]
var1,var2,var3=lst
print(var1)
5
#44-generate groups of five consecutive numbers in a list
#q1-what will be outcomel list or just printed numbers?
#q2-what if I foud 2 different groups having few but not all numbers in common?

#s1-sort list and look for consecutive numbers --complexity will go up due to 2 for loops
#s2-list comprehension
#s3-grouper method
[[10*i + j for j in range(1,11)] for i in range(10)]
[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
 [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
 [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],
 [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
 [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
 [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],
 [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],
 [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],
 [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],
 [91, 92, 93, 94, 95, 96, 97, 98, 99, 100]]
def grouper(iterable,n):
    return zip(*[iter(iterable)]*n)#used * cause we dont know exact number of srgument passed
full_range=range(1,101)  #we could use range without for loop
grouped_list=list(grouper(full_range,10))
print(grouped_list)
[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (11, 12, 13, 14, 15, 16, 17, 18, 19, 20), (21, 22, 23, 24, 25, 26, 27, 28, 29, 30), (31, 32, 33, 34, 35, 36, 37, 38, 39, 40), (41, 42, 43, 44, 45, 46, 47, 48, 49, 50), (51, 52, 53, 54, 55, 56, 57, 58, 59, 60), (61, 62, 63, 64, 65, 66, 67, 68, 69, 70), (71, 72, 73, 74, 75, 76, 77, 78, 79, 80), (81, 82, 83, 84, 85, 86, 87, 88, 89, 90), (91, 92, 93, 94, 95, 96, 97, 98, 99, 100)]
#Date-6/23/2022
#45-Python program to convert a pair of values into a sorted unique array.
#s1-convert list to set
L = [(1, 2), (3, 4), (1, 2), (5, 6), (7, 8), (1, 2), (3, 4), (3, 4),
 (7, 8), (9, 10)]
print("Original List: ", L)
print("Sorted Unique Data:",(set().union(*L)))
Original List:  [(1, 2), (3, 4), (1, 2), (5, 6), (7, 8), (1, 2), (3, 4), (3, 4), (7, 8), (9, 10)]
Sorted Unique Data: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
#46-Python program to select the odd items of a list
l=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
[i%2==1 for i in l]
[True, False, True, False, True, False, True, False, True, False]
#46-program to insert an element before each element of a list
#input-["Green","Red","Blue"] and var='c'
#output-['c',"Green",'c',"Red",'c',"Blue"]

#s1-insert character at every even position
lst=["Green","Red","Blue"]
var='c'
lst=[v for i in lst for v in (var,i)] #inserted tuple 
print(lst)
['c', 'Green', 'c', 'Red', 'c', 'Blue']
lst=["Green","Red","Blue"]
var='c'
for i in range(len(lst)*2):
    if i%2==0:
        lst.insert(i,var)
print(lst)
['c', 'Green', 'c', 'Red', 'c', 'Blue']
#48-Python program to print a nested lists (each list on a new line) using the print() function
#q1-are they empty lists? or has contents

l=[]
for i in range(5):
     print([l])
[[]]
[[]]
[[]]
[[]]
[[]]
colors=[["green"],["Red"],["white"]]
print('\n'.join(str(lst) for lst in colors))
['green']
['Red']
['white']
#49-Python program to convert list to list of dictionaries
#Expected Output: [{'color_name': 'Black', 'color_code': '#000000'}, 
#{'color_name': 'Red', 'color_code': '#FF0000'}, {'color_name': 'Maroon', 'color_code': '#800000'}, 
#{'color_name': 'Yellow', 'color_code': '#FFFF00'}]
#s1-loop+dictionnary comprehension
#s2-list and dictionary comprehension
def lsttodict():
    val_lst1=["Black", "Red", "Maroon", "Yellow"]
    val_lst2=["#000000", "#FF0000", "#800000", "#FFFF00"]
    key_lst=['color_name','color_code']
    res=[]
    
    for i in range(len(val_lst1)):
        res.append({key_lst[0]:val_lst1[i],key_lst[1]:val_lst2[i]})
    print(str(res))
lsttodict()
[{'color_name': 'Black', 'color_code': '#000000'}, {'color_name': 'Red', 'color_code': '#FF0000'}, {'color_name': 'Maroon', 'color_code': '#800000'}, {'color_name': 'Yellow', 'color_code': '#FFFF00'}]
#s2-list and dictionary comprehension
val_lst1=["Black", "Red", "Maroon", "Yellow"]
val_lst2=["#000000", "#FF0000", "#800000", "#FFFF00"]
key_lst=['color_name','color_code']
res=[]

res= [{key_lst[0]:val_lst1[i],key_lst[1]:val_lst2[i]} for i in range(len(val_lst1))]
print(str(res))
[{'color_name': 'Black', 'color_code': '#000000'}, {'color_name': 'Red', 'color_code': '#FF0000'}, {'color_name': 'Maroon', 'color_code': '#800000'}, {'color_name': 'Yellow', 'color_code': '#FFFF00'}]
#50-sort a list of nested dictionaries
#s1-ordereddict()+sorted() method
#s2-sorted
from collections import OrderedDict
from operator import getitem
test_dict={'Nikhil':{'roll':24,'marks':17},
          'Akshat':{'roll':54,'marks':12},
          'Akash':{'roll':12,'marks':15}}
res=OrderedDict(sorted(test_dict.items(),key=lambda x:getitem(x[1],'roll')))
res1=(sorted(test_dict.items(),key=lambda x:getitem(x[1],'roll')))
print(res,res1)
OrderedDict([('Akash', {'roll': 12, 'marks': 15}), ('Nikhil', {'roll': 24, 'marks': 17}), ('Akshat', {'roll': 54, 'marks': 12})]) [('Akash', {'roll': 12, 'marks': 15}), ('Nikhil', {'roll': 24, 'marks': 17}), ('Akshat', {'roll': 54, 'marks': 12})]
my_list = [{'key': {'subkey': 1}}, {'key': {'subkey': 10}}, {'key': {'subkey': 5}}]
print("Original List: ")
print(my_list)
my_list.sort(key=lambda e: e['key']['subkey'], reverse=True)
print("Sorted List: ")
print(my_list)
Original List: 
[{'key': {'subkey': 1}}, {'key': {'subkey': 10}}, {'key': {'subkey': 5}}]
Sorted List: 
[{'key': {'subkey': 10}}, {'key': {'subkey': 5}}, {'key': {'subkey': 1}}]
#Date-6/24/22
#51-Python program to split a list every Nth element
#input-['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']
#output-[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]

#s1-for loop with len%n==0 logic
#s2-lst.append[::n]
def lstSplit():
    lst=['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']
    n=3
    return [lst[i::3] for i in range(3)]
print(lstSplit())
[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]
#52-compute the difference between two lists
#s1-in operator
#s2-difference method 
#s3-counter method
def lstDiffer():
    lst1= ["red", "orange", "green", "blue", "white"]
    lst2=["black", "yellow", "green", "blue"]
    lst1_lst2=set(lst1).difference(set(lst2))
    lst2_lst1=set(lst2).difference(set(lst1))
    print(lst1_lst2, lst2_lst1)
lstDiffer()
{'orange', 'white', 'red'} {'yellow', 'black'}
#s3-counnter method
from collections import Counter
color1=["red", "orange", "green", "blue", "white"]
color2=["black", "yellow", "green", "blue"]
counter1=Counter(color1)
counter2=Counter(color2)
print("color1-color2=",list(counter1-counter2))
print("color2-color1=",list(counter2-counter1))
color1-color2= ['red', 'orange', 'white']
color2-color1= ['black', 'yellow']
#53-Python program to create a list with infinite elements.
import itertools
c = itertools.count()
print(next(c))
print(next(c))
print(next(c))
print(next(c))
print(next(c))
0
1
2
3
4
#54-concatenate elements of a list
#q1-is output in list format?
#s1-assign variables to list value and concatenate-we dont know how many element list would have in advance
#s2-join method
#s3-for loop
concEle=" "
lst= ["red", "orange", "green", "blue", "white"]
for i in lst:
    concEle=(concEle+i) 
    
#concEle=(concEle+i) for i in lst
print(concEle)
 redorangegreenbluewhite
#s2-join method
lst= ["red", "orange", "green", "blue", "white"]
print(''.join(map(str,lst)))  #or
print(''.join(lst))
redorangegreenbluewhite
redorangegreenbluewhite
#55-remove key values pairs from a list of dictionaries
#s1-tye converstion from dictionary to list
#s2-access key and values then append to list as plain values
lst={'color_name1': 'Black', 'color_name2': 'Red', 'color_name3': 'Maroon', 'color_name4': 'Yellow'}
for i in (lst):
    print([i,lst[i]])
    
print(list(lst))
['color_name1', 'Black']
['color_name2', 'Red']
['color_name3', 'Maroon']
['color_name4', 'Yellow']
['color_name1', 'color_name2', 'color_name3', 'color_name4']
original_list = [{'key1':'value1', 'key2':'value2'}, {'key1':'value3', 'key2':'value4'}]
new_list=[{k:v for k,v in d.items() if k!='key1'} for d in original_list]
print(new_list)
[{'key2': 'value2'}, {'key2': 'value4'}]
#56-convert a string to a list
#s1-trace string by character and append to list
str1='redorangegreenbluewhite'
lst=[]
for i in str1:
    lst.append(i)
print(lst)
['r', 'e', 'd', 'o', 'r', 'a', 'n', 'g', 'e', 'g', 'r', 'e', 'e', 'n', 'b', 'l', 'u', 'e', 'w', 'h', 'i', 't', 'e']
#s2-ast method
import ast
str1="('r', 'e', 'd', 'o')"
print(ast.literal_eval(str1))
('r', 'e', 'd', 'o')
#57-check if all items of a given list of strings is equal to a given string.
#q1-are these items in same sequence as given string characters?
#s1-all method
var='green'
lst=["green", "green", "green", "green"]
print(all(i==var for i in lst))
True
#58-replace the last element in a list with another list
#input-[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]
#output-[1, 3, 5, 7, 9, 2, 4, 6, 8]
#s1-remove last element and append elements from second list
#s2=list slicing
def eleRepl():
    lst1=[1, 3, 5, 7, 9, 10]
    lst2=[2, 4, 6, 8]
    #for i in range(len(lst1)):
    lst1.remove(lst1[len(lst1)-1])
    print(lst1)
    for i in lst2:
        lst1.append(i)
    print(lst1)
eleRepl()
[1, 3, 5, 7, 9]
[1, 3, 5, 7, 9, 2, 4, 6, 8]
#s2=list slicing
lst1=[1, 3, 5, 7, 9, 10]
lst2=[2, 4, 6, 8]
lst1[-1:]=lst2
print(lst1)
[1, 3, 5, 7, 9, 2, 4, 6, 8]
#59-check whether the n-th element exists in a given list
#q1-are we looking for index or actual element?
#s1-check length of the list.  if len>n then its true otherwise false
lst1=[1, 3, 5, 7, 9, 10]
n=30
if len(lst1)>n:
    print("nth element exist")
else:
    print("nth element does not exist")
nth element does not exist
#60-Python program to find a tuple, the smallest second index value from a list of tuples
x=[(4, 1), (1, 2), (6, 0)]
print(min(x,key=lambda n:(-n[0])))
(6, 0)
#61-Python program to create a list of empty dictionaries
dct={}
lst=[]
for i in range(10):
    lst.append(dct)
print(lst)
[{}, {}, {}, {}, {}, {}, {}, {}, {}, {}]
#list comprehension
n=5
l=[{} for _ in range(n)]
print(l)
[{}, {}, {}, {}, {}]
#62-print a list of space-separated elements
#s1-join method replacing with spaces
#s2-concat all elements with space and insert to a list as single element
num=[1,2,3,4,5]
print(*num)
1 2 3 4 5
num=[1,2,3,4,5]
val1=num[0]
val2=num[1]
print(val1, val2)
#63- insert a given string at the beginning of all items in a list
#input-Sample list : [1,2,3,4], string : emp
#output-['emp1', 'emp2', 'emp3', 'emp4']
def lstReplStr():
    lst=[1,2,3,4]
    str1='emp'
    str2=''
    for i in lst:
        str2=str1+(str(i))
        print(str2)
        lst.append(str1)
    print(lst)
print('n')
lstReplStr()
 
#date-06/26/22
#63- insert a given string at the beginning of all items in a list
#input-Sample list : [1,2,3,4], string : emp
#output-['emp1', 'emp2', 'emp3', 'emp4']
#s1-for loop
#format method
def lstReplStr():
    lst=[1,2,3,4]
    res_lst=[]
    str1='emp'
    str2=''
    for i in lst:
        str2=str1+(str(i))
        #print(str2)
        res_lst.append(str2)
    print(lst,res_lst)
#print('n')
lstReplStr()
[1, 2, 3, 4] ['emp1', 'emp2', 'emp3', 'emp4']
#formmat method
num=[1,2,3,4]
print(['emp{0}'.format(i) for i in num])
['emp1', 'emp2', 'emp3', 'emp4']
#64-iterate over two lists simultaneously
#tc1=2 lists are same length
#tc2-2 lists are of different length

lst1=[1,2,3,4]
lst2=[1,2,3,4,1,2,3,4]
for i in lst1,lst2:
    print(i)
[1, 2, 3, 4]
[1, 2, 3, 4, 1, 2, 3, 4]
#zip method
import itertools
num=[1,2,3,4]
color=['Red','Blue','Green']
for (a,b) in itertools.zip_longest(num,color,fillvalue=-1):
    print(a,b)
1 Red
2 Blue
3 Green
4 -1
#Date-6/28/22
#65-move all zero digits to end of a given list of numbers
#Original list:[3, 4, 0, 0, 0, 6, 2, 0, 6, 7, 6, 0, 0, 0, 9, 10, 7, 4, 4, 5, 3, 0, 0, 2, 9, 7, 1]
#result=[3, 4, 6, 2, 6, 7, 6, 9, 10, 7, 4, 4, 5, 3, 2, 9, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]

#s1-swapping : This is inefficient way giving up
#s2-sorting in reverse
def zeroEnd():
    lst=[3, 4, 0, 0, 0, 6, 2, 0, 6, 7, 6, 0, 0, 0, 9, 10, 7, 4, 4, 5, 3, 0, 0, 2, 9, 7, 1]
    #lst=[ 7, 6, 0, 0, 0, 9, 10, 7, 4, 4, 5, 3, 0, 0, 2, 9, 0, 0]
    n=-1
    for i in range(len(lst)):
        if lst[i]==0 and lst[n]!=0:
            temp=lst[i]
            lst[i]=lst[n]
            lst[n]=temp
            n-=1
            print("if",lst,n,i)
        elif lst[i]==0 and lst[n]==0:
            while lst[n]==0:
                n-=1
                print(lst,n,i)
            temp=lst[i]
            lst[i]=lst[n]
            lst[n]=temp
            n-=1
            print("else",lst,n,i)   
        #elif 
    print(lst)
zeroEnd()
if [3, 4, 1, 0, 0, 6, 2, 0, 6, 7, 6, 0, 0, 0, 9, 10, 7, 4, 4, 5, 3, 0, 0, 2, 9, 7, 0] -2 2
if [3, 4, 1, 7, 0, 6, 2, 0, 6, 7, 6, 0, 0, 0, 9, 10, 7, 4, 4, 5, 3, 0, 0, 2, 9, 0, 0] -3 3
if [3, 4, 1, 7, 9, 6, 2, 0, 6, 7, 6, 0, 0, 0, 9, 10, 7, 4, 4, 5, 3, 0, 0, 2, 0, 0, 0] -4 4
if [3, 4, 1, 7, 9, 6, 2, 2, 6, 7, 6, 0, 0, 0, 9, 10, 7, 4, 4, 5, 3, 0, 0, 0, 0, 0, 0] -5 7
[3, 4, 1, 7, 9, 6, 2, 2, 6, 7, 6, 0, 0, 0, 9, 10, 7, 4, 4, 5, 3, 0, 0, 0, 0, 0, 0] -6 11
[3, 4, 1, 7, 9, 6, 2, 2, 6, 7, 6, 0, 0, 0, 9, 10, 7, 4, 4, 5, 3, 0, 0, 0, 0, 0, 0] -7 11
else [3, 4, 1, 7, 9, 6, 2, 2, 6, 7, 6, 3, 0, 0, 9, 10, 7, 4, 4, 5, 0, 0, 0, 0, 0, 0, 0] -8 11
if [3, 4, 1, 7, 9, 6, 2, 2, 6, 7, 6, 3, 5, 0, 9, 10, 7, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0] -9 12
if [3, 4, 1, 7, 9, 6, 2, 2, 6, 7, 6, 3, 5, 4, 9, 10, 7, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0] -10 13
if [3, 4, 1, 7, 9, 6, 2, 2, 6, 7, 6, 3, 5, 4, 9, 10, 7, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0] -11 18
if [3, 4, 1, 7, 9, 6, 2, 2, 6, 7, 6, 3, 5, 4, 9, 10, 0, 0, 4, 7, 0, 0, 0, 0, 0, 0, 0] -12 19
if [3, 4, 1, 7, 9, 6, 2, 2, 6, 7, 6, 3, 5, 4, 9, 0, 0, 0, 4, 7, 10, 0, 0, 0, 0, 0, 0] -13 20
if [3, 4, 1, 7, 9, 6, 2, 2, 6, 7, 6, 3, 5, 4, 0, 0, 0, 0, 4, 7, 10, 9, 0, 0, 0, 0, 0] -14 21
if [3, 4, 1, 7, 9, 6, 2, 2, 6, 7, 6, 3, 5, 0, 0, 0, 0, 0, 4, 7, 10, 9, 4, 0, 0, 0, 0] -15 22
if [3, 4, 1, 7, 9, 6, 2, 2, 6, 7, 6, 3, 0, 0, 0, 0, 0, 0, 4, 7, 10, 9, 4, 5, 0, 0, 0] -16 23
if [3, 4, 1, 7, 9, 6, 2, 2, 6, 7, 6, 0, 0, 0, 0, 0, 0, 0, 4, 7, 10, 9, 4, 5, 3, 0, 0] -17 24
if [3, 4, 1, 7, 9, 6, 2, 2, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 10, 9, 4, 5, 3, 6, 0] -18 25
if [3, 4, 1, 7, 9, 6, 2, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 10, 9, 4, 5, 3, 6, 7] -19 26
[3, 4, 1, 7, 9, 6, 2, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 7, 10, 9, 4, 5, 3, 6, 7]
#s1-lambda function
#s2-list comprehension
#s3-removing and appending zeros
#s1-lambda-
lst=[3, 4, 0, 0, 0, 6, 2, 0, 6, 7, 6, 0, 0, 0, 9, 10, 7, 4, 4, 5, 3, 0, 0, 2, 9, 7, 1]
#lst=filter(lambda x: x!=0,lst)+[0]*lst.count(0)
x=[i for i in lst if i!=0]
y=[i for i in lst if i==0]
x.extend(y)
print(x)
[3, 4, 6, 2, 6, 7, 6, 9, 10, 7, 4, 4, 5, 3, 2, 9, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
#removing and appending zeros
lst=[3, 4, 0, 0, 0, 6, 2, 0, 6, 7, 6, 0, 0, 0, 9, 10, 7, 4, 4, 5, 3, 0, 0, 2, 9, 7, 1]
for i in lst:
    if i==0:
        lst.remove(i)
        lst.append(i)
print(lst)
[3, 4, 6, 2, 6, 7, 6, 9, 10, 7, 4, 4, 5, 3, 2, 9, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
#list comprehension
arr = [18, 0, 4, 0, 0, 6]
count = 0
for i in range(len(arr)):
    if arr[i] != 0:
        arr[i], arr[count] = arr[count], arr[i]
        count += 1
        print(arr,i,count,arr[i],arr[count])
print(arr)
[18, 0, 4, 0, 0, 6] 0 1 18 0
[18, 4, 0, 0, 0, 6] 2 2 0 0
[18, 4, 6, 0, 0, 0] 5 3 0 0
[18, 4, 6, 0, 0, 0]
#Python program to find the list in a list of lists whose sum of elements is the highest.
#s1-for loops
#s2-max method
lst=[[1,2,3], [4,5,6], [10,11,12], [7,8,99]]
sum=0
max_sum=0
for i in lst:
    sum=0
    lst=[]
    for j in i:
        sum=sum+j
        lst.append(j)
    if sum>max_sum:
        max_sum=sum
        max_lst=lst
print(max_lst)
[7, 8, 99]
#67-Python program to find all the values in a list are greater than a specified number
#s1-all method
#s2-lambda
#s3-for loop
lst=[3, 4, 6, 2, 6, 7, 6, 9, 10, 7]
n=5
if all(lst)>n:
    print("yass")
else:
    print("No")
No
#lambda
lst=[3, 4, 6, 2, 6, 7, 6, 9, 10, 7]
n=99

result = lambda x : f"{x} is True" if x >all(lst) else f"{x} is False"
print(result(0))
0 is False
#68-Python program to extend a list without append.
#s1-extend
#s2-+ method
#list slicing
#s1
lst1=[10, 20, 30]
lst2=[40, 50, 60]
lst1.extend(lst2)
print(lst1)
#s2
lst=lst1+lst2
print(lst)

#s3
x=[10, 20, 30]
y=[40, 50, 60]
x[:0]=y
print(x)
[10, 20, 30, 40, 50, 60]
[10, 20, 30, 40, 50, 60, 40, 50, 60]
[40, 50, 60, 10, 20, 30]
#69-Python program to remove duplicates from a list of lists.
#s1-append unique values to new list
#s2-for loop
#s3-conversion in set-does not work this
#s4-groupby method
lst=[[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]
def to_sets(l):
    for i in range(l): #row
        for j in list[i]:
            list[i][j] = set([list[i][j]])
print(to_sets(lst))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_12188/1273686361.py in <module>
      8         for j in list[i]:
      9             list[i][j] = set([list[i][j]])
---> 10 print(to_sets(lst))

~\AppData\Local\Temp/ipykernel_12188/1273686361.py in to_sets(l)
      5 lst=[[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]
      6 def to_sets(l):
----> 7     for i in range(l): #row
      8         for j in list[i]:
      9             list[i][j] = set([list[i][j]])

TypeError: 'list' object cannot be interpreted as an integer
#s1-
lst=[[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]
res_lst=[]
for i in lst:
    if i not in res_lst:
        res_lst.append(i)
print(res_lst)
[[10, 20], [40], [30, 56, 25], [33]]
#s4-groupby method
import itertools
numbers = [[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]
numbers.sort()
new_num=list(num for num,_ in itertools.groupby(numbers))
print(new_num)
[[10, 20], [30, 56, 25], [33], [40]]
#70-Python program to find the items starts with specific character from a given list
#s1-for loops
lst=['abcd', 'abc', 'bcd', 'bkie', 'cder', 'cdsw', 'sdfsd', 'dagfa', 'acjd']
res=[]
for i in lst:
    if i[0]=='a':
        res.append(i)
print(res)
['abcd', 'abc', 'acjd']
#s2-startwith method
def test(lst,char):
    result=[i for i in lst if i.startswith(char)]
    return result
txt=['abcd', 'abc', 'bcd', 'bkie', 'cder', 'cdsw', 'sdfsd', 'dagfa', 'acjd']
char='a'
print(test(txt,char))
['abcd', 'abc', 'acjd']
#71-Python program to check whether all dictionaries in a list are empty or not.
#s1-check length of dictionaries
lst1=[{},{},{}]
lst2=[{1,2},{},{}]

print(len(lst1[0]),len(lst2[0]))
0 2
#s2-all method
lst1=[{},{},{}]
lst2=[{1,2},{},{}]
print(all(not d for d in lst1))
print(all(not d for d in lst2))
True
False
#72-Python program to flatten a given nested list structure
#s1-trace lists with for loops and append content to new list
lst=[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]
res_lst=[]
for i in lst:
    if type(i) is list:
        for j in i:
            res_lst.append(j)
    else:
        res_lst.append(i)
print(res_lst)
[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
#s2-list comprehension-works only for nested lists not for mixture of elements and list inside list
#s3-using recursion
lst=[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]
res_lst=[]
def remList(l):
    for i in l:
        if type(i) == list:
            remList(i)
        else:
            res_lst.append(i)
    #return res_lst
    #print(res_lst)
remList(lst)
print(res_lst)
[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]
#s3-in built functtool method-works only with list into list 
import functools
import operator

lst=[[20, 30],[60, 70, 80], [90, 100, 110, 120]]
#flatList=functools.reduce(operator.iconcat,lst,[])
flatList = functools.reduce(operator.iconcat, lst, [])
print(flatList)
[20, 30, 60, 70, 80, 90, 100, 110, 120]
#s4-chain method
import itertools
lis = [[11, 22, 33, 44], [55, 66, 77], [88, 99, 100]]
 
flatList = list(itertools.chain(*lis))
 
print("Original List:", lis)
print("Flattened List:", flatList)
Original List: [[11, 22, 33, 44], [55, 66, 77], [88, 99, 100]]
Flattened List: [11, 22, 33, 44, 55, 66, 77, 88, 99, 100]
#73-remove consecutive duplicates of a given list
#s1-groupby method
#s2-convert list to a set-not an option as we are removing ONLY CONSECUTIVE dupes
#s3-for loop
def remDupes():
    lst=[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]
    res=list(key for key,group in itertools.groupby(lst))
    print(res)
remDupes()
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]
#74-program to pack consecutive duplicates of a given list elements into sublists
#s1-for loops with count
#s2-group method
import itertools
def packDupes():
    lst=[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]
    res=[list(group) for key,group in itertools.groupby(lst)]
    print(res)
packDupes()
[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]
#75-create a list reflecting the run-length encoding from a given list of integers or a given list of characters.
#s1-groupby method
#s2-using dictionary
import itertools
n_list = [1,1,2,3,4,4.3,5, 1]
def encode_lst(lst):
    return [[len(list(group)),key] for key,group in itertools.groupby(lst)]
print(encode_lst(n_list))
[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]
#Date-6/30/22
#s2-dictionary method
from collections import OrderedDict
def runLengthEncoding(inputs):
    dict=OrderedDict.fromkeys(input,0)
    for ch in inputs:
        dict[ch]+=1########interesting DICT counts char without if condition
       # print("D",dict[ch])
        #list[ch]+=1
        #print("L",list[ch])
        #print(dict[ch],ch)
    output=""
    for key,value in dict.items():
        output=output+key+str(value)
    return output
input="wwwwaaadexxdxxxw"
print (runLengthEncoding(input))      
w5a3d2e1x5
#s3-2 while or for loops
def encode(message):
    i=0
    encoded_message=""
    while(i<=len(message)-1):
        count=1
        ch=message[i]
        j=i
        while(j<len(message)-1):
            if (message[j]==message[j+1]):
                count+=1
                j=j+1
            else:
                break
        encoded_message=encoded_message+str(count)+ch
        i=j+1
    return encoded_message
print(encode("ABBBBCCCCCCCCAB"))
1A4B8C1A1B
#76-create a list reflecting the modified run-length encoding from a given list of integers or a given list of characters
#Original list:[1, 1, 2, 3, 4, 4, 5, 1]
#modified RLE-[[2, 1], 2, 3, [2, 4], 5, 1]
#s1-2 while loops
#s2-dicitonary+list combo
#s3-recursion
#s2-dictionary solution
from itertools import groupby
def modified_encode(lst):
    def ctr_ele(el):
        if len(el)>1:return[len(el),el[0]]
        else: return el[0]
    return[ctr_ele(list(group)) for key,group in groupby(lst)]
n_list = [1,1,2,3,4,4,5, 1]
print(modified_encode(n_list))
[[2, 1], 2, 3, [2, 4], 5, 1]
#77-decode a run-length encoded given list.
#s1-2 for loops with type(i)==lst or isinstance(list)
#input-[[2, 1], 2, 3, [2, 4], 5, 1]
#output-[1, 1, 2, 3, 4, 4, 5, 1]
def decode_lst(lst):
    op_lst=[]
    for i in lst:
        if type(i)==list:
            count=i[0]
            num=i[1]
            for j in range(count):
                op_lst.append(num)
        else:
            op_lst.append(i)
    print(op_lst)
ip_lst=[[2, 1], 2, 3, [2, 4], 5, 1]
decode_lst(ip_lst)
[1, 1, 2, 3, 4, 4, 5, 1]
#78- program to split a given list into two parts where the length of the first part of the list is given
#s1-list licing
#s2-for loop+counting
lst=[1, 1, 2, 3, 4, 4, 5, 1]
n=3
op_lst=[lst[:n],lst[n:]]
print(op_lst)
[[1, 1, 2], [3, 4, 4, 5, 1]]
#s2-for loop+couting
lst=[1, 1, 2, 3, 4, 4, 5, 1]
n=3
for i in lst:
    op_lst=[]
    lst1=op_lst[[]]
    lst2=op_lst[[]]
    if len(lst1)<n:
        op_lst[lst1.append(i)]
    else:
        op_lst[lst2.append(i)]
print(op_lst)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_1972/3607204617.py in <module>
      4 for i in lst:
      5     op_lst=[]
----> 6     lst1=op_lst[[]]
      7     lst2=op_lst[[]]
      8     if len(lst1)<n:

TypeError: list indices must be integers or slices, not list
#79-Python program to remove the K'th element from a given list, print the new list.
lst=[1, 1, 2, 3, 4, 4, 5, 1]
k=4
lst.remove(k)#it removes that element k and not kth element
print(lst)
[1, 1, 2, 3, 4, 5, 1]
def remove_kth_element(n_list, L):
    return  n_list[:L-1] + n_list[L:]
print(remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1],4))
[1, 1, 2, 4, 4, 5, 1]
#80-insert an element at a specified position into a given list.
lst=[1, 1, 2, 3, 4, 4, 5, 1]
lst.insert(8,2)
print(lst)
[1, 1, 2, 3, 4, 4, 5, 1, 2]
def insert_spec_position(x, n_list, pos):
    return n_list[:pos-1]+[x]+n_list[pos-1:]
n_list = [1,1,2,3,4,4,5,1]
print("Original list:") 
print(n_list)
kth_position = 3
x = 12
result = insert_spec_position(x, n_list, kth_position)
print("\nAfter inserting an element at kth position in the said list:")
print(result)
Original list:
[1, 1, 2, 3, 4, 4, 5, 1]

After inserting an element at kth position in the said list:
[1, 1, 12, 2, 3, 4, 4, 5, 1]
#81- extract a given number of randomly selected elements from a given list
#s1-random randint method applied to index/elment i
#s2-random sample method
#input=[1, 1, 2, 3, 4, 4, 5, 1]
#output=[4, 4, 1]
import random
lst=[1, 1, 2, 3, 4, 4, 5, 1]
cnt=1
n=3
res=[]
for i in range(len(lst)):
    if cnt<=n:
        i=(random.randint(0,len(lst)-1))
       # print(i,cnt)
        res.append(lst[i])
        cnt+=1
    else:
        break
print(res)
[5, 1, 1]
import random
def random_select_num(n_lst,n):
    return random.sample(n_lst,n)
n_lst=[1,1,2,3,4,4,5,1]
result=(random_select_num(n_lst,3))
print(result)
[1, 5, 1]
#82-generate the combinations of n distinct objects taken from the elements of a given list
#input- [1, 2, 3, 4, 5, 6, 7, 8, 9] 
#output-[1, 2] [1, 3] [1, 4] [1, 5] .... [7, 8] [7, 9] [8, 9]
#s1-combination method
from itertools import combinations
lst=[1, 2, 3] 
res=combinations(lst,2)
for i in list(res):
    print (i)
#print(res)
(1, 2)
(1, 3)
(2, 3)
#s2-work on it again
def comb(n,n_lst):
    if n<=0:
        yield []#when n=0 then return empty list and jump to for loop ahead
        return
    for i in range(len(n_lst)):
        c_num=n_lst[i:i+1]#to get ith element as c_num
        #print("c=",c_num)
       # print((n-1,n_lst[i+1:])) #takes to n>0 and corresponding list value
        for a_num in comb(n-1,n_lst[i+1:]):#list was sliced to ith and all other elements elements
            #this go back to C_num logic but yields element from i+1 onwards
            #print("a=",a_num)
            yield c_num+a_num
n_list = [1,2,3,4]
n=2
result = comb(n, n_list)
for e in result:
     print(e)
[1, 2]
[1, 3]
[1, 4]
[2, 3]
[2, 4]
[3, 4]
#83-round every number of a given list of numbers and print the total sum multiplied by the length of the list
#input- [22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]
#output-243
#s1-round up mthod 
import math
def rnd_mehtod(lst):
    lst_len=len(lst)
    res_sum=0
    result=0
    for i in lst:
        rnd_num=round(i)
        res_sum=res_sum+rnd_num
    result=lst_len*res_sum
    print(result)
ip_lst=[22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]
rnd_mehtod(ip_lst)
243
#s2-round+map
nums = [22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]
print("Original list: ", nums)
print("Result:")
lenght=len(nums)
print(sum(list(map(round,nums))* lenght))
Original list:  [22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]
Result:
243
#84-round the numbers of a given list, print the minimum and maximum numbers and multiply the numbers by 5. 
#Print the unique numbers in ascending order separated by space
#input- [22.4, 4.0, 16.22, 9.1, 11.0, 12.22, 14.2, 5.2, 17.5]
#Minimum value: 4 ; Maximum value: 22 ; Result:20 25 45 55 60 70 80 90 110
res_lst=[]
result=""
lst=[22.4, 4.0, 16.22, 9.1, 11.0, 12.22, 14.2, 5.2, 17.5]
res_lst=list(map(round,lst))
print("rounded list=",res_lst)
print("maximum value in rounded list=",max(res_lst))
print("minimum value in rounded list=",min(res_lst))
res_lst.sort()
for i in res_lst:
    i*=5
    result=result+str(i)+" "
print(result)    
rounded list= [22, 4, 16, 9, 11, 12, 14, 5, 18]
maximum value in rounded list= 22
minimum value in rounded list= 4
20 25 45 55 60 70 80 90 110 
#85-create a multidimensional list (lists of lists) with zeros
#input=Multidimensional list: [[0, 0], [0, 0], [0, 0]]
lst=[]
for i in range(9):
    lst.append([0,0])
print(lst)
[[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]
nums = []

for i in range(3):

    nums.append([])

    for j in range(2):

        nums[i].append(0)
print("Multidimensional list:")
print(nums)
Multidimensional list:
[[0, 0], [0, 0], [0, 0]]
#86-Python program to create a 3X3 grid with numbers
nums = []
for i in range(3):
    nums.append([])
    for j in range(1, 4):
        nums[i].append(j)
print("3X3 grid with numbers:")
print(nums)
3X3 grid with numbers:
[[1, 2, 3], [1, 2, 3], [1, 2, 3]]
#Date-07/01/22
#87-read a matrix from console and print the sum for each column. Accept matrix rows, columns and elements 
#for each column separated with a space(for every row) as input from the user
#input-Input rows: 2; Input columns: 2 ;Input number of elements in a row (1, 2, 3):
#Output- sum for each column: 4 6
def matrix_sum():
    lst=[]
    sums=0
    for i in range(4):
        lst.append([])
        for j in range(4):
            (lst[i].append(j))
        sums=sums+lst[i][j]        
        print(sums)
    print(lst)
matrix_sum()
6
12
18
24
[[0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3]]
#87-
rows=int(input("inpput rows:"))
columns=int(input("input columns: "))
matrix=[[0]*columns for row in range(rows)]
print("mat=",matrix)
for row in range(rows):
    lines=list(map(int,input().split()))
    #print("line=",lines)
    for column in range(columns):
        matrix[row][column]=lines[column]
sum=[0]*columns
for column in range(columns):
    for row in range(rows):
        sum[column]+=matrix[row][column]
    print((sum[column]), ' ', end = '')
inpput rows:2
input columns: 2
mat= [[0, 0], [0, 0]]
2 3
2 3
4  6  
#88-program to read a square matrix from console and print the sum of matrix primary diagonal.
#Accept the size of the square matrix and elements for each column separated with 
#a space (for every row) as input from the user.
#Input the size of the matrix: 3
#2 3 4
#4 5 6
#3 4 7
#Sum of matrix primary diagonal:14
#
#s-create matrix ;spot digoanl places ;add them up
size = int(input("Input the size of the matrix: "))
matrix = [[0] * size for row in range(0, size)]#inittializr the matrix
for x in range(0, size):
    line = list(map(int, input().split()))
    for y in range(0, size):
        matrix[x][y] = line[y]
print(matrix)
matrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))
print("Sum of matrix primary diagonal:")
print(matrix_sum_diagonal)    
Input the size of the matrix: 4
1 2 3 4
1 2 3 4
1 2 3 4
1 2 3 4
[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_13704/503293410.py in <module>
     16         matrix[x][y] = line[y]
     17 print(matrix)
---> 18 matrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1] for i in range(size))
     19 print("Sum of matrix primary diagonal:")
     20 print(matrix_sum_diagonal)

TypeError: 'list' object is not callable
#89-Zip two given lists of lists
#s1-chain method
#s2-add method
import itertools 
lst1=[[1, 3], [5, 7], [9, 11],[0,1]]
lst2=[[2, 4], [6, 8], [10, 12, 14]]
#print(itertools.zip_longest(str(lst1),str(lst2)))
#print(lst)
res=list(map(list.__add__,lst1,lst2))
print(str(res))
[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]
import itertools 
lst1=[[1, 3], [5, 7], [9, 11],[0,1]]
lst2=[[2, 4], [6, 8], [10, 12, 14]]
res=[list(itertools.chain(*i)) for i in zip(lst1,lst2)]
print(str(res))
[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]
#90- count number of lists in a given list of lists
#s1-isinstance or type method
#s2-return length-works only if all elements are lists
#input-[[1, 3], [5, 7], [9, 11], [13, 15, 17]]
#output-4
lst=[[1, 3], [5, 7], [9, 11], [13, 15, 17]]
count=0
for i in lst:
    if type(i) is list:
        count+=1
print("number of lists are ={}".format(count))
number of lists are =4
#s2-recursion
def count_list(input_list): 
    return len(input_list)  
#91-find the list with maximum and minimum length
#input-[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]
#output#maximum length of lists:(3, [13, 15, 17]) ;List with minimum length of lists:(1, [0])
#s1-type or isinstance method
lst=[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]
max_len=len(lst[0])
min_len=len(lst[0])
max_lst=[]
min_lst=[]
for i in lst:
    if type(i) is list:
        if len(i)>max_len:
            max_len=len(i)
            max_lst=i
        if len(i)<min_len:
            min_len=len(i)
            min_lst=i
print("max length of the list is {}, max length list is {}".format(max_len,max_lst))        
max length of the list is 3, max length list is [13, 15, 17]
def max_length_list(input_list):
    max_length=max(len(x) for x in input_list)
    max_list=max(input_list,key=len)
    return(max_length, max_list)
#92-check if a nested list is a subset of another nested list
#input-[[1, 3], [5, 7], [9, 11], [13, 15, 17]] ;[[1, 3], [13, 15, 17]]
#output-If the one of the said list is a subset of another.:True
def sub_lst():
    lst1=[[1, 3], [5, 7], [9, 11], [13, 15, 17]]
    lst2=[[1, 3], [13, 15, 17]]
    for i in lst2:
        if i in lst1:
            continue
        else:
            return False
    return True
sub_lst()
True
#s2-
def checkSubset(input_list1, input_list2): 
    return all(map(input_list1.__contains__, input_list2)) 
#93-count the number of sublists contain a particular element
#input-[[1, 3], [5, 7], [1, 11], [1, 15, 7]]
#output-Count 1 in the said list:3
lst=[[1, 3], [5, 7], [1, 11], [1, 15, 7]]
n=1
count=0
for i in lst:
    if type(i) is list and n in i:
        count+=1
print(count)
3
#date-07/02/22
#94-count number of unique sublists within a given list
#input-[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]
#output-Number of unique lists of the said list:{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}
#s1-Dictionary
#s2-groupby
#s3-for loop

#s1-dictionary
lst=[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]
def count_sublst(input_list):
    result={}
    for l in input_list:
        result.setdefault(tuple(l),list()).append(1)
        #result.add(tuple(l),list()).append(1)
       # print(result)
    for key,value in result.items():
        result[key]=sum(value)
    return result
print(count_sublst(lst) )          
{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}
#Date 07/05/22
#95-sort each sublist of strings in a given list of lists.
#input-[[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]]
#output-[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]
#q1-whats the criteria here? and are we treating numbers as strings? Meaning considering ASCIIs intead of numbers

def sort_sublists(input_list):
    result=list(map(sorted,input_list))
    return result
color1 = [["green", "orange"], ["black", "white"], ["white", "black", "orange"]]
print("\nOriginal list:")
print(color1)  
print("\nAfter sorting each sublist of the said list of lists:")
print(sort_sublists(color1))
Original list:
[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]

After sorting each sublist of the said list of lists:
[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]
#96- sort a given list of lists by length and value
#input-[[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]]
#output-[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]
#q1-in the process are we going to sort sublists too?
def sort_len_val(input_list):
    input_list.sort()
    input_list.sort(key=len)
    print(input_list)
lst=[[2], [0], [1, 3,8,9,0], [0, 7], [9, 11], [13, 15, 17]]
sort_len_val(lst)
[[0], [2], [0, 7], [9, 11], [13, 15, 17], [1, 3, 8, 9, 0]]
#97-remove sublists from a given list of lists, which contains an element outside a given range.
#input-[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]] and range=[[13, 14, 15, 17]]
#output-[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11]]
#q1-what does range refer to? is it length or content
#s1-search for sublist or range given and remove it from list
def rem_sublist(lst,rng):
    result=[]
    for i in range(len(lst)):
        if i<rng:
            result.append(lst[i])
    print(result)
input_lst=[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]]
rem_sublist(input_lst,4)
[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]
#98-scramble the letters of string in a given list
#input List-['Python', 'list', 'exercises', 'practice', 'solution']
#output List-['tnPhyo', 'tlis', 'ecrsseiex', 'ccpitear', 'noiltuos']
#q1-how to scramble them? randomly or any criterion?
#s1-sample() method
#s2-shuffle() method
from random import sample
test_lst=['Python', 'list', 'exercises', 'practice', 'solution']
print("original list=",test_lst)
res=[''.join(sample(ele,len(ele))) for ele in test_lst]
print("sample list is=",res)           
original list= ['Python', 'list', 'exercises', 'practice', 'solution']
sample list is= ['hytnoP', 'tlis', 'seecxisre', 'rtecpiac', 'slotunoi']
from random import shuffle
def perform_shuffle(ele):
    ele=list(ele)
    shuffle(ele)
    return ''.join(ele)
test_list = ['gfg', 'is', 'best', 'for', 'geeks']
res=[perform_shuffle(ele) for ele in test_list]
#res=[perform_shuffle(test_list)]
print(res)
['fgg', 'si', 'tesb', 'rof', 'kgese']
#99-find the maximum and minimum values in a given heterogeneous list.
#input-['Python', 3, 2, 4, 5, 'version']
#output-(5, 2)
#s1-see if its number and find max and min
def find_max_min(lst):
    maxm=0
    minm=10000
    for i in lst:
        if type(i) is int:
            if i>maxm:
                maxm=i
            if i<minm:
                minm=i                
    print("max num=",maxm," and min number=",minm)
ip_lst=['Python', 3, 2, 4, 5, 'version']
find_max_min(ip_lst)
max num= 5  and min number= 2
#100-extract common index elements from more than one given list.
#input-[1, 1, 3, 4, 5, 6, 7]; [0, 1, 2, 3, 4, 5, 7]; [0, 1, 2, 3, 4, 5, 7]
#output-[1, 7]
def extract_index_ele(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if (m == n == o):
            result.append(m)
    return result

nums1 = [1, 1, 3, 4, 5, 6, 7]
nums2 = [0, 1, 2, 3, 4, 5, 7]
nums3 = [0, 1, 2, 3, 4, 5, 7]

print("Original lists:")
print(nums1)
print(nums2)
print(nums3)
print("Common index elements of the said lists:") 
print(extract_index_ele(nums1, nums2, nums3))
Original lists:
[1, 1, 3, 4, 5, 6, 7]
[0, 1, 2, 3, 4, 5, 7]
[0, 1, 2, 3, 4, 5, 7]
Common index elements of the said lists:
[1, 7]
#101-sort a given matrix in ascending order according to the sum of its rows
#Input-[[1, 2, 3], [2, 4, 5], [1, 1, 1]]
#Output-[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
def asc_order(mtr):
    for i in mtr:        
        #res=sorted(mtr,key=sum)#---One way
        mtr.sort(key=sum)##another way
    return mtr
ip_lst=[[1, 2, 3], [2, 4, 5], [1, 1, 1]]
print(asc_order((ip_lst)))
[[1, 1, 1], [1, 2, 3], [2, 4, 5]]
#102-extract specified size of strings from a give list of string values
#input-['Python', 'list', 'exercises', 'practice', 'solution']; len=8
#output-['practice', 'solution']
lst=['Python', 'list', 'exercises', 'practice', 'solution']
n=8
for i in lst:
    if len(i)==n:
        print(i)
practice
solution
def extract_string(str_list1, l):
    result = [e for e in str_list1 if len(e) == l] 
    return result
#103-extract specified number of elements from a given list, which follows each other continuously.
#input-[1, 1, 3, 4, 4, 5, 6, 7]; Extract 2 number of elements
#output-[1, 4]
from itertools import groupby
def extract_ele(nums,n):
    result=[i for i, j in groupby(nums) if len(list(j))==n] #groupby process only consecutive values
    #for i,j in groupby(nums):
        #print(i,list(j))
    return result
nums1 = [1, 1,5, 3, 4, 4, 5, 6, 7,7]
n = 2
print(extract_ele(nums1,n))
[1, 4, 7]
#104- Python program to find the difference between consecutive numbers in a given list
#s1-use 2 for loops
#input-[1, 1, 3, 4, 4, 5, 6, 7]
#output-[0, 2, 1, 0, 1, 1, 1]
def diff_num(lst):
    res_lst=[]
    for i in range(len(lst)-1):
        res=0
        res=lst[i+1]-lst[i]
        res_lst.append(res)
    print(res_lst)
lst1=[1, 1, 3, 4, 4, 5, 6, 7]
diff_num(lst1)
[0, 2, 1, 0, 1, 1, 1]
#104-s2-use of zip
def diff_cons(nums):
    result=[b-a for a,b in zip(nums[:-1],nums[1:])]
   # for a,b in zip(nums[:-1],nums[1:]):
       # print(zip(nums[:-1],nums[1:]))
    print(nums[:-1],nums[1:])
    return result
lst=[1, 1, 3, 4, 4, 5, 6, 7]
diff_cons(lst)
[1, 1, 3, 4, 4, 5, 6] [1, 3, 4, 4, 5, 6, 7]
[0, 2, 1, 0, 1, 1, 1]
#105- compute average of two given lists
#input-[1, 1, 3, 4, 4, 5, 6, 7];[0, 1, 2, 3, 4, 4, 5, 7, 8]
#output-3.823529411764706
#s1-zip and add numbers to count avarage
#s2-2 for looops
import itertools
def avg_lst(l1,l2):
    res=[]
    avg=0
    l1.extend(l2)
    avg=sum(l1)/len(l1)
    return avg
lst1=[1, 1, 3, 4, 4, 5, 6, 7]
lst2=[0, 1, 2, 3, 4, 4, 5, 7, 8]
print(avg_lst(lst1,lst2))
3.823529411764706
def average_two_lists(nums1, nums2):
    result = sum(nums1 + nums2) / len(nums1 + nums2) 
    return result

nums1 = [1, 1, 3, 4, 4, 5, 6, 7]
nums2 = [0, 1, 2, 3, 4, 4, 5, 7, 8]
print(average_two_lists(nums1, nums2))
3.823529411764706
#106-count integer in a given mixed list
#input-[1, 'abcd', 3, 1.2, 4, 'xyz', 5, 'pqr', 7, -5, -12.22]
#output-6
#s1-use ascii values
#s2-isdigit method
def count_num(lst):
    count=0
    for i in lst:
        if isinstance(i,str):
            count+=1
    print(count)
l1=[1, 'abcd', 3, 1.2, 4, 'xyz', 5, 'pqr', 7, -5, -12.22]
count_num(l1)
3
#107-remove a specified column from a given nested list
#input-[[1, 2, 3], [2, 4, 5], [1, 1, 1]]; remove 1st column
#output-[[2, 3], [4, 5], [1, 1]]
#s1-pop method
#s2-del method
def rem_col(lst,n):
    for i in lst:
        i.pop(n)
    print(lst)
l1=[[1, 2, 3], [2, 4, 5], [1, 1, 1]]
n=0
rem_col(l1,n)
[[2, 3], [4, 5], [1, 1]]
def remove_column(nums, n):
   for i in nums: 
    del i[n] 
   return nums

list1 = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]
n = 0
print("Original Nested list:")
print(list1)
print("After removing 1st column:")
print(remove_column(list1, n))
Original Nested list:
[[1, 2, 3], [2, 4, 5], [1, 1, 1]]
After removing 1st column:
[[2, 3], [4, 5], [1, 1]]
#108-extract a specified column from a given nested list
#input-[[1, 2, 3], [2, 4, 5], [1, 1, 1]]; Extract 1st column:
#output-[1, 2, 1]
def col_ext(l1,n):
    res=[]
    for i in l1:
        res.append(i[n])
    return res
l=[[1, 2, 3], [2, 4, 5], [1, 1, 1]]
n=0
print(col_ext(l,n))
[1, 2, 1]
def remove_column(nums, n):
   result = [i.pop(n) for i in nums]
   return result 
#Date-7/7/22
#***PRNT-109-rotate a given list by specified number of items to the right or left direction
#input-[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; Rotate the said list in left direction by 4
#output-[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]

#s1-list slicing
#s2-using second list as output
def rightRotate(lists,num):
    output_lst=[]
    #add values from old list from n to new list
    for item in range(len(lists)-num,len(lists)):
        output_lst.append(lists[item])
    #will add values before n to end of the new list
    for item in range(0,len(lists)-num):
        output_lst.append(lists[item])
    return output_lst
rotate_num=4
lst_1=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(rightRotate(lst_1,rotate_num))
[7, 8, 9, 10, 1, 2, 3, 4, 5, 6]
#s2-slicing technique. One way of slicing list is by using len() method.
n=4
list_1=[1,2,3,4,5,6]
#list_1=(list_1[len(list_1)-n:len(list_1)]+list_1[0:len(list_1)-n])
print(list_1[0:len(list_1)-n])
print(list_1[len(list_1)-n:len(list_1)])
list_1=(list_1[len(list_1)-n:len(list_1)]+list_1[0:len(list_1)-n])
print(list_1)
[1, 2]
[3, 4, 5, 6]
[3, 4, 5, 6, 1, 2]
#s3- Another way is without using len() method
n=3
list_1=[1,2,3,4,5,6]
if n>len(list_1):
    n=int(n%len(list_1))
list_1=(list_1[-n:]+list_1[:-n])
print(list_1)
[4, 5, 6, 1, 2, 3]
#s4_list comprehension
n=3
list_1=[1,2,3,4,5,6]
list_1=[list_1[(i+3)%len(list_1)] for i,x in enumerate(list_1)]
print(list(enumerate(list_1)))
print(list_1)
[(0, 4), (1, 5), (2, 6), (3, 1), (4, 2), (5, 3)]
[4, 5, 6, 1, 2, 3]
#s5-collection.deque method
from collections import deque
n=3
list_1=[1,2,3,4,5,6]
list_1=deque(list_1)
list_1.rotate(-3)
list_1=list(list_1)
print(list_1)
[4, 5, 6, 1, 2, 3]
#LEFT VS RIGHT Rotation
nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print("original List:")
print(nums1)
print("\nRotate the said list in left direction by 4:")
result = nums1[3:] + nums1[:4]
print(result)
print("\nRotate the said list in left direction by 2:")
result = nums1[2:] + nums1[:2]
print(result)
print("\nRotate the said list in Right direction by 4:")
result = nums1[-3:] + nums1[:-4]
print(result)    
original List:
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

Rotate the said list in left direction by 4:
[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]

Rotate the said list in left direction by 2:
[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]

Rotate the said list in Right direction by 4:
[8, 9, 10, 1, 2, 3, 4, 5, 6]
#110-find the item with maximum occurrences in a given list
#input-[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2]
#output=2
def cnt_max_occr(l):
    max_count=0
    count=0
    max_num=0
    for i in l:
        if i in l:
            count+=1
        if count>max_count:
            max_count=count
            max_num=i
    print(max_count,max_num)
lst=[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2]
cnt_max_occr(lst)
20 2
#s2-count method
def max_occurrences(nums):
    max_val = 0
    result = nums[0] 
    for i in nums:
        occu = nums.count(i)
        if occu > max_val:
            max_val = occu
            result = i 
    return result

nums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]
print ("Original list:")
print(nums)
print("\nItem with maximum occurrences of the said list:")
print(max_occurrences(nums)) 
Original list:
[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2]

Item with maximum occurrences of the said list:
2
#111-access multiple elements of specified index from a given list.
#input-[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2]
#index list:[0, 3, 5, 7, 10]
#output-[2, 4, 9, 2, 1]

#s1-for loop+condition
l=[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2]
index_l=[0, 3, 5, 7, 10]
op_l=[]
for i in range(len(l)):
    if i in index_l:
        op_l.append(l[i])
print(op_l)
[2, 4, 9, 2, 1]
#112-check whether a specified list is sorted or not
#input-Original list:[1, 2, 4, 6, 8, 10, 12, 14, 16, 17]-Is the said list is sorted!
#output-True
#s1-use sort method and compare sorted list with original
#s2-comparing consecutove elements
#s1-use sort method and compare sorted list with original
l=[1, 2, 4, 6, 8, 10, 12, 14, 16, 17]
org_l=[]
for i in l:
    org_l.append(i)
print(org_l)

l.sort()
print(l)

if org_l==l:
    print("True")
else:
    print("False")
[1, 2, 4, 6, 8, 10, 12, 14, 16, 17]
[1, 2, 4, 6, 8, 10, 12, 14, 16, 17]
True
#s2-
def is_sort_list(nums):
    result = all(nums[i] <= nums[i+1] for i in range(len(nums)-1))
    return result

nums1 = [1,2,4,6,8,10,12,14,16,17]
print ("Original list:")
print(nums1)
print("\nIs the said list is sorted!")
print(is_sort_list(nums1)) 
Original list:
[1, 2, 4, 6, 8, 10, 12, 14, 16, 17]

Is the said list is sorted!
True
#113- remove duplicate dictionary from a given list
#input-[{'Green': '#008000'}, {'Black': '#000000'}, {'Blue': '#0000FF'}, {'Green': '#008000'}]
#output-[{'Black': '#000000'}, {'Blue': '#0000FF'}, {'Green': '#008000'}]
#s1-comparing key and value
#s2-comparing i value
l=[{'Green': '#008000'}, {'Black': '#000000'}, {'Blue': '#0000FF'}, {'Green': '#008000'}]
op_l=[]
for i in l:
    if i not in op_l:
        op_l.append(i)
print(op_l)
[{'Green': '#008000'}, {'Black': '#000000'}, {'Blue': '#0000FF'}]
def remove_dupe_dict(list_color):
    result=[dict(e)for e in {tuple(d.items())for d in list_color}]
    return result
list_color = [{'Green': '#008000'}, {'Black': '#000000'}, {'Blue': '#0000FF'}, {'Green': '#008000'}]
print ("Original list with duplicate dictionary:")
print(list_color)
print("\nAfter removing duplicate dictionary of the said list:")
print(remove_dupe_dict(list_color))
Original list with duplicate dictionary:
[{'Green': '#008000'}, {'Black': '#000000'}, {'Blue': '#0000FF'}, {'Green': '#008000'}]

After removing duplicate dictionary of the said list:
[{'Blue': '#0000FF'}, {'Black': '#000000'}, {'Green': '#008000'}]
#114-extract the nth element from a given list of tuples #input-[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] #Extract nth element ( n = 0 ) from the said list of tuples: #output-['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull'] l=[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] n=0 result=[] for i in l: print(i) result.append(i[0]) print(result)
#114-extract the nth element from a given list of tuples
#input-[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]
#Extract nth element ( n = 0 ) from the said list of tuples:
#output-['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']
def extract_nth_element(test_list, n):
    result = [x[n] for x in test_list]
    return result

students = [('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] 
print ("Original list:")
print(students)
n = 0
print("\nExtract nth element ( n =",n,") from the said list of tuples:")
print(extract_nth_element(students, n))

n = 2
print("\nExtract nth element ( n =",n,") from the said list of tuples:")
print(extract_nth_element(students, n))
['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']
#115-check if the elements of a given list are unique or not.
#s1-conver list to set and see if length is same 
#s2-count elments and see if count>1
#input-[1, 2, 4, 6, 8, 2, 1, 4, 10, 12, 14, 12, 16, 17]
#output-False
l=[1, 2, 4, 6, 8, 2, 1, 4, 10, 12, 14, 12, 16, 17]
n=len(l)
m=len(set(l))
if m==n:
    print("True")
else:
    print("False",m,n)
False 10 14
#116-sort a list of lists by a given index of the inner list
#input-[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]
#index=0
#output-[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]
#s1-sort or soted method
#s2-sort by lambda
from operator import itemgetter
def sort_by_idx(lst,idx):
    lst.sort(key=itemgetter(idx))
    print(lst)
l=[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]
n=0
sort_by_idx(l,n)
[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]
#s2-lambda method
l=[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]
n=1
l.sort(key=lambda x:x[n])
print(l)
[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]
#117- remove all elements from a given list present in another list
#input-list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ; list2: [2, 4, 6, 8]
#output-[1, 3, 5, 7, 9, 10]
lst1=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
lst2=[2, 4, 6, 8]
for i in lst1:
    if i in lst2:
        lst1.remove(i)
print(lst1,lst2)
[1, 3, 5, 7, 9, 10] [2, 4, 6, 8]
def index_on_inner_list(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result

list1 = [1,2,3,4,5,6,7,8,9,10]
list2 = [2,4,6,8]

print("Original lists:")
print("list1:", list1)
print("list2:", list2)

print("\nRemove all elements from 'list1' present in 'list2:")
print(index_on_inner_list(list1, list2))
Original lists:
list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
list2: [2, 4, 6, 8]

Remove all elements from 'list1' present in 'list2:
[1, 3, 5, 7, 9, 10]
#118- difference between elements (n+1th - nth) of a given list of numeric values
#s1-for loop
#s2-slicing of list
#Original list:[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
#output :[1, 1, 1, 1, 1, 1, 1, 1, 1]
ip_l1=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
ip_l2=ip_l1[1:]
result=[]
res=0
for i in range(len(ip_l1)-1):
    res=ip_l2[i]-ip_l1[i]
    result.append(res)
print(result)
[1, 1, 1, 1, 1, 1, 1, 1, 1]
def elements_difference(nums):
    result = [j-i for i, j in zip(nums[:-1], nums[1:])]
    return result

nums1 = [1,2,3,4,5,6,7,8,9,10]
nums2 = [2,4,6,8]

print("Original list:")
print(nums1)
print("\nDfference between elements (n+1th – nth) of the said list :")
print(elements_difference(nums1))
print("\nOriginal list:")
print(nums2)
print("\nDfference between elements (n+1th – nth) of the said list :")
print(elements_difference(nums2))
Original list:
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

Dfference between elements (n+1th – nth) of the said list :
[1, 1, 1, 1, 1, 1, 1, 1, 1]

Original list:
[2, 4, 6, 8]

Dfference between elements (n+1th – nth) of the said list :
[2, 2, 2]
#119- check if a substring presents in a given list of string values
#input-['red', 'black', 'white', 'green', 'orange']; Substring to search:ack
#output:True
#s1-as strings are arrays we could trace substring in list
l=['red', 'black', 'white', 'green', 'orange']
sub_str='ack'
for i in l:
    if sub_str in i:
        print("True")
    else:
        print("False")
False
True
False
False
False
#any method
def find_sub_str(str1,sub_str):
    if any(sub_str in s for s in str1):
        return True
    return False
colors = ["red", "black", "white", "green", "orange"]
print("Original list:")
print(colors)
sub_str = "ack"
print("Substring to search:")
print(sub_str)
print("Check if a substring presents in the said list of string values:")
print(find_sub_str(colors, sub_str))
Original list:
['red', 'black', 'white', 'green', 'orange']
Substring to search:
ack
Check if a substring presents in the said list of string values:
True
#120-create a list taking alternate elements from a given list
#input:['red', 'black', 'white', 'green', 'orange']
#output:['red', 'white', 'orange']
#s1-for loop with condition
l=['red', 'black', 'white', 'green', 'orange']
op_l=[]
for i in range(len(l)):
    if i%2==0:
        op_l.append(l[i])
print(op_l)
['red', 'white', 'orange']
list_data=['red', 'black', 'white', 'green', 'orange']
result=[]
for item in list_data[::2]:
        result.append(item)
print(result)
['red', 'white', 'orange']
#Date-7/8/22
#121-find the nested lists elements which are present in another list
#Input:[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
#Nested Lists-[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]
#output:[[12], [7, 11], [1, 5, 8]]
ip_l=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
nest_l=[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]
op_l=[]
for i in nest_l:
    for j in i:
        if j in ip_l:
            [op_l.append(j)]
print(op_l)    
[12, 7, 11, 1, 5, 8]
def intersect_nested_lst(l1,l2):
    result=[[n for n in lst if n in l1]for lst in l2]
    return result
nums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
nums2 = [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]
print("\nOriginal lists:")
print(nums1)
print(nums2)
print("\nIntersection of said nested lists:")
print(intersect_nested_lst(nums1, nums2))
Original lists:
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]

Intersection of said nested lists:
[[12], [7, 11], [1, 5, 8]]
#122-find common element(s) in a given nested lists
#input-[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]
#output-[18, 12]
#s1-using reduce()+lambda+set()
from functools import reduce
l=[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]
#for i in l:
    #print(set(i))
result=list(reduce(lambda i,j:i&j,(set(x)for x in l)))
#result=list(reduce(lambda i,j:i and j,(x for x in l)))

print(result)
[18, 12]
#s2-map+intersection
l=[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]
res=list(set.intersection(*map(set,l)))
print(res)
[18, 12]
#123-reverse strings in a given list of string value
#input-['Red', 'Green', 'Blue', 'White', 'Black']
#output-['deR', 'neerG', 'eulB', 'etihW', 'kcalB']
l=['Red', 'Green', 'Blue', 'White', 'Black']
res=[]
result=''
for i in l:
    result=''
    for j in range(len(i)-1,-1,-1):
        result=result+i[j]
    res.append(result)
print(res)
['deR', 'neerG', 'eulB', 'etihW', 'kcalB']
def reverse_str(str_lst):
    result=[x[::-1]for x in str_lst]
    return result
colors_list = ["Red", "Green", "Blue", "White", "Black"]
print("Original lists:")
print(colors_list)
print("\nReverse strings of the said given list:")
print(reverse_str(colors_list))
Original lists:
['Red', 'Green', 'Blue', 'White', 'Black']

Reverse strings of the said given list:
['deR', 'neerG', 'eulB', 'etihW', 'kcalB']
#124-maximum and minimum product from the pairs of tuple within a given list
#input-[(2, 7), (2, 6), (1, 8), (4, 9)]
#output-(36, 8)
#s1-using operator method
tup=[(2, 7), (2, 6), (1, 8), (4, 9)]
maxm=0
minm=100000
tuple_res=()
import operator
for i in tup:
    res=i[0]*i[1]
    if res>maxm:
        maxm=res
    if res<minm:
        minm=res
tuple_res=tuple_res+(maxm,minm,)
#tuple_res=tuple_res+(minm,)
print(tuple_res)
(36, 8)
def tuple_max_val(nums):
    result_max = max([abs(x * y) for x, y in nums] )
    result_min = min([abs(x * y) for x, y in nums] )
    return result_max,result_min
nums = [(2, 7), (2, 6), (1, 8), (4, 9)]   
print("The original list, tuple : ") 
print(nums)
print("\nMaximum and minimum product from the pairs of the said tuple of list:")
print(tuple_max_val(nums)) 
The original list, tuple : 
[(2, 7), (2, 6), (1, 8), (4, 9)]

Maximum and minimum product from the pairs of the said tuple of list:
(36, 8)
#125-calculate the product of the unique numbers of a given list
#input-[10, 20, 30, 40, 20, 50, 60, 40]
#output-720000000
#s1-List Traversal
lst=[10, 20, 30, 40, 20, 50, 60, 40]
result=1
for i in lst:
    result*=i
print(result)
576000000000
#s2-math.prod method
import math
lst=[10, 20, 30, 40, 20, 50, 60, 40]
result=math.prod(lst)
print(result)
576000000000
S3-DKS
#S3-reduce+lambda method
from functools import reduce
lst=[10, 20, 30, 40, 20, 50, 60, 40]
result=reduce((lambda x,y:x*y),lst)
print(result)
576000000000
#126-interleave multiple lists of the same length
list1= [1, 2, 3, 4, 5, 6, 7]
list2= [10, 20, 30, 40, 50, 60, 70]
list3= [100, 200, 300, 400, 500, 600, 700]
lst=[]
for i in range(len(list1)):
    lst.append(list1[i])
    lst.append(list2[i])
    lst.append(list3[i])
print(lst)
[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]
#zip method
def interleav_lst(lst1,lst2,lst3):
    result=[el for pair in zip(lst1,lst2,lst3)for el in pair]
    return result
list1 = [1,2,3,4,5,6,7]
list2 = [10,20,30,40,50,60,70]
list3 = [100,200,300,400,500,600,700]
print(interleav_lst(list1,list2,list3))
[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]
#127-remove words from a given list of strings containing a character or string.
#q1-is space considered as character?

#input-list1=['Red color', 'Orange#', 'Green', 'Orange @', 'White']
#Character list:['#', 'color', '@']
#output-['Red', '', 'Green', 'Orange', 'White']

#s1-compare two lists one original and other with characters. remove characters when the match found
lst=['Red color', 'Orange#', 'Green', 'Orange @', 'White']
char_list=['#', 'color', '@',';']
op_lst=[]
res=[ele for ele in lst if all(ch not in ele for ch in char_list)]
print(res)
['Green', 'White']
#s2-
def remove_words(in_lst,char_lst):
    new_lst=[]
    for line in in_lst:
        new_words=' '.join([word for word in line.split() if not any([phrase in word for phrase in char_list])])
        new_lst.append(new_words)
    print(new_lst)
str_list = ['Red colors', 'Orange#', 'Green', 'Orange @', "White"]
char_list = ['#', 'color', '@']
print(remove_words(str_list, char_list))
['Red', '', 'Green', 'Orange', 'White']
None
#128-calculate the sum of the numbers in a list between the indices of a specified range.
lst=[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12]
Range= [8 , 10]
sums=0
for i in range(Range[0],Range[1]+1):
    sums+=lst[i]
print(sums)
29
#129-reverse each list in a given list of lists
#input-[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
#output-[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]
lst=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
result=[]
for i in lst:
    result.append(i[::-1])
print(result)
[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]
#Date-7/9/22
#130-count the same pair in three given lists
#s1-zip method
#s2-for loop
lst1=[1, 2, 3, 4, 5, 6, 7, 8]
lst2=[2, 2, 3, 1, 2, 6, 7, 9]
lst3=[2, 1, 3, 1, 2, 6, 7, 9]
result=sum(m==n==o for m,n,o in zip(lst1,lst2,lst3))
for i,j,k in (zip(lst1,lst2,lst3)):
    if i==j==k:
        print(i,j,k)
print(result)
3 3 3
6 6 6
7 7 7
3
#131-Python program to count the frequency of consecutive duplicate elements in a given list of numbers
#input-[1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5]
#output-([1, 2, 4, 5], [1, 3, 3, 4])
#s1-for loop 
def freq_dupe_nums(lst):
    nums=[]
    freq=[]
    #count=0
    for i in lst:
        if i not in nums:
            nums.append(i)
            freq.append(lst.count(i))
    return nums,freq
lst1=[1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5]
print(freq_dupe_nums(lst1))
([1, 2, 4, 5], [1, 3, 3, 4])
def count_dups(nums):
    element = []
    freque = []
    if not nums:
        return element
    running_count = 1
    for i in range(len(nums)-1):
        if nums[i] == nums[i+1]:
            running_count += 1
        else:
            freque.append(running_count)
            element.append(nums[i])
            running_count = 1
    freque.append(running_count)
    element.append(nums[i+1])
    return element,freque

nums = [1,2,2,2,4,4,4,5,5,5,5]
print("Original lists:")
print(nums)

print("\nConsecutive duplicate elements and their frequency:")
print(count_dups(nums))
Original lists:
[1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5]

Consecutive duplicate elements and their frequency:
([1, 2, 4, 5], [1, 3, 3, 4])
#132-find all index positions of the maximum and minimum values in a given list of numbers
#input-[12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54]
#output-max-7; min -3
l=[12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54]
maxm =0
max_idx=0
minm=10000
min_idx=100000
for i in range(len(l)):
    if maxm<l[i]:
        #print(maxm)
        max_idx=i
        maxm=l[i]
        
    if minm>l[i]:
        min_idx=i
        minm=l[i]
print(max_idx,min_idx)
7 3
#using enumerate
def position_max_min(nums):
    max_val=max(nums)
    min_val=min(nums)
    max_result=[i for i,j in enumerate(nums) if j==max_val]
    min_result=[i for i,j in enumerate(nums) if j==min_val]
    return max_result,min_result
nums = [12,33,23,10,67,89,45,667,23,12,11,10,54]
print("Original list:")
print(nums)
result = position_max_min(nums)
print("\nIndex positions of the maximum value of the said list:")
print(result[0])
print("\nIndex positions of the minimum value of the said list:")
print(result[1])
Original list:
[12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54]

Index positions of the maximum value of the said list:
[7]

Index positions of the minimum value of the said list:
[3, 11]
#133-check common elements between two given list are in same order or not
#s1-map() + enumerate() + dictionary comprehension + sorted()

lst1=['red', 'green', 'black', 'orange']
lst2=['red', 'pink', 'green', 'white', 'black']
lst3=['white', 'orange', 'pink', 'black']
def relative_order(lst):
    temp={val:key for key,val in enumerate(sorted(lst))}
    res=list(map(temp.get,lst1))
    return res
print(relative_order(lst1))
print(relative_order(lst2))
print(relative_order(lst3))
[3, 1, 0, 2]
[3, 1, 0, None]
[None, None, 0, 1]
#using sorted() + index() + list comprehension
test_list=[6,3,1,2,5,4]
temp=sorted(test_list)
res=[temp.index(i)for i in test_list]
print(res)
[5, 2, 0, 1, 4, 3]
def order_ele(l1,l2):
    common_ele=set(l1)& set(l2)
    l1=[e for e in l1 if e in common_ele]
    l2=[e for e in l2 if e in common_ele]
    return l1==l2
#134-find the difference between two list including duplicate elements
l1=[1, 1, 2, 3, 3, 4, 4, 5, 6, 7]
l2=[1, 1, 2, 4, 5, 6]
l=[]
l=l1
for el in l2:
    l.remove(el)
    #l.pop(el)
print(l)  
    
[3, 3, 4, 7]
#135-iterate over all pairs of consecutive items in a given list
#input-[1, 1, 2, 3, 3, 4, 4, 5]
#output-[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]
#s1-
l=[1, 1, 2, 3, 3, 4, 4, 5]
tup=()
res=[]
for i in range(len(l)-1):
    tup=(l[i],l[i+1])
    res.append(tup)
print(res)
[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]
#136-remove duplicate words from a given list of strings
l=['Python', 'Exercises', 'Practice', 'Solution', 'Exercises']
res=[]
for i in l:
    if i not in res:
        res.append(i)
print(res)
['Python', 'Exercises', 'Practice', 'Solution']
#137- find a first even and odd number in a given list of numbers.
l=[1, 3, 5, 7, 4, 1, 6, 8]
for i in range(len(l)-1):
    if l[i]%2==0 and l[i+1]%2==1:
        print(l[i],l[i+1])
4 1
def first_even_odd(nums):
    first_even=next((el for el in nums if el%2==0),-1)
    first_odd=next((el for el in nums if el%2==1),-1)
    return first_even,first_odd
nums= [1,3,5,7,4,1,6,8]
print("Original list:")
print(nums)
print("\nFirst even and odd number of the said list of numbers:")
print(first_even_odd(nums))
Original list:
[1, 3, 5, 7, 4, 1, 6, 8]

First even and odd number of the said list of numbers:
(4, 1)
#138-sort a given mixed list of integers and strings. Numbers must be sorted before strings
#input-[19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1]
#output-[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']
#s1-using sort()+comparator
def mixed_lst_sort(num):
    try:
            ele=int(num)
            #print((0,ele))
            #print(ele,"Try")
            #return (1,ele,'')
            return (1,ele)
    except ValueError:
            #print(ValueError)
            #print((1,num))
            #return (0,num,'')  
            return (0,num)
l=[19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1]

l.sort(key=mixed_lst_sort)
print(l)
['blue', 'green', 'green', 'red', 'white', 1, 10, 12, 19]
#s2-using sorted()+key+lambda+isdigit()
test_list=[19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1]
#res=sorted(l,key=lambda ele:(0,int(ele)) if ele.isdigit() else (l,ele))--this is if 1(nummber) is character('1')
res = sorted(test_list, key = lambda ele: (0, ele)
                        if type(ele)==int else (1, ele))
print(res)
[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']
#139-sort a given list of strings(numbers) numerically
#input-['4', '12', '45', '7', '0', '100', '200', '-12', '-500']
#output-[-500, -12, 0, 4, 7, 12, 45, 100, 200]
#s1-ueing sort/sorted
l=['4', '12', '45', '7', '0', '100', '200', '-12', '-500']
#l.sort(key=int) or 
res=sorted(l,key=int)
print(res)
['-500', '-12', '0', '4', '7', '12', '45', '100', '200']
#using sorted/sort with lambda
l=['4', '12', '45', '7', '0', '100', '200', '-12', '-500']
#res=sorted(l,key=lambda x:print((len(x),x)))
res=sorted(l,key=lambda x:(len(x),x))
#res=sorted(l,key=lambda x:(x))
print(res)
['0', '4', '7', '12', '45', '-12', '100', '200', '-500']
#140- remove the specific item from a given list of lists
l=[['Red', 'Maroon', 'Yellow', 'Olive'], ['#FF0000', '#800000', '#FFFF00', '#808000'], ['rgb(255,0,0)', 'rgb(128,0,0)', 'rgb(255,255,0)', 'rgb(128,128,0)']]
n=1
for i in l :
    del(i[0])
print(l)
[['Maroon', 'Yellow', 'Olive'], ['#800000', '#FFFF00', '#808000'], ['rgb(128,0,0)', 'rgb(255,255,0)', 'rgb(128,128,0)']]
#141-remove empty lists from a given list of lists
l=[[], [], [], 'Red', 'Green', [1, 2], 'Blue', [], []]
l2=[x for x in l if x]
print(l2)
['Red', 'Green', [1, 2], 'Blue']
#Date-7/12/22
#142-sum a specific column of a list in a given list of lists
#input-[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]
#output-Sum: 1st column of the said list of lists:12

l=[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]
c=0
#sums=0
#for i in l:
    #sums=sums+i[0]
def sum_col(l,c):
    result=sum(row[c] for row in l)
    print("Sum: 1st column of the said list of lists:",result)
sum_col(l,c)
#print("Sum: 1st column of the said list of lists:",sums)
#print("Sum: 1st column of the said list of lists:",result)
Sum: 1st column of the said list of lists: 12
#143-program to get the frequency of the elements in a given list of lists
#input-[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]
#output-{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
#s1-groupby
#s2-dictionary
#s3-for loop
import itertools
from collections import Counter
def freq_lst_ele(l):
    result=[]
    #key_func= lambda x:x.Counter(l)
    d=Counter(l)
    for key, val in itertools.groupby(l,key_func):
        print(key,":",val)
lst= [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]
print(freq_lst_ele(l))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_2552/3669795014.py in <module>
     14         print(key,":",val)
     15 lst= [[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]
---> 16 print(freq_lst_ele(l))

~\AppData\Local\Temp/ipykernel_2552/3669795014.py in freq_lst_ele(l)
     10     result=[]
     11     #key_func= lambda x:x.Counter(l)
---> 12     d=Counter(l)
     13     for key, val in itertools.groupby(l,key_func):
     14         print(key,":",val)

~\anaconda3\lib\collections\__init__.py in __init__(self, iterable, **kwds)
    591         '''
    592         super().__init__()
--> 593         self.update(iterable, **kwds)
    594 
    595     def __missing__(self, key):

~\anaconda3\lib\collections\__init__.py in update(self, iterable, **kwds)
    677                     super().update(iterable)
    678             else:
--> 679                 _count_elements(self, iterable)
    680         if kwds:
    681             self.update(kwds)

TypeError: unhashable type: 'list'
from collections import Counter
l=[1, 1, 2, 2, 3, 3, 4, 4, 5, 5]
x=2
d=Counter(l)
print(Counter(l))    
Counter({1: 2, 2: 2, 3: 2, 4: 2, 5: 2})
from itertools import groupby
l=[1, 1,1,1, 2, 2, 2,3, 3, 4, 4, 5, 5]
[(key,len(list(val))) for key,val in groupby(l)]
[(1, 4), (2, 3), (3, 2), (4, 2), (5, 2)]
l=[1, 1,1,1, 2, 2, 2,3, 3, 4, 4, 5, 5]
d={x:l.count(x) for x in l}
print(d)
{1: 4, 2: 3, 3: 2, 4: 2, 5: 2}
#Date-7/13/22
#dictionary method
def count_ele_lst(nums):
    nums=[items for sublist in nums for items in sublist]-flatten the list
    #print("l",nums)
    dic_data={}#define dictionary
    for num in nums:
        if num in dic_data.keys():
            dic_data[num]+=1
        else:
            key=num
            value=1
            dic_data[key]=value
    return dic_data
nums = [
        [1,2,3,2],
        [4,5,6,2],
        [7,8,9,5],
       ]    
print("Original list of lists:")
print(nums)
print("\nFrequency of the elements in the said list of lists:")
print(count_ele_lst(nums))
Original list of lists:
[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]

Frequency of the elements in the said list of lists:
l [1, 2, 3, 2, 4, 5, 6, 2, 7, 8, 9, 5]
{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}
#144-extract every first or specified element from a given two-dimensional list
#input-[[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]
#first element-[1, 4, 7]
l=[[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]
n=1
lst=[]
lst=[i[n-1] for i in l]
print(lst)
[1, 4, 7]
#145-generate a number in a specified range except some specific numbers
#input-Generate a number in a specified range (1, 10) except [2, 9, 10]
#output-7
#s1-random method with exception
import random
r1=2
while(r1==2 or r1==9 or r1==10):
    r1=random.randint(1,11)
print(r1)    
8
#for loop
from random import choice
def generate_random(strt_rng,end_rng,lst):
    result=choice([i for i in range(strt_rng,end_rng) if i not in lst])
    return result
start_range = 1
end_range = 10
nums = [2, 9, 10]
print("Generate a number in a specified range (1, 10) except [2, 9, 10]")
print(generate_random(start_range,end_range,nums))
Generate a number in a specified range (1, 10) except [2, 9, 10]
4
#146-compute the sum of digits of each number of a given list.
#input-[10, 20, 4, 5, 'b', 70, 'a']
#output-Sum of digits of each number of the said list of integers:19
lst=[10, 20, -4, 5, -70]
sums=0
def sum_of_digits(nums):
    return sum(int(el)for n in nums for el in str(n)if el.isdigit())
nums = [10,2,56]
print("Original tuple: ") 
print(nums)
print("Sum of digits of each number of the said list of integers:")
print(sum_of_digits(nums))
Original tuple: 
[10, 2, 56]
Sum of digits of each number of the said list of integers:
14
#147-program to interleave two given list into another list randomly
#Original lists:[1, 2, 7, 8, 3, 7]  ;[4, 3, 8, 9, 4, 3, 8, 9]
#output-[4, 1, 2, 3, 8, 9, 4, 3, 7, 8, 9, 8, 3, 7]
import random
l1=[1, 2, 7, 8, 3, 7] 
l2=[4, 3, 8, 9, 4, 3, 8, 9]
def random_interleave(nums1,nums2):
    result =  [x.pop(0) for x in random.sample([nums1]*len(nums1) + [nums2]*len(nums2), len(nums1)+len(nums2))]
    print(random.sample([nums1]*len(nums1),len(nums1)),[nums2]*len(nums2))
    return result
print(random_interleave(l1,l2))
[] []
[4, 1, 3, 2, 7, 8, 8, 9, 3, 4, 3, 8, 7, 9]
#148-remove specific words from a given list.
#input-['red', 'green', 'blue', 'white', 'black', 'orange']; Remove words:['white', 'orange']
#output-['red', 'green', 'blue', 'black']
#create new list
#remove method
l=['red', 'green', 'blue', 'white', 'black', 'orange']
rem_l=['white', 'orange']
for i in l:
    if i in rem_l:
        l.remove(i)
print(l,rem_l)
['red', 'green', 'blue', 'black'] ['white', 'orange']
#149-all possible combinations of the elements of a given list.
#input-['orange', 'red', 'green', 'blue']
#output-[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], 
#['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], 
#['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]

#s1-recursion method
def combinations_lst(colors):
    if len(colors)==0:
        return [[]]
    result=[]
    for el in combinations_lst(colors[1:]):
        result+=[el,el+[colors[0]]]
    return result
colors = ['orange', 'red', 'green', 'blue']
print("Original list:")
print(colors)
print("\nAll possible combinations of the said list’s elements:")
print(combinations_lst(colors))  
Original list:
['orange', 'red', 'green', 'blue']

All possible combinations of the said list’s elements:
[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]
#150-reverse a given list of lists.
l=[['orange', 'red'], ['green', 'blue'], ['white', 'black', 'pink'],['Hirva']]
l_rev=l[::-1]
print(l_rev)
[['Hirva'], ['white', 'black', 'pink'], ['green', 'blue'], ['orange', 'red']]
#151- maximum and minimum values in a given list within specified index range
l=[4, 3, 0, 5, 3, 0, 2, 30, 4, 2, 4, 3, 5]
idx=(3,8)
maxm=max(l[3:8])
print(maxm)
30
def rev_lst_of_lst(nums,lr,hr):
    temp=[]
    for idx, el in enumerate(nums):
        if idx>=lr and idx<hr:
            temp.append(el)
    result_max=max(temp)
    result_min=min(temp)
    return result_max, result_min
nums = [4,3,0,5,3,0,2,3,4,2,4,3,5]
print("Original list:")
print(nums)
print("\nIndex range:")
lr = 3
hr = 8
print(lr,"to",hr)
print("\nMaximum and minimum values of the said given list within index range:")
print(rev_lst_of_lst(nums,lr,hr))
Original list:
[4, 3, 0, 5, 3, 0, 2, 3, 4, 2, 4, 3, 5]

Index range:
3 to 8

Maximum and minimum values of the said given list within index range:
(5, 0)
#Date-7/14/22
#149-
import itertools
stuff=[1,2,3]
for l in range(0,len(stuff)+1):
    for subset in itertools.combinations(stuff,l):
        print(subset)
[()]
[(1,)]
[(2,)]
[(3,)]
[(1, 2)]
[(1, 3)]
[(2, 3)]
[(1, 2, 3)]
from itertools import chain,combinations
stuff=[1,2,3]
def all_subsets(ss):
    return chain(*map(lambda x:combinations(ss,x),range(0,len(ss)+1)))
for subsets in all_subsets(stuff):
    print(subsets)
()
(1,)
(2,)
(3,)
(1, 2)
(1, 3)
(2, 3)
(1, 2, 3)
#152-combine two given sorted lists using heapq module
l1=[1, 3, 5, 7, 9, 11]
l2=[0, 2, 4, 6, 8, 10]
from heapq import merge
def mergeArray(lst1,lst2):
    return list(merge(lst1,lst2))
print(mergeArray(l1,l2))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
#153-check if a given element occurs at least n times in a list
l1=[0, 1, 3, 5, 0, 3, 4, 5, 0, 8, 0, 3, 6, 0, 3, 1, 1, 0]
#Check if 3 occurs at least 4 times in a list
el=3
occr=10
def occrnce_ele(lst,elm,freq):
    for i in lst:
        if lst.count(elm)==freq:
            return True
    return False
print(occrnce_ele(l1,el,occr))
False
def check_el_in_lst(lst,x,n):
    t=0
    try:
        for _ in range(n):
            t=lst.index(x,t)+1
            #print(t,lst.index(x,t))
        return True
    except ValueError:
        return False
nums = [0,1,3,5,0,3,4,5,0,8,0,3,6,0,3,1,1,0]
print("Original list:")
print(nums)
x = 3
n = 4
print("\nCheck if",x,"occurs at least",n,"times in a list:")
print(check_el_in_lst(nums,x,n))
Original list:
[0, 1, 3, 5, 0, 3, 4, 5, 0, 8, 0, 3, 6, 0, 3, 1, 1, 0]

Check if 3 occurs at least 4 times in a list:
True
#154-join two given list of lists of same length, element wise
#input-[[10, 20], [30, 40], [50, 60], [30, 20, 80]];;[[61], [12, 14, 15], [12, 13, 19, 20], [12]]
#output-[[10, 20, 61], [30, 40, 12, 14, 15], [50, 60, 12, 13, 19, 20], [30, 20, 80, 12]]]
#append method
l1=[[10, 20], [30, 40], [50, 60], [30, 20, 80]]
l2=[[61], [12, 14, 15], [12, 13, 19, 20], [12]]

for i in range(len(l1)):
    l1[i].append(l2[i])
print(l1)
               
[[10, 20, [61]], [30, 40, [12, 14, 15]], [50, 60, [12, 13, 19, 20]], [30, 20, 80, [12]]]
#zip method
def elementWise_join(l1,l2):
    result=[x+y for x,y in zip(l1,l2)]
    #result=list(zip(l1,l2))
    return result
nums1 = [[10,20], [30,40], [50,60], [30,20,80]]
nums2 = [[61], [12,14,15], [12,13,19,20], [12]]
print("Original lists:")
print(nums1)
print(nums2)
print("\nJoin the said two lists element wise:")
print(elementWise_join(nums1, nums2))
Original lists:
[[10, 20], [30, 40], [50, 60], [30, 20, 80]]
[[61], [12, 14, 15], [12, 13, 19, 20], [12]]

Join the said two lists element wise:
[[10, 20, 61], [30, 40, 12, 14, 15], [50, 60, 12, 13, 19, 20], [30, 20, 80, 12]]
l1=[[10,20], [30,40], [50,60], [30,20,80]]
l2=[[61], [12,14,15], [12,13,19,20], [12]]
for i,j in (zip(l1,l2)):
    print(i+j)
[10, 20, 61]
[30, 40, 12, 14, 15]
[50, 60, 12, 13, 19, 20]
[30, 20, 80, 12]
#155- add two given lists of different lengths, start from left
l1=[2, 4, 7, 0, 5, 8]
l2=[3, 3, -1, 7]

#s1-itertools and zip
from itertools import cycle
output=[x+y for x,y in zip(cycle(l2),l1)]  #it add cyclic manner observe last two elements in output
print(output)
[5, 7, 6, 7, 8, 11]
from itertools import starmap,cycle
from operator import add
list1 = [150, 177, 454, 126]
list2 = [9, 44, 2, 168, 66, 80, 123, 6, 180, 184]
output=list(starmap(add,zip(cycle(list1),list2)))
print(output)
[159, 221, 456, 294, 216, 257, 577, 132, 330, 361]
#list comprehension
list1 = [150, 177, 454, 126]
list2 = [9, 44, 2, 168, 66, 80, 123, 6, 180, 184]
output=[list1[i%len(list1)]+list2[i] for i in range(len(list2))]
print(output)
[159, 221, 456, 294, 216, 257, 577, 132, 330, 361]
def elementwise_left(l1,l2):
    f_len=len(l1)-(len(l2)-1)#l1 is always bigger list
    #print(f_len)
    for i in range(0,len(l2),1):
        #print(f_len-i)
        if f_len-i>=len(l1): #when smaller list ends keep numbers in bigger list
            break
        else:
            l1[i]=l1[i]+l2[i]
    return l1
nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [3, 3, -1, 7]
print("Original lists:")
print(nums1)
print(nums2)
print("\nAdd said two lists from left:")
print(elementwise_left(nums1,nums2))
Original lists:
[2, 4, 7, 0, 5, 8]
[3, 3, -1, 7]

Add said two lists from left:
[5, 7, 6, 7, 5, 8]
#156-add two given lists of different lengths, start from right
#input=[2, 4, 7, 0, 5, 8];;; [3, 3, -1, 7]
#output=[2, 4, 10, 3, 4, 15]
def add_lst_right(l1,l2):
    f_len=len(l1)-(len(l2)-1)
    #f_len=len(l1)-(len(l2))
    for i in range(len(l1),0,-1):
        if i-f_len<0:
            break
        else:
            l1[i-1]=l1[i-1]+l2[i-f_len]
    return l1
nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [3, 3, -1,7]
print("Original lists:")
print(nums1)
print(nums2)
print("\nAdd said two lists from left:")
print(add_lst_right(nums1, nums2))
Original lists:
[2, 4, 7, 0, 5, 8]
[3, 3, -1, 7]

Add said two lists from left:
[2, 4, 10, 3, 4, 15]
#157- interleave multiple given lists of different lengths.
#input-[2, 4, 7, 0, 5, 8] ;[2, 5, 8] ;[0, 1] ;[3, 3, -1, 7]
#output-[2, 2, 0, 3, 4, 5, 1, 3, 7, 8, -1, 0, 7, 5, 8]
l1=[2, 4, 7, 0, 5, 8]
l2=[2, 5, 8]
l3=[0, 1]
l4=[3, 3, -1, 7]
for i in l1:
    l=l1+l2+l3+l4
print(l)
[2, 4, 7, 0, 5, 8, 2, 5, 8, 0, 1, 3, 3, -1, 7]
#append method
def interleave_diff_len_lists(list1, list2, list3, list4):
    result = []
    l1 = len(list1)
    l2 = len(list2)
    l3 = len(list3)
    l4 = len(list4)
    
    for i in range(max(l1, l2, l3, l4)):
        if i < l1:
            result.append(list1[i])
        if i < l2:
            result.append(list2[i])
        if i < l3:
            result.append(list3[i])
        if i < l4:
            result.append(list4[i])
    return result

nums1 = [2, 4, 7, 0, 5, 8]
nums2 = [2, 5, 8]
nums3 = [0, 1]
nums4 = [3, 3, -1, 7]

print("Original lists:")
print(nums1)
print(nums2)
print(nums3)
print(nums4)

print("\nInterleave said lists of different lengths:")
print(interleave_diff_len_lists(nums1, nums2, nums3, nums4))
Original lists:
[2, 4, 7, 0, 5, 8]
[2, 5, 8]
[0, 1]
[3, 3, -1, 7]

Interleave said lists of different lengths:
[2, 2, 0, 3, 4, 5, 1, 3, 7, 8, -1, 0, 7, 5, 8]
#158-find the maximum and minimum values in a given list of tuples
from operator import itemgetter
l=[('V', 60), ('VI', 70), ('VII', 75), ('VIII', 72), ('IX', 78), ('X', 70)]
return_max=max(l,key=itemgetter(1))[1]
return_min=min(l,key=itemgetter(1))[1]
print(return_max,return_min)
78 60
#159-append the same value /a list multiple times to a list/list-of-lists
#input-Add a value(7), 5 times, to a list:
#output--['7', '7', '7', '7', '7']
val=[1,2,5]
n=4
l=[]
for i in range(n):
    l.append(val)
print(l)
[[1, 2, 5], [1, 2, 5], [1, 2, 5], [1, 2, 5]]
nums=[]
nums+=5*['7']
print(nums)
['7', '7', '7', '7', '7']
#160-remove first specified number of elements from a given list satisfying a condition
#input-Remove the first 4 number of even numbers from the following list:
#[3,10,4,7,5,7,8,3,3,4,5,9,3,4,9,8,5]
#output-[3, 7, 5, 7, 3, 3, 5, 9, 3, 4, 9, 8, 5]
l=[3,10,4,7,5,7,8,3,3,4,5,9,3,4,9,8,5]
count=0

for i in range(len(l)-1):
    if l[i]%2==0 and count<4:
       # print(i,count,l[i])
        count+=1
        l.remove(l[i])
    elif count>=4:
        break
print(l)
[3, 7, 5, 7, 3, 3, 5, 9, 3, 4, 9, 8, 5]
def con_match(x):
    return ((x%2)==0)
def rem_items_con(data,n):
    ctr=1
    result=[]
    for x in data:
        if ctr>n or not con_match(x):
            result.append(x)
        else:
            ctr+=1
    return result
nums = [3,10,4,7,5,7,8,3,3,4,5,9,3,4,9,8,5]
N = 4
print("Original list:")
print(nums)
print("\nRemove first 4 even numbers from the said list:")
print(rem_items_con(nums, N))
Original list:
[3, 10, 4, 7, 5, 7, 8, 3, 3, 4, 5, 9, 3, 4, 9, 8, 5]

Remove first 4 even numbers from the said list:
[3, 7, 5, 7, 3, 3, 5, 9, 3, 4, 9, 8, 5]
#161-check if a given list is strictly increasing or not
#s1-compare original list with sorted list 
def almost_increasing_sequence(sequence):
    if len(sequence) < 3:
        return True

    a, b, *sequence = sequence
    skipped = 0
    for c in sequence:
        if a < b < c:  # XXX
            a, b = b, c
            continue
        elif b < c:    # !XX
            a, b = b, c
        elif a < c:    # X!X
            a, b = a, c
        skipped += 1
        if skipped == 2:
            return False
    return a < b

print(almost_increasing_sequence([]))
print(almost_increasing_sequence([10, 11, 12, 2, 3, 4, 5]))
print(almost_increasing_sequence([1, 2, 3, 0, 4, 5, 6]))
True
False
True
#162-last occurrence of a specified item in a given list
l=['s', 'd', 'f', 's', 'd', 'f', 's', 'f', 'k', 'o', 'p', 'i', 'w', 'e', 'k', 'c']
#Last occurrence of f in the said list:
ch='c'
for i in range(len(l)-1,0,-1):
    if l[i]==ch:
        print(i)
        break
15
def last_occr(l,ch):
    return ''.join(l).rindex(ch)
chars = ['s','d','f','s','d','f','s','f','k','o','p','i','w','e','k','c']
print("Original list:")
print(chars)
ch = 'f'
print("Last occurrence of",ch,"in the said list:")
print(last_occr(chars, ch))
Original list:
['s', 'd', 'f', 's', 'd', 'f', 's', 'f', 'k', 'o', 'p', 'i', 'w', 'e', 'k', 'c']
Last occurrence of f in the said list:
7
#163-index of the first element which is greater than a specified element
l=[12, 45, 23, 67, 78, 90, 100, 76, 38, 62, 73, 29, 83]
#output-Index of the first element which is greater than 73 in the said list:4
num=73
for i in range(len(l)):
    if l[i]>num:
        print(i)
        break
4
#164-get the items from a given list with specific condition
l=[12, 45, 23, 67, 78, 90, 45, 32, 100, 76, 38, 62, 73, 29, 83]
#output-Number of Items of the said list which are even and greater than 45-5
count=0
num=45
for i in l:
    if i>num and i%2==0:
        count+=1
print(count)
5
#164-
def first_idx(l1):
    return sum(1 for i in l if (i>45 and i%2==0))
#165-split a given list into specified sized chunks
l=[12, 45, 23, 67, 78, 90, 45, 32, 100, 76, 38, 62, 73, 29, 83]
n=3
op_l=[]
for i in range(0,len(l),3):
    [op_l.append(l[i:i+n])]
print(list(op_l))
[[12, 45, 23], [67, 78, 90], [45, 32, 100], [76, 38, 62], [73, 29, 83]]
def split_list(lst, n):
    result = list((lst[i:i+n] for i in range(0, len(lst), n)))
    return result
nums = [12,45,23,67,78,90,45,32,100,76,38,62,73,29,83]
print("Original list:")
print(nums)
n = 3
print("\nSplit the said list into equal size",n)
print(split_list(nums,n))
Original list:
[12, 45, 23, 67, 78, 90, 45, 32, 100, 76, 38, 62, 73, 29, 83]

Split the said list into equal size 3
[[12, 45, 23], [67, 78, 90], [45, 32, 100], [76, 38, 62], [73, 29, 83]]
#Date-7/15/22
#166-remove None value from a given list.
l=[12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]
for i in l:
    if i is None:
        l.remove(i)
print(l)
[12, 0, 23, -55, 234, 89, 0, 6, -12]
def remove_none(l):
    result=[x for x in l if x is not None]
    return result
lst=[12, 0, None, 23, None, -55, 234, 89, None, 0, 6, -12]
print(remove_none(lst))
[12, 0, 23, -55, 234, 89, 0, 6, -12]
#167-convert a given list of strings into list of lists
#output-['R', 'e', 'd'], ['M', 'a', 'r', 'o', 'o', 'n'], ['Y', 'e', 'l', 'l', 'o', 'w'], ['O', 'l', 'i', 'v', 'e']]
l=['Red', 'Maroon', 'Yellow', 'Olive']
result=[]
result=[list(ch) for ch in l]
print(result)
[['R', 'e', 'd'], ['M', 'a', 'r', 'o', 'o', 'n'], ['Y', 'e', 'l', 'l', 'o', 'w'], ['O', 'l', 'i', 'v', 'e']]
#168-display vertically each element of a given list, list of lists
l=['a', 'b', 'c', 'd', 'e', 'f']
for i in l:
    print(i)
lst=[[1, 2, 5], [4, 5, 8], [7, 3, 6]] 
for a,b,c in zip(*lst):
    print(a,b,c)
a
b
c
d
e
f
1 4 7
2 5 3
5 8 6
#169-convert a given list of strings and characters to a single list of characters.
lst=['red', 'white', 'a', 'b', 'black', 'f']
result=[]
for i in lst:
    for j in i:
        result.append(j)
print(result)
['r', 'e', 'd', 'w', 'h', 'i', 't', 'e', 'a', 'b', 'b', 'l', 'a', 'c', 'k', 'f']
def str_lst(l):
    result=[i for el in l for i in el]
    print(result)
lst=['red', 'white', 'a', 'b', 'black', 'f']
str_lst(lst)
['r', 'e', 'd', 'w', 'h', 'i', 't', 'e', 'a', 'b', 'b', 'l', 'a', 'c', 'k', 'f']
#170-insert an element in a given list after every nth position
#output-Insert a in the said list after 2 nd element:
#[1, 2, 'a', 3, 4, 'a', 5, 6, 'a', 7, 8, 'a', 9, 0]

l=[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
n=2
ch='a'
while n <len(l):
    l.insert(n,ch)
    n+=3
print(l)
[1, 2, 'a', 3, 4, 'a', 5, 6, 'a', 7, 8, 'a', 9, 0]
letters=['a','b','c','d','e','f','g','h','i','j']
result=list(''.join(l + '0' * (n % 3 == 2) for n, l in enumerate(letters)))
print(result)
['a', 'b', 'c', '0', 'd', 'e', 'f', '0', 'g', 'h', 'i', '0', 'j']
letters = ['a','b','c','d','e','f','g','h','i','j']
new_list = []
n=3
for strt_idx in range(0,len(letters),n):
    new_list.extend(letters[strt_idx:strt_idx+n])
    new_list.append('0')
    #print(letters[strt_idx:strt_idx+n])
new_list.pop()
print(new_list)
['a', 'b', 'c']
['d', 'e', 'f']
['g', 'h', 'i']
['j']
['a', 'b', 'c', '0', 'd', 'e', 'f', '0', 'g', 'h', 'i', '0', 'j']
#171-concatenate element-wise three given lists
#output-['0red100', '1green200', '2black300', '3blue400', '4white500']
#q1-are these list have same length?

l1=['0', '1', '2', '3', '4']
l2=['red', 'green', 'black', 'blue', 'white']
l3=['100', '200', '300', '400', '500']
result=[]
for i in range(len(l1)):
    k=l1[i]+l2[i]+l3[i]
    result.append(k)
print(result)
['0red100', '1green200', '2black300', '3blue400', '4white500']
#zip method
def concat_lst(l1,l2,l3):
    return [i+j+k for i,j,k in zip(l1,l2,l3)]
l1=['0', '1', '2', '3', '4','0']
l2=['red', 'green', 'black', 'blue', 'white']
l3=['100', '200', '300', '400', '500']
print(concat_lst(l1,l2,l3))
['0red100', '1green200', '2black300', '3blue400', '4white500']
#172-remove the last N number of elements from a given list
l=[2, 3, 9, 8, 2, 0, 39, 84, 2, 2, 34, 2, 34, 5, 3, 5]
n=3
#s1-ceate new list with l-3 elements
#s2-delete last 3 elements
#s3-pop 3 times
result=[]
for i in range(len(l)-n):
    result.append(l[i])
print(result)
[2, 3, 9, 8, 2, 0, 39, 84, 2, 2, 34, 2, 34]
def remove_last_n(nums, N):
    result = nums[:len(nums)-N]
    return result  
nums = [2,3,9,8,2,0,39,84,2,2,34,2,34,5,3,5]
print("Original lists:")
print(nums)
N = 3
print("\nRemove the last",N,"elements from the said list:")
print(remove_last_n(nums, N))
Original lists:
[2, 3, 9, 8, 2, 0, 39, 84, 2, 2, 34, 2, 34, 5, 3, 5]

Remove the last 3 elements from the said list:
[2, 3, 9, 8, 2, 0, 39, 84, 2, 2, 34, 2, 34]
#173-merge some list items in given list using index value
#q1-are the index always consecutive?

#output-Merge items from 3 to 7 in the said List:['a', 'b', 'c', 'defg']
l=['a', 'b', 'c', 'd', 'e', 'f', 'g']
n1=3
n2=7
result=[]
for i in range(len(l)):
    if i>=n1 and i<=n2:
        k=k+l[i]
    else:
        k=l[i]
    result.append(k)
print(result)
['a', 'b', 'c', 'cd', 'cde', 'cdef', 'cdefg']
#s-list slicing
def merge_chars(lst,merge_from,merge_to):
    result=lst
    result[merge_from:merge_to]=[''.join(result[merge_from:merge_to])]
    return result
chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
print("Original lists:")
print(chars)
merge_from = 2
merge_to = 4
print("\nMerge items from",merge_from,"to",merge_to,"in the said List:")
print(merge_chars(chars,merge_from,merge_to))
Original lists:
['a', 'b', 'c', 'd', 'e', 'f', 'g']

Merge items from 2 to 4 in the said List:
['a', 'b', 'cd', 'e', 'f', 'g']
#174-add a number to each element in a given list of numbers
lst=[3, 8, 9, 4, 5, 0, 5, 0, 3]
n=3
result=[n+i for i in lst]
print(result)
[6, 11, 12, 7, 8, 3, 8, 3, 6]
#175-find the minimum, maximum value for each tuple position in a given list of tuples
#input-[(2, 3), (2, 4), (0, 6), (7, 1)]
#output-Maximum value for each tuple position in the said list of tuples:[7, 6]
#Minimum value for each tuple position in the said list of tuples:[0, 1]
l=[(2, 3), (2, 4), (0, 6), (7, 1)]
print(max(l)[0],min(l)[0])
7 0
def max_min_lst_tup(nums):
    zip(*nums)
    result1=map(max,zip(*nums))
    #print(list[result1])
    result2 = map(min, zip(*nums))
    #print(zip(*nums)
    return list(result1), list(result2)
nums = [(2,3),(2,4),(0,6),(7,1)]
result = max_min_lst_tup(nums)
print("Maximum value  for each tuple position in the said list of tuples:")
print(result[0])
print("Minimum value  for each tuple position in the said list of tuples:")
print(result[1])
Maximum value  for each tuple position in the said list of tuples:
[7, 6]
Minimum value  for each tuple position in the said list of tuples:
[0, 1]
#176-create a new list dividing two given lists of numbers
nums1 = [7,2,3,4,9,2,3]
nums2 = [9,8,2,3,3,1,2]
result=[x/y for x,y in zip(nums1,nums2)]
print(result)
[0.7777777777777778, 0.25, 1.5, 1.3333333333333333, 3.0, 2.0, 1.5]
#Date-7/16/22
#177-find common elements in a given list of lists

from functools import reduce
test_lst=[[7, 2, 3, 4, 7], [9, 2, 3, 2, 5], [8, 2, 3, 4, 4]]
print("original list is= ",test_lst)
res=list(reduce(lambda i,j: i&j, (set(x) for x in test_lst)))
#res=list(reduce(lambda i,j: i & j, (x for x in test_lst)))
r=list( (set(x) for x in test_lst))
print(r)
print(res)
original list is=  [[7, 2, 3, 4, 7], [9, 2, 3, 2, 5], [8, 2, 3, 4, 4]]
[{2, 3, 4, 7}, {9, 2, 3, 5}, {8, 2, 3, 4}]
[2, 3]
test_lst=[[7, 2, 3, 4, 7], [9, 2, 3, 2, 5], [8, 2, 3, 4, 4]]
res=list(set.intersection(*map(set,test_lst)))
print(res)
[2, 3]
#178-insert a specified element in a given list after every nth element
l=[1, 3, 5, 7, 9, 11, 0, 2, 4, 6, 8, 10, 8, 9, 0, 4, 3, 0]
n=4
num=20
while n <len(l):
    l.insert(n,num)
    n=n+5
print(l)
[1, 3, 5, 7, 20, 9, 11, 0, 2, 20, 4, 6, 8, 10, 20, 8, 9, 0, 4, 20, 3, 0]
l=[1, 3, 5, 7, 9, 11, 0, 2, 4, 6, 8, 10, 8, 9, 0, 4, 3, 0]
n=4
num=20
op_l=[]
for strt_idx in range(0,len(l),n):
    op_l.extend(l[strt_idx:strt_idx+n])
    op_l.append('j')
op_l.pop()
print(op_l)
[1, 3, 5, 7, 'j', 9, 11, 0, 2, 'j', 4, 6, 8, 10, 'j', 8, 9, 0, 4, 'j', 3, 0]
#179-create the largest possible number using the elements of a given list of positive integers
#s1-brute force
#s2-sequntial arrangement 
#op-9744341403
#res=''
key=''
l=[3, 40, 41, 43, 74, 9,98]
res=sorted((str(val)for val in l),reverse=True)
for i in res:
    key=key+i
print(key)
#print(res)
989744341403
#180-Python program to create the smallest possible number using the elements of a given list of positive integers.
l=[3, 40, 41, 43, 74, 9]
key=''
res=(sorted(str(val)for val in l))
print(res)
for i in res:
    key=key+i
print(key)
['3', '40', '41', '43', '74', '9']
3404143749
#181-iterate a given list cyclically on specific index position
from itertools import cycle, islice, dropwhile
  
# initializing tuple list 
test_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
  
# printing original list
print ("The original list is : " + str(test_list))
  
# starting index 
K = 3
  
# using itertools methods for
# cyclic iteration in list 
cycling = cycle(test_list)  
skipping = dropwhile(lambda x: x != K, cycling) 
slicing = islice(skipping, None, len(test_list))
slicing = list(slicing)
  
# printing result 
print ("The cycled list is : " +  str(slicing))
The original list is : ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
---------------------------------------------------------------------------
KeyboardInterrupt                         Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_8688/2405875513.py in <module>
     16 skipping = dropwhile(lambda x: x != K, cycling)
     17 slicing = islice(skipping, None, len(test_list))
---> 18 slicing = list(slicing)
     19 
     20 # printing result

~\AppData\Local\Temp/ipykernel_8688/2405875513.py in <lambda>(x)
     14 # cyclic iteration in list
     15 cycling = cycle(test_list)
---> 16 skipping = dropwhile(lambda x: x != K, cycling)
     17 slicing = islice(skipping, None, len(test_list))
     18 slicing = list(slicing)

KeyboardInterrupt: 
test_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
n=3
cycle_lst=test_list[3:]+test_list[:3]
print(cycle_lst)
['d', 'e', 'f', 'g', 'h', 'a', 'b', 'c']
#using% operator 
test_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
n=3
res=[]
for i in range(len(test_list)):
    res.append(test_list[n%len(test_list)])
    n=n+1
print(res)
['d', 'e', 'f', 'g', 'h', 'a', 'b', 'c']
#182-calculate the maximum and minimum sum of a sublist in a given list of lists
l=[[1, 2, 3, 5], [2, 3, 5, 4], [0, 5, 4, 1], [3, 7, 2, 1], [1, 2, 1, 2]]
max_sum=0
for i in l:
    if sum(i)>max_sum:
        max_sum=sum(i)
        max_sum_arr=i
print(max_sum,max_sum_arr)
14 [2, 3, 5, 4]
l=[[1, 2, 3, 5], [2, 3, 5, 4], [0, 5, 4, 1], [3, 7, 2, 1], [1, 2, 1, 2]]
max_result=(max(l,key=sum))
print(max_result)
[2, 3, 5, 4]
#183-get the unique values in a given list of lists
#reduce method
from functools import reduce
l=[[1, 2, 3, 5], [2, 3, 5, 4], [0, 5, 4, 1], [3, 7, 2, 1], [1, 2, 1, 2]]
res=list(reduce(lambda i,j :set(i) | set(j) ,l))
print(res)
[0, 1, 2, 3, 4, 5, 7]
from itertools import chain
array=[['a','b'],['a','b','c'],['a']]
print(set(chain(*array)))
{'b', 'a', 'c'}
array=[['a','b'],['a','b','c'],['a']]
result={x for l in array for x in l}
print(result)
{'b', 'a', 'c'}
 
#Date-7/19/22
#184-form Bigrams of words in a given list of strings
#access 2 items from list and insert to a tuple
l=['Sum all the items in a list', 'Find the second smallest number in a list']
res=[(x,i.split()[j+1])for i in l for j,x in enumerate(i.split()) if j < len(i.split()) - 1]
#j is tracker for enumeration
#x and i are strings in tuple
print(res)
#%debug
[('Sum', 'all'), ('all', 'the'), ('the', 'items'), ('items', 'in'), ('in', 'a'), ('a', 'list'), ('Find', 'the'), ('the', 'second'), ('second', 'smallest'), ('smallest', 'number'), ('number', 'in'), ('in', 'a'), ('a', 'list')]
#zip+split+list comprehension
l=['Sum all the items in a list', 'Find the second smallest number in a list']
res=[i for j in l for i in zip(j.split(" ")[:-1],j.split(" ")[1:])]
print(res)
[('Sum', 'all'), ('all', 'the'), ('the', 'items'), ('items', 'in'), ('in', 'a'), ('a', 'list'), ('Find', 'the'), ('the', 'second'), ('second', 'smallest'), ('smallest', 'number'), ('number', 'in'), ('in', 'a'), ('a', 'list')]
#185-convert a given decimal number to binary list.
#input-Original Number: 8
#output-Decimal number ( 8 ) to binary list:[1, 0, 0, 0]
n=100
div=0
rem=0
lst=[]
while div>=0:
    div=int(n/2)
    rem=n%2
    n=div    
    lst.append(rem)
    if(div==0):
        break
    #print(div,rem,lst)
print(lst[::-1])
[1, 1, 0, 0, 1, 0, 0]
def dec_bin(n):
    result=[int(x)for x in list('{0:0b}'.format(n))]
    return result
n=8
print(dec_bin(n))
[1, 0, 0, 0]
#recursion-
def decimalToBinary(num):
    if num>=1:
        decimalToBinary(num//2)
        print(num%2)
decimalToBinary(8)
1
0
0
0
#186-swap two sublists in a given list
nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
nums[6:10], nums[1:3] = nums[1:3], nums[6:10]
print(nums)
[0, 6, 7, 8, 9, 3, 4, 5, 1, 2, 10, 11, 12, 13, 14, 15]
#187-convert a given list of tuples to a list of strings
#input-[('red', 'green'), ('black', 'white'), ('orange', 'pink')]
#output-['red green', 'black white', 'orange pink']
#s1:access elements from tuple and append on list
ip=[('red', 'green'), ('black', 'white'), ('orange', 'pink')]
op=[]
for i in ip:
    res=i[0]+" "+i[1]
    op.append(res)
print(op)
['red green', 'black white', 'orange pink']
ip=[('red', 'green'), ('black', 'white'), ('orange', 'pink')]
op=[]
print(list(map(' '.join,ip)))
['red green', 'black white', 'orange pink']
def tup_lst(lst):
    result=[("%s "*len(el)%el).strip()for el in lst]
    return result
colors = [('red', 'green'), ('black', 'white'), ('orange', 'pink')]
print(tup_lst(colors))
['red green', 'black white', 'orange pink']
#188-sort a given list of tuples on specified element.
lst=[('item2', 10, 10.12), ('item3', 15, 25.1), ('item1', 11, 24.5), ('item4', 12, 22.5)]
#output-sort on 1st element
n=0
print(sorted((lst),key=lambda x:x[n]))#its like sorting with i[0] in terma of for loop
#print(lst)
[('item1', 11, 24.5), ('item2', 10, 10.12), ('item3', 15, 25.1), ('item4', 12, 22.5)]
#189-shift last element to first position and first element to last position in a given list
#inuput-[1, 2, 3, 4, 5, 6, 7]
#output-[7, 2, 3, 4, 5, 6, 1]
#element swapping
lst=[1, 2, 3, 4, 5, 6, 7]
temp_f=lst[0]
temp_l=lst[6]
lst.remove(temp_l)
lst.insert(6,temp_f)
lst.remove(temp_f)
lst.insert(0,temp_l)
print(lst)
[7, 2, 3, 4, 5, 6, 1]
#190-find the specified number of largest products from two given list, multiplying an element from each list
from itertools import product
l1=[1, 2, 3, 4, 5, 6]
l2=[3, 6, 8, 9, 10, 6]
#res=[i*j for i,j in product(l1,l2)]
res=sorted([i*j for i,j in product(l1,l2)],reverse=True)[:3]
print(res)
[60, 54, 50]
#191-find the maximum and minimum value of the three given lists
#s1-concat 3 lists and find max and min
#s2-find max and min from individual lists and then compare
#s3-sort all the list compare first and last element
l1=[2, 3, 5, 8, 7, 2, 3]
l2=[4, 3, 9, 0, 4, 3, 9]
l3=[2, 1, 5, 6, 5, 5, 4]
l=l1+l2+l3
l_sorted=sorted(l)
print("min=",l_sorted[0],"max=",l_sorted[-1])
min= 0 max= 9
#192-remove all strings from a given list of tuples
lst=[(100, 'Math'), (80, 'Math'), (90, 'Math'), (88, 'Science', 89), (90, 'Science', 92)]
res=[]
for i in lst:
    for j in i:
        if type(j) !=str:
            res.append(j)
print(res)
[100, 80, 90, 88, 89, 90, 92]
def test(lst):
    result=[tuple(v for v in i if not isinstance(v,str)) for i in lst]
    return result
lst=[(100, 'Math'), (80, 'Math'), (90, 'Math'), (88, 'Science', 89), (90, 'Science', 92)]
print(test(lst))
[(100,), (80,), (90,), (88, 89), (90, 92)]
#193-find the dimension of a given matrix
#find length of matrix and length of individual array
mtr=[[0, 1, 2], [2, 4, 5]]
print(len(mtr),len(mtr[0]))    
2 3
#194-sum two or more lists, the lengths of the lists may be different
import itertools
l=[[1, 2, 4], [2, 4, 4], [1, 2]]
res=[]
[sum(x) for x in itertools.zip_longest(*l,fillvalue=0)]
[4, 8, 8]
l=[[1, 2, 4], [2, 4, 4], [1, 2]]
ml=max(map(len,l))
[sum(x) for x in zip(*map(lambda x:x+[0]*ml if len(x)<ml else x,l))]
[4, 8, 8]
#195-program to traverse a given list in reverse order, also print the elements with original index.
#s1-enumeration
l=['red', 'green', 'white', 'black']
l2=list(enumerate(l))
print(l2[::-1])
[(3, 'black'), (2, 'white'), (1, 'green'), (0, 'red')]
color = ["red", "green", "white", "black"]
print("Original list:")
print(color)
print("\nTraverse the said list in reverse order:")
for i in reversed(color):
    print(i)
print("\nTraverse the said list in reverse order with original index:")
for i, el in reversed(list(enumerate(color))):
    print(i, el) 
Original list:
['red', 'green', 'white', 'black']

Traverse the said list in reverse order:
black
white
green
red

Traverse the said list in reverse order with original index:
3 black
2 white
1 green
0 red
#196-move a specified element in a given list
l=['red', 'green', 'white', 'black', 'orange']
#output-Move white at the end of the said list: ['red', 'green', 'black', 'orange', 'white']
#s1-list slicing
#using temporary variable
idx=l.index('white')
l_op=l[0:idx]+l[idx+1:]+l[idx:idx+1]
print(l_op)
['red', 'green', 'black', 'orange', 'white']
def group_similar_items(seq,el):
    seq.append(seq.pop(seq.index(el)))
    return seq 

colors = ['red','green','white','black','orange']
print("Original list:")
print(colors)
el = "white"
print("Move",el,"at the end of the said list:")
print(group_similar_items(colors, el))
Original list:
['red', 'green', 'white', 'black', 'orange']
Move white at the end of the said list:
['red', 'green', 'black', 'orange', 'white']
#Date-7/21/22
#198-compute the average of nth elements in a given list of lists with different lengths
l=[[0, 1, 2], [2, 3, 4], [3, 4, 5, 6], [7, 8, 9, 10, 11], [12, 13, 14]]
n=3
sums=0
avg=0
for i in l:
    if len(i)-1<n:
        continue 
    else:
        sums=sums+i[n]
avg=sums/len(l)
print(avg)
3.2
import itertools as it
nums = [[0, 1, 2],
       [2, 3, 4],
       [3, 4, 5, 6],
       [7, 8, 9, 10, 11],
       [12, 13, 14]]
def get_avg(x):
    x=[i for i in x if i is not None]
    return sum(x, 0.0) / len(x)
result=map(get_avg,it.zip_longest(*nums))
print(list(it.zip_longest(*nums)))
print(list(result))
[(0, 2, 3, 7, 12), (1, 3, 4, 8, 13), (2, 4, 5, 9, 14), (None, None, 6, 10, None), (None, None, None, 11, None)]
[4.8, 5.8, 6.8, 8.0, 11.0]
#198-compare two given lists and find the indices of the values present in both lists.
l1=[1, 2, 3, 4, 5, 6]
l2=[7, 8, 5, 2, 10, 12]
res=[]
for i in l1:
    if i in l2:
        res.append(l1.index(i))
print(res)
[1, 4]
def matched_idx(l1,l2):
    l2 = set(l2)
    return [i for i, el in enumerate(l1) if el in l2]
#    return [i for i, el in enumerate(l1) if el in l2]
nums1 = [1, 2, 3, 4, 5 ,6]
nums2 = [7, 8, 5, 7, 10, 12]
print("\nOriginal lists:")
print(nums1)
print(nums2)
print("Compare said two lists and get the indices of the values present in both lists:")
print(matched_idx(nums1, nums2))
Original lists:
[1, 2, 3, 4, 5, 6]
[7, 8, 5, 7, 10, 12]
Compare said two lists and get the indices of the values present in both lists:
[4]
#199-convert a given unicode list to a list contains strings
def unicode_to_str(lst):
    result=[str(x) for x in lst]
    return result
students=[u'S001', u'S002', u'S003', u'S004']
print("Original lists:")
print(students)
print(" Convert the said unicode list to a list contains strings:")
print(unicode_to_str(students))
Original lists:
['S001', 'S002', 'S003', 'S004']
 Convert the said unicode list to a list contains strings:
['S001', 'S002', 'S003', 'S004']
#200-pair up the consecutive elements of a given list
l=[1, 2, 3, 4, 5, 6]
#for loop
l_op=[]
for i in range(len(l)-1):
    res=[]
    res=[l[i],l[i+1]]
    l_op.append(res)
print(l_op)
[[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]
#using zip

l=[1, 2, 3, 4, 5, 6]
res = list(zip(l,l[1:]))
print(res)
[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]
#201-check if a given string contains an element, which is present in a list
str1="https://www.w3resource.com/python-exercises/list/"
l=['.com', '.edu', '.tv']
for i in l:
    if i in str1:
        print("Yeah")
    else:
        print("Naahh")
Yeah
Naahh
Naahh
#202-find the indexes of all None items in a given list
l=[1, None, 5, 4, None, 0, None, None]
res=[]
for i in l:
    if i== None:
        print(l.index(i))
        res.append(l.index(i))
print(res)
1
1
1
1
[1, 1, 1, 1]
def relative_order(lst):
    result = [i for i in range(len(lst)) if lst[i] == None]
    return result

nums = [1, None, 5, 4,None, 0, None, None]
print("Original list:")
print(nums)
print("\nIndexes of all None items of the list:")
print(relative_order(nums))
Original list:
[1, None, 5, 4, None, 0, None, None]

Indexes of all None items of the list:
[1, 4, 6, 7]
#203-join adjacent members of a given list
l=['1', '2', '3', '4', '5', '6', '7', '8']
#op=['12', '34', '56', '78']
res=[]
for i in range(0,len(l)-1,2):
    res.append(l[i]+(l[i+1]))
print(list(res))
['12', '34', '56', '78']
def test(lst):
    result=[x+y for x,y in zip(lst[::2],lst[1::2])]
    print(lst[::2],lst[1::2])
    return result
nums = ['1','2','3','4','5','6','7','8']
print(test(nums))
['1', '3', '5', '7'] ['2', '4', '6', '8']
['12', '34', '56', '78']
#204-check if first digit/character of each element in a given list is same or not.
l=[1234, 122, 1984, 19372, 100]
res=[]
for i in l:
    res.append(str(i)[0])
if len(set(res))==1:
    print("Yup")
else:
    print("nope")
Yup
def test(lst):
    result=all(str(x)[0]==str(lst[0])[0] for x in lst)
    return result
nums = [1234, 122, 1984, 19372, 100]
print("\nOriginal list:")
print(nums)
print("Check if first digit in each element of the said given list is same or not!")
print(test(nums))
Original list:
[1234, 122, 1984, 19372, 100]
Check if first digit in each element of the said given list is same or not!
True
#205-ind the indices of elements of a given list, greater than a specified value
l=[1234, 1522, 1984, 19372, 1000, 2342, 7626]
res=[]
n=3000
for i in l:
    if i>n:
        res.append(l.index(i))
print(res)
[3, 6]
def test(lst, value):
    result = [i for i,val in enumerate(lst) if val > value]
    return result
nums = [1234, 1522, 1984, 19372, 1000, 2342, 7626]
print("\nOriginal list:")
print(nums)
val = 3000
print("Indices of elements of the said list, greater than",val)
print(test(nums,val))
Original list:
[1234, 1522, 1984, 19372, 1000, 2342, 7626]
Indices of elements of the said list, greater than 3000
[3, 6]
#206-remove additional spaces in a given list
l=['abc ', ' ', ' ', 'sdfds ', ' ', ' ', 'sdfds ', 'huy']
result=[]
for i in l:
    j=i.replace(' ','')
    result.append(j)
print(result)
['abc', '', '', 'sdfds', '', '', 'sdfds', 'huy']
#207- find the common tuples between two given lists
l1=[('red', 'green'), ('black', 'white'), ('orange', 'pink')]
l2=[('red', 'green'), ('orange', 'pink')]
res=[]
for i in l1:
    if i in l2:
        res.append(i)
print(res)
[('red', 'green'), ('orange', 'pink')]
def test(list1, list2):
    result =  set(list1).intersection(list2)
    return list(result)
list1 =  [('red', 'green'), ('black', 'white'), ('orange', 'pink')] 
list2 =  [('red', 'green'), ('orange', 'pink')] 
print("\nOriginal lists:")
print(list1)
print(list2)
print("\nCommon tuples between two said lists")
print(test(list1,list2)) 
Original lists:
[('red', 'green'), ('black', 'white'), ('orange', 'pink')]
[('red', 'green'), ('orange', 'pink')]

Common tuples between two said lists
[('red', 'green'), ('orange', 'pink')]
#208-Sum a list of numbers. Write a Python program to sum the first number with 
#the second and divide it by 2, then sum the second with the third and divide by 2, and so on
#op=[1.5, 2.5, 3.5, 4.5, 5.5, 6.5]
l=[1, 2, 3, 4, 5, 6, 7]
f_Res=[]
res=list(zip(l[0:],l[1:]))
for i in res:
    avg=((i[0]+i[1])/2)
    f_Res.append(avg)
print(res,f_Res)
[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)] [1.5, 2.5, 3.5, 4.5, 5.5, 6.5]
def test(lst1):
    result=[(x+y)/2.0 for(x,y) in zip(lst1[0:],lst1[1:])]
    return result
nums =  [1,2,3,4,5,6,7]
print("\nOriginal list:")
print(nums)
print("\nSum the said list of numbers:")
print(test(nums))
Original list:
[1, 2, 3, 4, 5, 6, 7]

Sum the said list of numbers:
[1.5, 2.5, 3.5, 4.5, 5.5, 6.5]
#209-count the number of groups of non-zero numbers separated by zeros of a given list of numbers
#q1-how many numbers group can have?
#s1-for loop
def test(lst):
    ctr=0
    prev_digit=0
    for digit in lst:
        if prev_digit==0 and digit!=0:
            #print(prev_digit,digit)
            ctr+=1
        prev_digit=digit
    return ctr
nums=[3, 4, 6, 2, 0, 0, 0, 0, 0, 0, 6, 7, 6, 9, 10, 0, 0, 0, 0, 0, 5, 9, 9, 7, 4, 4, 0, 0, 0, 0, 0, 0, 5, 3, 2, 9, 7, 1]
print("\nOriginal list:")
print(nums)
print("\nNumber of groups of non-zero numbers separated by zeros of the said list:")
print(test(nums)) 
Original list:
[3, 4, 6, 2, 0, 0, 0, 0, 0, 0, 6, 7, 6, 9, 10, 0, 0, 0, 0, 0, 5, 9, 9, 7, 4, 4, 0, 0, 0, 0, 0, 0, 5, 3, 2, 9, 7, 1]

Number of groups of non-zero numbers separated by zeros of the said list:
4
#date-7/22/22
#210-compute the sum of non-zero groups (separated by zeros) of a given list of numbers
l=[3, 4, 6, 2, 0, 0, 0, 0, 0, 0, 6, 7, 6, 9, 10, 0, 0, 0, 0, 0, 7, 4, 4, 0, 0, 0, 0, 0, 0, 5, 3, 2, 9, 7, 1, 0, 0, 0]
def sum_grp(lst):
    prev_num=0
    sums=0
    res=[]
    for i in lst:
        if i!=0:
            sums=sums+i
            prev_num=i
        elif i==0 and prev_num!=0:
            res.append(sums)
            sums=0
            prev_num=i
    return res
print(sum_grp(l))
[15, 38, 15, 27]
def test(lst):
    result=[]
    el_val=0
    for digit in lst:
        if digit==0:
            if el_val!=0:
                result.append(el_val)
                el_val=0
        else:
            el_val+=digit
    return result
nums = [3,4,6,2,0,0,0,0,0,0,6,7,6,9,10,0,0,0,0,0,7,4,4,0,0,0,0,0,0,5,3,2,9,7,1,0,0,0]
print("Original list:")
print(nums)
print("\nCompute the sum of non-zero groups (separated by zeros) of the said list of numbers:")
print(test(nums))
Original list:
[3, 4, 6, 2, 0, 0, 0, 0, 0, 0, 6, 7, 6, 9, 10, 0, 0, 0, 0, 0, 7, 4, 4, 0, 0, 0, 0, 0, 0, 5, 3, 2, 9, 7, 1, 0, 0, 0]

Compute the sum of non-zero groups (separated by zeros) of the said list of numbers:
[15, 38, 15, 27]
#211- remove an element from a given lis
l=['Ricky Rivera', 98, 'Math', 90, 'Science']
val='Ricky Rivera'
idx=l.index(val)
del(l[idx])
print(l)
[98, 'Math', 90, 'Science']
#212-remove all the values except integer values from a given array of mixed values
def test(lst):
    return [lst for lst in lst if isinstance(lst, int)]
mixed_list = [34.67, 12, -94.89, "Python", 0, "C#"]
print("Original list:", mixed_list)
print("After removing all the values except integer values from the said array of mixed values:")
print(test(mixed_list))
Original list: [34.67, 12, -94.89, 'Python', 0, 'C#']
After removing all the values except integer values from the said array of mixed values:
[12, 0]
#213-calculate the sum of two lowest negative numbers of a given array of integers
l=[-14, 15, -10, -11, -12, -13, 16, 17, 18, 19, 20]
sums=0
res=[]
res=sorted(l)
sums=res[0]+res[1]
print(res,sums)
[-14, -13, -12, -11, -10, 15, 16, 17, 18, 19, 20] -27
#214-ort a given positive number in descending/ascending order
#Descending order of the said number: 544331
#Ascending order of the said number: 133445
num=134543
res=[]
asc_num=''
desc_num=''
for i in str(num):
    res.append(i)
asc_num=asc_num.join(sorted(res))
desc_num=desc_num.join(sorted(res,reverse=True))
   # print(asc_num)
print(sorted(res),asc_num,desc_num)
['1', '3', '3', '4', '4', '5'] 133445 544331
#215-merge two or more lists into a list of lists, c
#combining elements from each of the input lists based on their positions
l1=['a','b','c']
l2=[1,2,3]
l3=['@','#']
res=list(zip(l1,l2,l3))
print(list(res))
[('a', 1, '@'), ('b', 2, '#')]
def merge_list(*args,fill_val=None):
    max_length=max([len(lst)for lst in args])
    result=[]
    for i in range(max_length):
        result.append([args[k][i]if i<len(args[k]) else fill_val for k in range(len(args))])
    return result
print("After merging lists into a list of lists:")
print(merge_list(['a', 'b'], [1, 2], [True, False]))
After merging lists into a list of lists:
[['a', 1, True], ['b', 2, False]]
#216-group the elements of a list based on the given function and returns the count of elements in each group
from collections import defaultdict
def count_by(lst,fn=lambda x: x):
    count=defaultdict(int)
    for val in map(fn,lst):
        count[val]+=1
    return dict(count)
from math import floor
print(count_by([6.1, 4.2, 6.3], floor)) 
print(count_by(['one', 'two', 'three'], len))
{6: 2, 4: 1}
{3: 2, 5: 1}
#217-split values into two groups, based on the result of the given filtering function
def bifurcate_by(lst,fn):
    return[
        [x for x in lst if fn(x)],
        [x for x in lst if not fn(x)]
    ]
l=['red', 'green', 'black', 'white']
fctn=lambda x : x[0]=='w'
print(bifurcate_by(l,fctn))
[['white'], ['red', 'green', 'black']]
#218-sort one list based on another list containing the desired indexes
l=['apples', 'bread', 'eggs', 'jam', 'milk', 'oranges']
def sort_idx(lst,indexes):
    return [val for (_,val) in sorted(zip(indexes,lst),key=lambda x:x[0],reverse=True)]
l1 = ['eggs', 'bread', 'oranges', 'jam', 'apples', 'milk']
l2 = [3, 2, 6, 4, 1, 5]
print(sort_idx(l1, l2))  
['oranges', 'milk', 'jam', 'eggs', 'bread', 'apples']
['oranges', 'milk', 'jam', 'eggs', 'bread', 'apples']
#219-build a list, using an iterator function and an initial seed value
import random
res=[]
num=0
for i in range(10):
    num=random.seed(i)
    res.append(random.randint(1, 1000))
print(res)
[865, 138, 979, 244, 242, 638, 813, 332, 233, 475]
def unfold(fn,seed):
    def fn_generator(val):
        while True:
            val=fn(val[1])
            if val==False:break
            yield val[0]
    return [i for i in fn_generator([None,seed])]
f = lambda n: False if n > 40 else [-n, n + 10]
print(unfold(f, 10))
[-10, -20, -30, -40]
#220-to map the values of a list to a dictionary using a function, 
#where the key-value pairs consist of the original value as the key and the result of the function as the value.
def dict_fn(lst,fn):
    return dict(zip(lst,map(fn,lst)))
print(dict_fn([1, 2, 3], lambda x: x * x))
{1: 1, 2: 4, 3: 9}
#221-randomize the order of the values of an list, returning a new list
#s1-Fisher–Yates shuffle
import random
res=[]
l=[1, 2, 3, 4, 5, 6]
for i in range(len(l)-1,0,-1):
    j=random.randint(0,i+1)
    l[i],l[j]=l[j],l[i]
print(l)
[2, 6, 3, 1, 4, 5]
#s2-using random.shuffle
import random
l=[1, 2, 3, 4, 5, 6]
random.shuffle(l)
print(l)
[3, 5, 1, 4, 2, 6]
#random.shuffle
import random
l=[1, 2, 3, 4, 5, 6]
res=random.sample(l,len(l))
print(res)
[2, 4, 3, 6, 1, 5]
#select random indexes and append
l=[1, 2, 3, 4, 5, 6]
n=len(l)
for i in range(n):
    j=random.randint(0,n-1)
    el=l.pop(j)
    l.append(el)
print(l)
[6, 3, 1, 5, 2, 4]
#222-get the difference between two given lists, after applying the provided function to each list element of both
def list_fn(a,b,fn):
    b= set(map(fn,b))
    return [item for item in a if fn(item) not in b]
from math import floor
print(list_fn([2.1, 1.2], [2.3, 3.4], floor)) 
print(list_fn([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], lambda v : v['x']))
[1.2]
[{'x': 2}]
#Date-7/23/22
#223-create a list with the non-unique values filtered out
from collections import Counter
l=[1,2,3,1,3,5,4]
def unique_val(lst):
    return [item for item,count in Counter(lst).items() if count==1]
print(unique_val(l))
[2, 5, 4]
#224-list with the unique values filtered out
from collections import Counter
l=[1,2,3,1,3,5,4]
def dupe_val(lst):
    return [item for item, count in Counter(lst).items() if count>1]
print(dupe_val(l))
[1, 3]
#225-retrieve the value of the nested key indicated by the given selector list from a dictionary or list.
from functools import reduce
from operator import getitem
def get(d,selectors):
    return reduce(getitem,selectors,d)
users = {
  'freddy': {
    'name': {
      'first': 'Fateh',
      'last': 'Harwood' 
    },
    'postIds': [1, 2, 3]
  }
}
print(get(users, ['freddy', 'name', 'last']))
print(get(users, ['freddy', 'postIds', 0]))
Harwood
1
#226-get a list of elements that exist in both lists, after applying the provided function to each list element of both.
def intersection_by(a, b, fn):
    b = set(map(fn, b))
    return [item for item in a if fn(item) in b]
from math import floor
print(intersection_by([2.1, 1.2], [2.3, 3.4,2.5,2.1], floor))
[2.1]
#227-get the symmetric difference between two lists, after applying the provided function to each list element of both
def sym_diff(a,b,fn):
    (a,b)=(set(map(fn,b)),set(map(fn,a)))
    return [item for item in a if fn(item) not in b]+[item for item in b if fn(item) not in a]
from math import floor
print(sym_diff([2.1, 1.2], [2.3, 3.4], floor))
[3, 1]
#228-get every element that exists in any of the two given lists once, 
#after applying the provided function to each element of both
def union_by_el(x, y, fn):
    _x= set(map(fn, x))
    return list(set(x + [item for item in y if fn(item) not in _x])) 
from math import floor
print(union_by_el([4.1], [2.2, 4.3], floor))
[2.2, 4.1]
#230- find the indexes of all elements in the given list that satisfy the provided testing function
def first_idx(lst,fn):
    return [i for i in range(len(lst)) if fn(lst[i])]
print(first_idx([1, 2, 3, 4], lambda n: n % 2 == 1))    
[0, 2]
#229-find the index of the first element in the given list that satisfies the provided testing function
def find_index(nums,fn):
    return next(i for i,x in enumerate(nums)if fn(x))
print(find_index([1, 2, 3, 4], lambda n: n % 2 == 1))
0
#231-split values into two groups, based on the result of the given filter list.
def split_val(lst,fn):
    return [
        [i for i,flag in zip(lst,fn) if flag],
        [i for i,flag in zip(lst,fn) if not flag]
    ]
print(split_val(['red', 'green', 'blue', 'pink'], [True, True, False, True]))
[['red', 'green', 'pink'], ['blue']]
#232-chunk a given list into smaller lists of a specified size
def chunk_lst(lst,n):
    result=[]
    for i in range(0,len(l),n):
        res=[]
        res=l[i:i+n]
        #print(list(res),i)
        result.append(res)
    print(result)
l=[1,2,3,4,5,6,7,8]
n=3
(chunk_lst(l,n))
[[1, 2, 3], [4, 5, 6], [7, 8]]
from math import ceil
def chunk_lst(lst,size):
    #return list(map(lambda x: lst[x*size:x*size+size],list(range(ceil(len(lst)/size)))))
    return list(map(lambda x: lst[x:x+n]))
print(chunk_lst([1, 2, 3, 4, 5, 6, 7, 8], 3))
[[1, 2, 3], [4, 5, 6], [7, 8]]
#date-7/26/22---Incorrect
#233-chunk a given list into n smaller lists--this is incoorect solutions
#as int division gives lower integer value than fractional part it would not work correctly

l=[1,2,3,4,5,6,7,8,9]
n=3
#res=[]
result=[]
l_len=int(len(l)/n)
for i in range(0,len(l),l_len):
    res=[]
    res=l[i:i+l_len]
    result.append(res)
print(result)  
#print(res)
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
from math import ceil
def chunk_list_n(nums,n):
    size=ceil(len(nums)/n)
    #print(size)
    return list(map(lambda x : nums[x*size:x*size+size],list(range(n))))
nums=[1, 2, 3, 4, 5, 6, 7]
n=4
print(chunk_list_n(nums,n))
[[1, 2], [3, 4], [5, 6], [7]]
#234-convert a given number (integer) to a list of digits
#s1-map solution 
num=123
l=list(map(int,str(num)))
print((l))
[1, 2, 3]
#s2-divide by 10
num=123
res=[]
while num>0:
    rem=num%10
    num=num//10
    res.append(rem)
print(res)
[3, 2, 1]
#235-find the index of the last element in the given list that satisfies the provided testing function.
def find_last_idx(lst,fn):
    return len(lst)-1-next(i for i, x in enumerate(lst[::-1]) if fn(x))  ###we have to use i,x because enumerate return tuple(index and number)
print(find_last_idx([1,2,3,4],lambda n:n%2==1))
2
#236-find the items that are parity outliers in a given list
from collections import Counter
def find_parity_outliar(nums):
    return[ x for x in nums if x%2!=Counter([n%2 for n in nums]).most_common()[0][0]]
print(find_parity_outliar([1, 2, 3, 4, 6]))  
print(find_parity_outliar([1, 2, 3, 4, 5, 6, 7]))
[1, 3]
[2, 4, 6]
#237-convert a given list of dictionaries into a list of values corresponding to the specified key
l=simpsons = [
  { 'name': 'Areeba', 'age': 8 },
  { 'name': 'Zachariah', 'age': 36 },
  { 'name': 'Caspar', 'age': 34 }
  { 'name': 'Presley', 'age': 10 }
]
def convert_lstdct_lst(lst,key):
    res=[]
    for val in l:
        res.append(val.get(key))
    return res
print(convert_lstdct_lst(l,'age'))
[8, 36, 34, 10]
#238-calculate the average of a given list, after mapping each element to a value using the provided function

##https://www.google.com/search?q=how+to+apply+function+to+list+python&rlz=1C1RXQR_enUS983US984&oq=how+to+map+function+to+list+&aqs=chrome.1.69i57j0i22i30l2j0i390l2j69i64.12562j0j7&sourceid=chrome&ie=UTF-8
def avg_lst(lst,fn):
   # return next((x/len(lst)  for x in lst) if fn(x))
     return sum(map(fn,lst),0.0)/len(lst)
#next(i for i, x in enumerate(lst[::-1]) if fn(x))
print(avg_lst([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda x: x['n']))
print(avg_lst([{ 'n': 10 }, { 'n': 20 }, { 'n': -30 }, { 'n': 60 }], lambda x: x['n']))
5.0
15.0
#239-find the value of the first element in the given list that satisfies the provided testing function
def first_val(lst,fn):
    return next(x for x in (lst[::-1]) if fn(x))
    #return next(x for x in lst[0::]  if fn(x))
    #len(lst)-1-next(i for i, x in enumerate(lst[::-1]) if fn(x))
print(first_val([1,2,3,4],lambda n:n%2==1))
3
#240-find the value of the last element in the given list that satisfies the provided testing function.
def last_val(lst,fn):
    return next(x for x in lst[::-1] if fn(x))
print(last_val([1,2,3,4],lambda n:n%2==0))
4
#241-create a dictionary with the unique values of a given list as keys and their frequencies as the values
l=['a','b','c','d','e','a','b','d','e','a','a','a']
dicts={}
res=[]
for val in l:
    dicts[val]=l.count(val)
for key, val in dicts.items():
    print(key,val)
a 5
b 2
c 1
d 2
e 2
def cnt_freq(lst):
    count={}
    for i in [1, 1, 1, 5, 5, 3, 1, 3, 3, 1 ,4, 4, 4, 2, 2, 2, 2]:
        count[i]=count.get(i,0)+1
    return count
if __name__ == "__main__":
    my_list =[1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4, 4, 4, 2, 2, 2, 2]
    print(cnt_freq(my_list))
{1: 5, 5: 2, 3: 3, 4: 3, 2: 4}
#242- get the symmetric difference between two iterables, without filtering out duplicate values
def symmetric_difference(x, y):
  (_x, _y) = (set(x), set(y))
  return [item for item in x if item not in _y] + [item for item in y
          if item not in _x]
print(symmetric_difference([10, 20, 30], [10, 20, 40]))
[30, 40]
#243-check if a given function returns True for every element in a list
def tru_fls(lst,fn):
    return list(True if fn(x) else False for x in lst )
print(tru_fls([4, 2, 3], lambda x: x > 3))
[True, False, False]
def every(lst,fn=lambda x:x):
     return all(map(fn,lst))
print(every([4, 2, 3], lambda x: x > 1))
True
#244-to initialize a list containing the numbers in the specified range where 
#start and end are inclusive and the ratio between two terms is step. Returns an error if step equals 1
def ratio_lst(lst,ratio,n):
    for i in range(1,10):
        n=n*ratio
        lst.append(n*ratio)
    return lst
lst=[]
ratio=2
n=2
print(ratio_lst(lst,ratio,n))
[8, 16, 32, 64, 128, 256, 512, 1024, 2048]
from math import floor, log
def geometric_progression(end, start=1, step=2):
    return [start * step ** i for i in range(floor(log(end / start)
          / log(step)) + 1)] 
print(geometric_progression(256))
print(geometric_progression(256, 3))
print(geometric_progression(256, 1, 4))
[1, 2, 4, 8, 16, 32, 64, 128, 256]
[3, 6, 12, 24, 48, 96, 192]
[1, 4, 16, 64, 256]
#245-that takes any number of iterable objects or objects with a length property and returns the longest one.
def longest_item(*args):
    return max(args,key=len)
print(longest_item('this', 'is', 'a', 'Green'))  
print(longest_item([1, 2, 3], [1, 2], [1, 2, 3, 4, 5])) 
print(longest_item([1, 2, 3, 4], 'Red'))
Green
[1, 2, 3, 4, 5]
[1, 2, 3, 4]
#246-check if a given function returns True for at least one element in the list
def tru(lst,fn):
    return list(True if fn(x) else False for x in lst)
print(tru([0, 1, 2, 0], lambda x: x >= 2 ))
[False, False, True, False]
def some(lst, fn = lambda x: x):
  return any(map(fn, lst))
print(some([0, 1, 2, 0], lambda x: x >= 2 ))
print(some([5, 10, 20, 10], lambda x: x < 2 ))
True
False
#247-calculate the difference between two iterables, without filtering duplicate values
def difference(x, y):
  _y = set(y)
  return [item for item in x if item not in _y]
print(difference([1, 2, 3], [1, 2, 4]))
[3]
#248-get the maximum value of a list, after mapping each element to a value using a given function
def max_val(lst,fn):
    return max(map(fn, lst))
    #return next(max(x) if fn(x) else " " for x in lst)
print(max_val([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n'])) 
8
#249-get the minimum value of a list, after mapping each element to a value using a given function.
def min_val(lst,fn):
    return min(map(fn,lst))
print(min_val([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n']))  
2
#250-calculate the sum of a list, after mapping each element to a value using the provided function
def sum_val(lst,fn):
    return sum(map(fn,lst))
print(sum_val([{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }], lambda v : v['n'])) 
20
#251-initialize and fills a list with the specified value
def initialize_list_with_values(n, val = 0):
    return [val for x in range(n)] 
print(initialize_list_with_values(7))
print(initialize_list_with_values(8,3))
print(initialize_list_with_values(5,-2))
print(initialize_list_with_values(5, 3.2))
[0, 0, 0, 0, 0, 0, 0]
[3, 3, 3, 3, 3, 3, 3, 3]
[-2, -2, -2, -2, -2]
[3.2, 3.2, 3.2, 3.2, 3.2]
#date-7/27/22
#252-get the n maximum elements from a given list of numbers
l=[-2, -3, -1, -2, -4, 0, -5]
n=3
res=[]
def n_max_val(lst,n):
    #print(sorted(lst,reverse=True))
    res=sorted(lst,reverse=True)[:n]
    print(res)
n_max_val(l,n)
[0, -1, -2, -2, -3, -4, -5]
[0, -1, -2]
def max_n_nums(nums, n = 1):
  return sorted(nums, reverse = True)[:n]
nums = [1, 2, 3]
print("Original list elements:")
print(nums)
print("Maximum values of the said list:", max_n_nums(nums))
Original list elements:
[1, 2, 3]
Maximum values of the said list: [3]
#253-n minimum elements from a given list of numbers
l=[-2, -3, -1, -2, -4, 0, -5]
n=3
def n_min_val(lst,n):
    print(sorted(lst)[:n])
    #print(lst)[:n]
n_min_val(l,n)
[-5, -4, -3]
#254-get the weighted average of two or more numbers
def weighted_avg(num_lst,wegh_lst):
    res=0
    mult=0
    wegh_sum=0
    for i in range(len(num_lst)):
        mult=mult+(num_lst[i]*wegh_lst[i])
        wegh_sum=wegh_sum+wegh_lst[i]
    res=mult/wegh_sum
    return res
l_num=[10, 50, 40]
l_wgh=[2, 5, 3]
print(weighted_avg(l_num,l_wgh))
39.0
#using zip
def weighted_average(nums,weights):
    return sum(x*y for x,y in zip(nums,weights))/sum(weights)
nums1 = [10, 50, 40]
nums2 = [2, 5, 3]
print("Original list elements:")
print(nums1) 
print(nums2)
print("\nWeighted average of the said two list of numbers:")
print(weighted_average(nums1, nums2))
Original list elements:
[10, 50, 40]
[2, 5, 3]

Weighted average of the said two list of numbers:
39.0
#255-perform a deep flattens a list.
#s1-using deepflatten method
from iteration_utilities import deepflatten
multi_depth_lst=[[0,1], [[2, [3, [4, [5, [6 ]]]]]], [7,8]]
flatten_lst=list(deepflatten(multi_depth_lst))
print(flatten_lst)
[0, 1, 2, 3, 4, 5, 6, 7, 8]
#s2-using recursion
def flatten(l):
    if len(l)==1:
        if type(l[0])==list:
            result=flatten(l[0])
           # print(result,"first")
        else:
            result=l
           # print(result,"second")
    elif type(l[0])==list:
        result=flatten(l[0])+flatten(l[1:])
       # print(result,"third")
    else:
        result=[l[0]]+flatten(l[1:])
       # print(result,"last")
    return result
l=[[0,1], [2], [3,4]]
#print(len(l))
print(flatten(l))
[0, 1, 2, 3, 4]
def flatten_without_rec(non_flat):
    
    flat = []
    
    while non_flat: #runs until the given list is empty.
        
            e = non_flat.pop()
            
            if type(e) == list: #checks the type of the poped item.
                
                    non_flat.extend(e) #if list extend the item to given list.
            else:
                
                    flat.append(e) #if not list then add it to the flat list.
            
    flat.sort()
    
    return flat 
from collections.abc import Iterable
def deep_flatten(lst):
  return ([a for i in lst for a in
          deep_flatten(i)] if isinstance(lst, Iterable) else [lst])
nums = [1, [2], [[3], [4], 5], 6]
print("Original list elements:")
print(nums) 
print()
print("Deep flatten the said list:")
print(deep_flatten(nums))
Original list elements:
[1, [2], [[3], [4], 5], 6]

Deep flatten the said list:
[1, 2, 3, 4, 5, 6]
#256-get the powerset of a given iterable.
##https://www.geeksforgeeks.org/power-set/
#257-check if two given lists contain the same elements regardless of order
l1=[1, 2, 4]
l2=[2, 4, 3]

res=next(True if sorted(l1)==sorted(l2) else False for i in l1)
print(res)
False
def check_same_contents(nums1, nums2):
    for x in set(nums1 + nums2):
        if nums1.count(x) != nums2.count(x):
            return False
    return True
nums1 = [1, 2, 4]
nums2 = [2, 4, 1]
print("Original list elements:")
print(nums1)
print(nums2)
print("\nCheck two said lists contain the same elements regardless of order!")
print(check_same_contents(nums1, nums2))
Original list elements:
[1, 2, 4]
[2, 4, 1]

Check two said lists contain the same elements regardless of order!
True
#258-create a given flat list of all the keys in a flat dictionary
l={'Laura': 10, 'Spencer': 11, 'Bridget': 9, 'Howard ': 10}
res1=[]
res2=[]
for key in l:
    res1.append(key)
for val in l.keys():
    res2.append(l[val])
print(l.values())
print(res1, res2)
[dict_values([10, 11, 9, 10])]
['Laura', 'Spencer', 'Bridget', 'Howard '] [10, 11, 9, 10]
#259-check if a given function returns True for at least one element in the list
def val_check(lst,fn):
    return any(map(fn,lst))
print(val_check([1, 0, 2, 3], lambda x: x >= 3 ))
True
def test(lst, fn = lambda x: x):
  return all(not fn(x) for x in lst)
print(test([1, 0, 2, 3], lambda x: x >= 3 ))
False
#260-check if all the elements of a list are included in another given list
nums1 = [1, 2, 4]
nums2 = [2, 4, 8]

for i in nums1:
    if i not in nums2:
        print("False")
    else:
        continue
False
def test_includes_all(nums, lsts):
  for x in lsts:
    if x not in nums:
      return False
  return True
print(test_includes_all([10, 20, 30, 40, 50, 60], [20, 40]))
print(test_includes_all([10, 20, 30, 40, 50, 60], [20, 80]))
True
False
#261-get the most frequent element in a given list of numbers
#s1-mostcommon method
from collections import Counter
l=[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]
print(Counter.most_common(l))
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
~\AppData\Local\Temp/ipykernel_2456/4251326418.py in <module>
      3 from collections import Counter
      4 l=[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]
----> 5 print(Counter.most_common(l))

~\anaconda3\lib\collections\__init__.py in most_common(self, n)
    608         # Emulate Bag.sortedByCount from Smalltalk
    609         if n is None:
--> 610             return sorted(self.items(), key=_itemgetter(1), reverse=True)
    611         return _heapq.nlargest(n, self.items(), key=_itemgetter(1))
    612 

AttributeError: 'list' object has no attribute 'items'
def most_frequent(nums):
    return max((nums), key = nums.count)
  #return max(set(nums), key = nums.count)
    
print(most_frequent([1, 2, 1, 2, 3, 2, 1, 4, 2]))
nums = [2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]
print ("Original list:")
print(nums)
print("Item with maximum frequency of the said list:")
print(most_frequent(nums))
2
Original list:
[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]
Item with maximum frequency of the said list:
2
#262- move the specified number of elements to the end of the given list
def move_end(lst,n):
    k=0
    for i in lst:
        if i==n:
            k=i
            lst.remove(i)
    lst.append(k)
    print(lst)
lst=[4, 5, 6, 7, 8, 1, 2, 3]
n=4
move_end(lst,n)
[5, 6, 7, 8, 1, 2, 3, 4]
#s2-slicing
def move_end(nums, offset):
  return nums[offset:] + nums[:offset] 
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], 3))
print(move_end([1, 2, 3, 4, 5, 6, 7, 8], -3))
[4, 5, 6, 7, 8, 1, 2, 3]
[6, 7, 8, 1, 2, 3, 4, 5]
#263-move the specified number of elements to the start of the given list.
def move_beg(nums,offset):
    return nums[-offset:]+nums[:-offset]
print(move_beg([1, 2, 3, 4, 5, 6, 7, 8], 3))
print(move_beg([1, 2, 3, 4, 5, 6, 7, 8], -3))
[6, 7, 8, 1, 2, 3, 4, 5]
[4, 5, 6, 7, 8, 1, 2, 3]
#264-two-dimensional list from given list of lists
def two_dimensional_list(nums):
  return list(zip(*nums))
print(two_dimensional_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]))
print(two_dimensional_list([[1, 2], [4, 5]]))
[(1, 4, 7, 10), (2, 5, 8, 11), (3, 6, 9, 12)]
[(1, 4), (2, 5)]
#265-generate a list, containing the Fibonacci sequence, up until the nth term
#266- to cast the provided value as a list if it's not one
#267-get the cumulative sum of the elements of a given list
l=[1, 2, 3, 4]
cum_sum=0
l_op=[]
for i in l:
    cum_sum=cum_sum+i
    l_op.append(cum_sum)
print(l_op)
[1, 3, 6, 10]
from itertools import accumulate
def cumsum(lst):
  return list(accumulate(lst))
nums = [1,2,3,4]
print("Original list elements:")
print(nums)
print("Cumulative sum of the elements of the said list:")
print(cumsum(nums)) 
Original list elements:
[1, 2, 3, 4]
Cumulative sum of the elements of the said list:
[1, 3, 6, 10]
#268-list with n elements removed from the left, right.
l=[1, 2, 3, 4]
n=2
print(l[n:])
print(l[:n])
[3, 4]
[1, 2]
#269-get the every nth element in a given list
l=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
n=3
res=[]
for i in range(n-1,len(l),n):
    res.append(l[i])
print(res)
[3, 6, 9]
def every_nth(nums, nth):
  return nums[nth - 1::nth]
print(every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))
[2, 4, 6, 8, 10]
List = [1, 2, 3, 4, 5, 6, 7, 8, 9]
 
# Show original list
print("\nOriginal List:\n", List)
 
print("\nSliced Lists: ")
 
# Changing existing List
List = List[1::2]
 
# Display sliced list
print(List)
Original List:
 [1, 2, 3, 4, 5, 6, 7, 8, 9]

Sliced Lists: 
[2, 4, 6, 8]
#270-check if the elements of the first list are contained in the second one regardless of order
def is_contained_in(l1, l2):
  for x in set(l1):
    if l1.count(x) > l2.count(x):
      return False
  return True
print(is_contained_in([1, 2], [2, 4, 1]))
print(is_contained_in([1], [2, 4, 1]))
print(is_contained_in([1, 1], [4, 2, 1]))
print(is_contained_in([1, 1], [3, 2, 4, 1, 5, 1]))
True
True
False
True
#271-check if there are duplicate values in a given flat list
l=[1, 2, 3, 3, 4, 5, 5, 6, 7]
l_op=[]
res_dup=[]
for i in l:
    if i not in l_op:
        l_op.append(i)
    else:
        res_dup.append(i)
print(res_dup)
[3, 5]
#272- generate a list of numbers in the arithmetic progression starting with the given 
#positive integer and up to the specified limit.